{"0": {
    "doc": "Welcome to the course",
    "title": "Welcome to CIS-106-Linux Fundamentals",
    "content": "Here you will find all the information for the course. README: I am currently migrating the course from using Ubuntu to Debian. You will find some pages and documents referencing Ubuntu. Since Ubuntu is based on Debian, everything will work the same. ",
    "url": "/#welcome-to-cis-106-linux-fundamentals",
    
    "relUrl": "/#welcome-to-cis-106-linux-fundamentals"
  },"1": {
    "doc": "Welcome to the course",
    "title": "1. Special Note Regarding the final exam:",
    "content": ". | The final exam is IN PERSON! | It is done this way to guarantee fairness and integrity | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | All the topics that will be covered in the exam are already available here | . ",
    "url": "/#1-special-note-regarding-the-final-exam",
    
    "relUrl": "/#1-special-note-regarding-the-final-exam"
  },"2": {
    "doc": "Welcome to the course",
    "title": "2. COURSE LEARNING OUTCOMES",
    "content": ". | Demonstrate fluency in Linux terminology. | Install Linux and identify features of various distributions. | Manage files in the Linux environment. | Administer user accounts and groups efficiently. | Use Linux Utilities to manage data. | Install software and third-party utilities. | Managing Resources in the Linux networking environment. | Understanding of virtualization with Virtualbox | Understanding of Markdown, Git and GitHub | . ",
    "url": "/#2-course-learning-outcomes",
    
    "relUrl": "/#2-course-learning-outcomes"
  },"3": {
    "doc": "Welcome to the course",
    "title": "3. Technologies Learned/Used",
    "content": ". | Debian: The Linux distribution we will use | VirtualBox: is a powerful x86 and AMD64/Intel64 virtualization product for enterprise as well as home use. | Markdown: is a lightweight markup language for creating formatted text using a plain-text editor. | Slack: is an instant messaging program designed by Slack Technologies and owned by Salesforce. | VS Code: is a code editor redefined and optimized for building and debugging modern web and cloud applications. | . ",
    "url": "/#3-technologies-learnedused",
    
    "relUrl": "/#3-technologies-learnedused"
  },"4": {
    "doc": "Welcome to the course",
    "title": "4. Requirements",
    "content": ". | Access to a computer where Linux can be installed. The following are options: . | A virtual machine (Preferred) | A spare laptop/Desktop computer that you can formatted. For example: . | A mini PC | An old PC | . | . | Access to Blackboard | A Github account | A Text editor. We will be using VS Code. You can use other text editors but if you run into problems, I cannot provide help. | 2 Hours of study time - MANDATORY | Capable of adjusting to fast paced course | For virtualization . | A decent PC that meets or exceeds these requirements: . | Quad-Core Processor | 8 Gb of RAM | Windows 10/11 . | MacOS is also acceptable with some workarounds | . | 100 Gb of free space | . | . | Knowledge of the following . | Basic components of a personal computer . | RAM | CPU | Storage | Motherboard | ETC.. | . | Basic usage of a personal computer. Including but not limited to: . | Internet browsing | Reading emails | Chat Applications | Office Productivity Suites (MS Office, Google Docs, etc) | Install/Remove Software | Download files | Difference between web browser, the internet, and a search engine | Understanding of your computer filesystem (how your computer organizes files) | . | . | . Not knowing these things does not mean you will fail the course. However, It means that you will have to spend extra time studying. ",
    "url": "/#4-requirements",
    
    "relUrl": "/#4-requirements"
  },"5": {
    "doc": "Welcome to the course",
    "title": "5. MacOS Users Read this:",
    "content": ". | If you have a recent MacOS Computer ( Apple M series of CPUs - AKA Apple Silicon), you can use it for the class. Some instructions may be different but if you encounter issues, let me know and I can guide you. The same is true for Intel Macs, however, please make sure that your computer meets the minimum criteria. | . ",
    "url": "/#5-macos-users-read-this",
    
    "relUrl": "/#5-macos-users-read-this"
  },"6": {
    "doc": "Welcome to the course",
    "title": "6. Advice",
    "content": ". | If you find that the content of the course is too much or that you have too many gaps in your knowledge, I suggest that you take CIS-107 then CIS 180 or CIS 116. I recommend those courses first because this class focusses on the GNU/Linux Operating System. We do not cover essential topics such as parts of your computer, basic networking terminology, etc… | If you do not have a decent computer (one that can be used for virtualization) you will have a very poor experience in this course. Contact me to discuss your options. | . ",
    "url": "/#6-advice",
    
    "relUrl": "/#6-advice"
  },"7": {
    "doc": "Welcome to the course",
    "title": "7. Resources",
    "content": ". | Books . | Main Text Book (free): The Linux Command Line By William Shotts | . | Other Free Books to Use as reference: . | GNU/Linux Command−Line Tools Summary | Bash Reference Manual | Introduction to bash scripting | Raspberry Pi Beginner’s Guide 4th Edition *a bit old but still useful | Free Linux Magazine with good command line reference | Free Magazines with project ideas | . | Github Markdown . | Github Markdown Syntax Cheat sheet | Github Markdown syntax official documentation | Git Cheat sheet | Linux cheat sheets | . | . ",
    "url": "/#7-resources",
    
    "relUrl": "/#7-resources"
  },"8": {
    "doc": "Welcome to the course",
    "title": "8. Grading Standard",
    "content": "| Activity | Contribution | . | Final Exam &amp; Final Project | 30% | . | Labs | 20% | . | Week Reports | 5% | . | Class Notes | 15% | . | Discussion Boards | 10% | . | Lecture Quizzes | 5% | . | Attendance/Participation | 15% | . ",
    "url": "/#8-grading-standard",
    
    "relUrl": "/#8-grading-standard"
  },"9": {
    "doc": "Welcome to the course",
    "title": "9. AI Usage",
    "content": ". | AI (Artificial Intelligence) is a great tool to study. You are allowed to use ChatGPT and other LLMs to help you review and practice the material. | You are not allowed to use AI to solve your scripts and challenge questions | You are also not allowed to use AI during your quizzes and final exam | Violation of these polices will be reported and can result in severe penalties. | See the syllabus in Blackboard for other Class and Department policies | . ",
    "url": "/#9-ai-usage",
    
    "relUrl": "/#9-ai-usage"
  },"10": {
    "doc": "Welcome to the course",
    "title": "10. Make Up Exams",
    "content": ". | Make-up exams will be permitted only under extenuating circumstances and only with prior notification and original documentation | The instructor reserves the right to create alternate make-up exams | . ",
    "url": "/#10-make-up-exams",
    
    "relUrl": "/#10-make-up-exams"
  },"11": {
    "doc": "Welcome to the course",
    "title": "11. Changes To the syllabus/course",
    "content": "The instructor reserves the right to make changes to this syllabus. If changes become necessary, students will be notified during the following scheduled class. ",
    "url": "/#11-changes-to-the-syllabuscourse",
    
    "relUrl": "/#11-changes-to-the-syllabuscourse"
  },"12": {
    "doc": "Welcome to the course",
    "title": "12. Expectations",
    "content": ". | Online: Join the zoom meeting 3-5 minutes before the class starts. | This will allow you to check your microphone as you will be required to speak during the lecture | I will kick anyone out of the Zoom room that does not participate when called upon. | MY CLASS IS NOT A WEBINAR. YOU EITHER PARTICIPATE OR LEAVE. | . | In Person: Come to class on time. Class starts at 5:40 PM you are expected to be ready at 5:40 PM . | What does ready mean? . | Your virtual machine is up and running | You have signed in to Blackboard in case there is a quiz | . | I do not wait for anyone. My class starts at 5:40 PM whether you are here or not. | If you miss a quiz because you are late, I will not allow you to retake it. (Of course, there are exceptions.) | . | Regarding cheating: . | Below, I list a few important rules that you should keep in mind: . | Communicating the contents of tests to other students is forbidden. | If an online or take-home test is given, this must be done completely on your own. | Unless otherwise stated, all tests are closed book, closed notes, and no using the Internet to find answers. | During exams, you may not use the restroom, take phone calls, text, or communicate with other students. | Plagiarism will not be tolerated! (i.e. Representing the work of others as his/her own). See the College Catalogue for a full explanation on Plagiarism (Page 41 in the 2013-2015 Catalogue) . | This also applies to code! | . | . | . | . ",
    "url": "/#12-expectations",
    
    "relUrl": "/#12-expectations"
  },"13": {
    "doc": "Welcome to the course",
    "title": "13. Quizzes",
    "content": ". | Quizzes start at 5:40 PM and end at 5:50 PM | Quizzes have no more than 5 questions from the lab/lecture | Quizzes are easy and used for self assessment purposes. That is why they are only worth 5% | Attendance will be called before the quiz starts. | . ",
    "url": "/#13-quizzes",
    
    "relUrl": "/#13-quizzes"
  },"14": {
    "doc": "Welcome to the course",
    "title": "Welcome to the course",
    "content": ". | Welcome to CIS-106-Linux Fundamentals . | 1. Special Note Regarding the final exam: | 2. COURSE LEARNING OUTCOMES | 3. Technologies Learned/Used | 4. Requirements | 5. MacOS Users Read this: | 6. Advice | 7. Resources | 8. Grading Standard | 9. AI Usage | 10. Make Up Exams | 11. Changes To the syllabus/course | 12. Expectations | 13. Quizzes | . | . ",
    "url": "/",
    
    "relUrl": "/"
  },"15": {
    "doc": "Module 1 What is Linux?",
    "title": "Module 1 What is Linux?",
    "content": " ",
    "url": "/modules/module1/",
    
    "relUrl": "/modules/module1/"
  },"16": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 1: Introduction to the course.",
    "content": ". | Presentations . | Introduction to the course | . | How to join our Slack Workspace video here | How to create a github account repository video here | Week Report One video here . | What is Git and Github? | Markdown Presentation | . | Lab 1 video here | . | . ",
    "url": "/modules/module1/#lecture-1-introduction-to-the-course",
    
    "relUrl": "/modules/module1/#lecture-1-introduction-to-the-course"
  },"17": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 2: Introduction to Linux",
    "content": ". | Presentations . | Introduction to Linux | The basics of Virtualization | Using VirtualBox | . | Creating a virtual machine . | Installing Ubuntu 24.04 in virtualbox | Debian Installer | . | . | . ",
    "url": "/modules/module1/#lecture-2-introduction-to-linux",
    
    "relUrl": "/modules/module1/#lecture-2-introduction-to-linux"
  },"18": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 3: The desktop environment",
    "content": ". | Presentations . | Exploring Desktop Environments | What is a Shell? | . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line Fifth Edition By William Shots . | Pages 1 - 6 (25 - 30 of the pdf) | . | Part 4 - Writing Shell Scripts . | Pages 365 (389 of the pdf) | . | Managing Software | . | Recommended reading: . | Part 3 - Common Tasks and Essential Tools - The Linux Command Line Fifth Edition By William Shots . | Package management - Pages 171 - 181 (196 - 205 of the PDF) | . | Shell Scripting Chapter 1 | . | . | . ",
    "url": "/modules/module1/#lecture-3-the-desktop-environment",
    
    "relUrl": "/modules/module1/#lecture-3-the-desktop-environment"
  },"19": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Module 2 Using Ubuntu",
    "content": " ",
    "url": "/modules/module2/",
    
    "relUrl": "/modules/module2/"
  },"20": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 4: Managing Files and directories",
    "content": ". | The Linux filesystem . | Alternative Link | Recommended reading: . | Part 1 - Learning the Shell - The Linux Command Line Fifth Edition By William Shotts . | Navigation - Pages 7 - 12 (31 - 36 of the PDF) | Exploring the system - Pages 13 - 24 (37 - 48) | . | . | . | Managing files and directories . | Alternative link . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line Fifth Edition By William Shotts . | Pages 25 - 41 (49 - 65 of the PDF) | . | . | . | . | Wildcards . | Alternative link . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line Fifth Edition By William Shotts . | Pages 25 - 41 (49 - 65 of the PDF) | . | . | . | . | Shell Scripting - Getting user input . | Alternative link . | Recommended reading . | Part 4 - Writing Shell Scripts - The Linux Command Line Fifth Edition By William Shotts . | Reading Keyboard input - Pages 410 - 421 (434 - 445 of the PDF) | . | . | . | . | . ",
    "url": "/modules/module2/#lecture-4-managing-files-and-directories",
    
    "relUrl": "/modules/module2/#lecture-4-managing-files-and-directories"
  },"21": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 5: Handling Text Files",
    "content": ". | Handling Text Files . | Alternative Link | . | The Basics of Vim . | Alternative Link | . | How to Use Nano on Linux / Mac | Shell Scripting - Control Statements . | Alternative . | Recommended reading: . | Part 3 - Common Tasks Essential tools - The Linux Command Line By William Shotts . | Text Processing - Pages 273 - 314 (297 - 338 of the pdf) | . | . | . | . | . ",
    "url": "/modules/module2/#lecture-5-handling-text-files",
    
    "relUrl": "/modules/module2/#lecture-5-handling-text-files"
  },"22": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 6: Permissions",
    "content": ". | File permissions . | Alternative Link . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line by William Shotts . | Permissions - Pages 90 - 110 (114 - 133 of the pdf) | . | . | . | . | Managing data . | Alternative Link . | Recommended reading: . | Part 3 - Common Tasks and Essential Tools - The Linux Command Line by William Shotts . | Archiving and backup - Pages 234 250(258 - 274 of the pdf) | . | . | . | . | Managing users . | Alternative Link . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line by William Shotts . | Permissions - Pages 90 - 110 (114 - 133 of the pdf) | . | . | . | . | . ",
    "url": "/modules/module2/#lecture-6-permissions",
    
    "relUrl": "/modules/module2/#lecture-6-permissions"
  },"23": {
    "doc": "Module 3 Administration",
    "title": "Module 3 Administration",
    "content": " ",
    "url": "/modules/module3/",
    
    "relUrl": "/modules/module3/"
  },"24": {
    "doc": "Module 3 Administration",
    "title": "Lecture 7",
    "content": ". | Managing processes . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line by William Shotts . | Processes - Pages 110 - 124 (134 - 148 of the pdf) | . | . | . | Basic Networking protocols . | Recommended reading: . | Part 3 - Common tasks and essential tools - The Linux Command Line by William Shotts . | Networking - 201 - 215 (225 - 241 of the pdf) ",
    "url": "/modules/module3/#lecture-7",
    
    "relUrl": "/modules/module3/#lecture-7"
  },"25": {
    "doc": "Module 3 Administration",
    "title": "Lecture 8",
    "content": "| . | . | . | Shell scripting . | Hello World | Working with Variables . | User defined | Environmental Variables | User input | Positional parameters | . | Here Documents | Shell Functions . | Local vs Global Variables | . | Flow Control statements | Loops | Case statements | Arithmetic and string operations | Arrays | . | . ",
    "url": "/modules/module3/#lecture-8",
    
    "relUrl": "/modules/module3/#lecture-8"
  },"26": {
    "doc": "Module 3 Administration",
    "title": "Lecture 9",
    "content": ". | Scheduling Tasks | . ",
    "url": "/modules/module3/#lecture-9",
    
    "relUrl": "/modules/module3/#lecture-9"
  },"27": {
    "doc": "Week Report 1",
    "title": "Week Report 1",
    "content": "Video here . ",
    "url": "/week_report/wr1/",
    
    "relUrl": "/week_report/wr1/"
  },"28": {
    "doc": "Week Report 1",
    "title": "List of Tasks",
    "content": "For this week, complete the following tasks. | Install Slack in your phone and/or computer (I suggest both) and join our Slack workspace. The Link to join is in Blackboard (Takes about 5 minutes to complete) | [OPTIONAL] Watch this video so that you are familiar with Git and GitHub. (10 Minutes) | [OPTIONAL] Watch this video so that you are familiar with VS Code’s interface (7 Minutes) | Complete Lab 1 - Learning Markdown (Takes about 1 hour depending on how well you can use your computer) | Read the syllabus or home page of the course website. Write down any questions you have for me. | Complete Notes 1. | Complete Week Report 1 | . ",
    "url": "/week_report/wr1/#list-of-tasks",
    
    "relUrl": "/week_report/wr1/#list-of-tasks"
  },"29": {
    "doc": "Week Report 1",
    "title": "What will you include in your notes?",
    "content": ". | Create a folder in your Documents folder called: notes1 | Open the notes1 folder inside VS Code and create a file called: notes1.md | Inside the notes1.md file type and answer the following questions using proper markdown syntax (headings, paragraph formatting, bullet points, etc..) . | What is Markdown? | What is Git? | What is GitHub? | What is Slack? | . | Save and convert the file to PDF | Compress the folder to a zip file and upload the file to your github repository | In Blackboard: . | Submit the PDF file notes1.pdf | Submit the URL of your github repository. Make sure that your github repository contains your Notes1.zip file. If the zip file is not there I will not award you a passing grade for this Notes | . | . ",
    "url": "/week_report/wr1/#what-will-you-include-in-your-notes",
    
    "relUrl": "/week_report/wr1/#what-will-you-include-in-your-notes"
  },"30": {
    "doc": "Week Report 1",
    "title": "What will you submit for your week report 1:",
    "content": "Step 1 Prepare your submission for week report 1 . | Create a folder in your documents directory called: wr1 | Open the wr1 folder in VS Code | Inside wr1, create a markdown file called wr1.md | In the file, wr1.md type the following: | . --- name: your name assignment: week report 1 course: cis106 semester: spring 23 for example --- Week Report 1 Submission ## Slack Screenshot take a screenshot of slack and place it here ![Slack screenshot](filename.png) ## Github Screenshot take a screenshot of your github account and place it here ![GitHub Screenshot](filename.png) ## Acknowledgements * By submitting this assignment I [Your full name here] acknowledge that I have read the syllabus or home page of the course * I also acknowledge that I have written down any questions that I have for the professor and will ask them in class, via Slack or * I also acknowledge that I am aware that the final exam is In Person . Step 2 Upload to GitHub . | Once you have placed the screenshots in your markdown file, and typed the acknowledgment, save the file and convert the file to pdf. | READ the syllabus or home page of the site PLEASE! | . | Upload the weekReports folder to GitHub. | . Step 3 Submit . | In blackboard, under week report 1, submit the following: . | The URL to your GitHub repository | The PDF file of your week report 1 (wr1.pdf) | . | . ",
    "url": "/week_report/wr1/#what-will-you-submit-for-your-week-report-1",
    
    "relUrl": "/week_report/wr1/#what-will-you-submit-for-your-week-report-1"
  },"31": {
    "doc": "Week Report 1",
    "title": "How will you be graded:",
    "content": "| Item | Points | . | GitHub Repository URL containing all the files | 25pts | . | PDF File with the screenshots | 25pts | . | Proper markdown syntax | 25pts | . | Acknowledgement message | 25pts | . Regarding Late submissions . Late submissions will be penalized 20 points. See blackboard for due date . Special Note Regarding the final exam: . | You will be required to use markdown during your final exam. | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/week_report/wr1/#how-will-you-be-graded",
    
    "relUrl": "/week_report/wr1/#how-will-you-be-graded"
  },"32": {
    "doc": "Week Report 2",
    "title": "Week Report 2",
    "content": " ",
    "url": "/week_report/wr2/",
    
    "relUrl": "/week_report/wr2/"
  },"33": {
    "doc": "Week Report 2",
    "title": "Video Here",
    "content": "Week Report 2 Spring 24 . ",
    "url": "/week_report/wr2/#video-here",
    
    "relUrl": "/week_report/wr2/#video-here"
  },"34": {
    "doc": "Week Report 2",
    "title": "Complete the following tasks",
    "content": ". | Complete lab 2 - Installing Debian 13. | If you have not done so, complete Week Report 1. | Complete Discussion Board 1 - Open Source. Note: you can do this later as the due date is the end of the semester. | Complete Discussion Board 2 - The history of Linux. Note: you can do this later as the due date is the end of the semester. | Complete Notes 2. This and everything else from this point on must be completed inside Debian (your virtual machine). Windows/MacOS will no longer be used. Therefore you MUST complete lab 2 before attempting the report and the notes. | Complete this week’s Week Report. | . ",
    "url": "/week_report/wr2/#complete-the-following-tasks",
    
    "relUrl": "/week_report/wr2/#complete-the-following-tasks"
  },"35": {
    "doc": "Week Report 2",
    "title": "What will you include in your notes?",
    "content": "Notes: . | folder and directory mean the same thing! | local repository means your cis106 folder inside your virtual machine | . | If you have not done so, create a folder inside your cis106 folder called notes | Inside the notes directory/folder create a new folder called notes2 | Open the cis106 directory/folder inside vs code. | Using vs code file manager, create a file inside the notes2 directory called notes2.md | In the file notes2.md, answer the following questions. Make sure to use proper markdown syntax to make your notes file look presentable. Use headings, paragraphs and bullet point formatting. This, at a minimum, should make your file look presentable. NO SCREENSHOTS! All the information to answer the questions can be found in the Lecture 2 presentation Introduction to Linux and The basics of virtualization | . Lecture 2 Introduction to Linux Notes (this is the tittle of the document - Heading 1 formatting please!) 1. What is an Operating System? 2. What is a kernel? 3. Which other parts aside from the kernel identify an OS? 4. What is linux and linux distribution? 6. List at least 4 linux characteristics: 7. What is Debian? 9. List and define the different types of licensing agreements 10. What is Free Software? Define the 4 freedoms. 11. What is virtualization? . ",
    "url": "/week_report/wr2/#what-will-you-include-in-your-notes",
    
    "relUrl": "/week_report/wr2/#what-will-you-include-in-your-notes"
  },"36": {
    "doc": "Week Report 2",
    "title": "What will you submit for your week report:",
    "content": "Note: Since you already completed lab2, the remaining of the work in this course will be completed inside the virtual machine. Windows/MacOS will not be used for the remaining of the course!!! PLEASE DO NOT EDIT OR UPLOAD FILES TO GITHUB VIA THE WEBSITE. You must use VS Code Terminal to commit and push to your repository. If you decide to ignore this. You are on your own. If you don’t understand, please ask! This report can only be completed after lab 2! . | If you have not done so, create a folder inside the weekReports folder called wr2. You probably did this already during lab 2. | Open the cis106 folder in VS Code | Inside the wr2 folder, create a file called wr2.md | Add a link to your notes and lab2 markdown files in github. | Add a screenshot of your Debian Desktop (virtual machine) with a terminal open or firefox in the cis106.com website | Convert the wr2.md file to pdf | Push all the changes to github | In blackboard, submit the URL to the wr2.md file and the pdf file wr2.pdf | . ",
    "url": "/week_report/wr2/#what-will-you-submit-for-your-week-report",
    
    "relUrl": "/week_report/wr2/#what-will-you-submit-for-your-week-report"
  },"37": {
    "doc": "Week Report 2",
    "title": "Special Note 1 - VM Snapshots",
    "content": "Please take a snapshot of your virtual machine after you complete the report. The virtual machine must be off before you take the snapshot. This process is show in the video You should have at least 2 snapshots of your vm. Keep in mind that snapshots take space. ",
    "url": "/week_report/wr2/#special-note-1---vm-snapshots",
    
    "relUrl": "/week_report/wr2/#special-note-1---vm-snapshots"
  },"38": {
    "doc": "Week Report 2",
    "title": "Special Note 2 – Git Command Quick Reference",
    "content": "You’ll be using Git frequently this semester. Here’s a quick reminder of the most common commands: . | Command | Purpose | . | git clone repository/url/here | Download a GitHub repository to your computer. | . | git pull | Synchronize your local repository with the latest changes from GitHub. Always run this before starting work in VS Code. | . | git add . | Track all changes made to your files. | . | git commit -m \"description here\" | Save a snapshot of your tracked changes with a short description. | . | git push | Send your committed changes to GitHub. | . Command Order: . git pull git add . git commit -m \"message\" git push . ⚠️ Warning: ⚠️ Avoid making changes directly in the GitHub website unless you: . | Know exactly what you are doing, and | Remember to run git pull before working locally. | . ",
    "url": "/week_report/wr2/#special-note-2--git-command-quick-reference",
    
    "relUrl": "/week_report/wr2/#special-note-2--git-command-quick-reference"
  },"39": {
    "doc": "Week Report 2",
    "title": "Special Note Regarding the Final Exam",
    "content": ". | The final exam will be in person. | It is performance-based and requires access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school: . | A Linux workstation will be available on campus. | Request it early-available computers are limited. | . | . ",
    "url": "/week_report/wr2/#special-note-regarding-the-final-exam",
    
    "relUrl": "/week_report/wr2/#special-note-regarding-the-final-exam"
  },"40": {
    "doc": "Week Report 3",
    "title": "Week Report 3",
    "content": " ",
    "url": "/week_report/wr3/",
    
    "relUrl": "/week_report/wr3/"
  },"41": {
    "doc": "Week Report 3",
    "title": "Video here",
    "content": "Week Report 3 . Note: This cannot be completed if you have not completed lab 2. 1. Study Material . | Presentations: . | Exploring Desktop Environments | Gnome documentation | What is a Shell? . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line Fifth Edition By William Shots | Pages 1 - 6 (25 - 30 of the pdf) | . | . | . | . 2. Tasks to complete . | Complete the lectures’s practice (3 to 10) and take a screenshot. Place the screenshots in the wr3 folder/directory inside the week_reports folder/directory. Just take a screenshot of your terminal after running the last command in each practice. Make sure to clear your screen before you start each practice. You will use these screenshots when creating your week report 3 submission therefore place them in the correct wr3 folder. If you do not understand what this means, watch the video as there is a live demonstration there. | Practice 3: Basic Shell Usage Commands | Practice 4: Basic System Information Commands | Practice 5: Basic Hardware Information Commands | Practice 6: Basic “Fun” commands | Practice 7: Using the command history | Practice 8: Using man | Practice 9: Using the help option | Practice 10: Solution | . | Complete Lab 3 - The GNOME DE and The Bash Shell | Complete Notes 3 | Complete Week Report 3 | . 2. Complete lab 3 . | Video here | Instructions here | . 3. What to include in notes 3: . | Create a markdown file that includes the following: . | Answers to the following questions: . | What is a graphical user interface (GUI)? | What is a desktop environment? | What is the command line interface (CLI)? | How do I access the command line interface (CLI)? | What is a virtual console? | What is a terminal emulator? | What is bash? | What is the shell prompt? | . | Definition, usage, and examples of the following commands: . | clear | echo | date | free | uname | history | man | tldr | cheat | hostname | df | du | figlet | . | . | . You can add more commands too from the presentation! This video contains an example from a couple of semesters ago . 4. Complete week report 3 . | Inside the wr3 directory/folder, create a markdown file called wr3.md | The wr3.md file must include the following: . | Heading 1: Week Report 3 | Heading 2: Completed work for week 3 | A bulleted list of the following URLs: . | Link to lab3.md | Link to notes3.md | . | Heading 2: Practice screenshots . | Heading 3:Practice 3 . | Screenshot of practice 3 | . | . | Repeat the process for the remaining practice. | . | . ",
    "url": "/week_report/wr3/#video-here",
    
    "relUrl": "/week_report/wr3/#video-here"
  },"42": {
    "doc": "Week Report 3",
    "title": "What will you submit:",
    "content": ". | Convert wr3.md to pdf | Push everything to github: | In blackboard submit: . | URL to wr3.md in github | The pdf file wr3.pdf | . | . ",
    "url": "/week_report/wr3/#what-will-you-submit",
    
    "relUrl": "/week_report/wr3/#what-will-you-submit"
  },"43": {
    "doc": "Week Report 3",
    "title": "Special Note 1",
    "content": "Please take a snapshot of your virtual machine after you complete the report. The virtual machine must be off before you take the snapshot. ",
    "url": "/week_report/wr3/#special-note-1",
    
    "relUrl": "/week_report/wr3/#special-note-1"
  },"44": {
    "doc": "Week Report 3",
    "title": "Special Note 2 – Git Command Quick Reference",
    "content": "You’ll be using Git frequently this semester. Here’s a quick reminder of the most common commands: . | Command | Purpose | . | git clone repository/url/here | Download a GitHub repository to your computer. | . | git pull | Synchronize your local repository with the latest changes from GitHub. Always run this before starting work in VS Code. | . | git add . | Track all changes made to your files. | . | git commit -m \"description here\" | Save a snapshot of your tracked changes with a short description. | . | git push | Send your committed changes to GitHub. | . ",
    "url": "/week_report/wr3/#special-note-2--git-command-quick-reference",
    
    "relUrl": "/week_report/wr3/#special-note-2--git-command-quick-reference"
  },"45": {
    "doc": "Week Report 3",
    "title": "Special Note 3:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/week_report/wr3/#special-note-3",
    
    "relUrl": "/week_report/wr3/#special-note-3"
  },"46": {
    "doc": "Week Report 4",
    "title": "Video",
    "content": " ",
    "url": "/week_report/wr4/#video",
    
    "relUrl": "/week_report/wr4/#video"
  },"47": {
    "doc": "Week Report 4",
    "title": "Study Material",
    "content": ". | Managing Software | Shell Scripting Presentation | . ",
    "url": "/week_report/wr4/#study-material",
    
    "relUrl": "/week_report/wr4/#study-material"
  },"48": {
    "doc": "Week Report 4",
    "title": "Tasks to complete",
    "content": ". | Complete Practice 1 from the presentation Managing Software. Take a screenshot of the terminal and place it in the wr3/ directory/folder | Complete Practice 1 from the Shell Scripting Presentation.Take a screenshot of the terminal and place it in the wr3/ directory/folder | Complete Lab 4 | Complete Notes 4 | Complete Week Report 4 | Work on your Discussion Boards | . ",
    "url": "/week_report/wr4/#tasks-to-complete",
    
    "relUrl": "/week_report/wr4/#tasks-to-complete"
  },"49": {
    "doc": "Week Report 4",
    "title": "What to include in Notes 4",
    "content": "Anser the following questions: . | How to install and remove software using the APT command | How to create a shell script step by step including screenshots and how to run it. Try to be as detailed as possible. | . ",
    "url": "/week_report/wr4/#what-to-include-in-notes-4",
    
    "relUrl": "/week_report/wr4/#what-to-include-in-notes-4"
  },"50": {
    "doc": "Week Report 4",
    "title": "What will you submit for Week report 4",
    "content": ". | Add the screenshots of practice 1 (managing software and shell scripting). Properly label them using headings | Add links to your notes 4 and lab 4 | Convert wr4.md to pdf | Push everything to github: | In blackboard submit: . | The GitHub URL to the wr4.md file | The pdf file wr4.pdf | . | . ",
    "url": "/week_report/wr4/#what-will-you-submit-for-week-report-4",
    
    "relUrl": "/week_report/wr4/#what-will-you-submit-for-week-report-4"
  },"51": {
    "doc": "Week Report 4",
    "title": "Special Note 1 – Git Command Quick Reference",
    "content": "You’ll be using Git frequently this semester. Here’s a quick reminder of the most common commands: . | Command | Purpose | . | git clone repository/url/here | Download a GitHub repository to your computer. | . | git pull | Synchronize your local repository with the latest changes from GitHub. Always run this before starting work in VS Code. | . | git add . | Track all changes made to your files. | . | git commit -m \"description here\" | Save a snapshot of your tracked changes with a short description. | . | git push | Send your committed changes to GitHub. | . ",
    "url": "/week_report/wr4/#special-note-1--git-command-quick-reference",
    
    "relUrl": "/week_report/wr4/#special-note-1--git-command-quick-reference"
  },"52": {
    "doc": "Week Report 4",
    "title": "Special Note 3:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/week_report/wr4/#special-note-3",
    
    "relUrl": "/week_report/wr4/#special-note-3"
  },"53": {
    "doc": "Week Report 4",
    "title": "Week Report 4",
    "content": " ",
    "url": "/week_report/wr4/",
    
    "relUrl": "/week_report/wr4/"
  },"54": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Lab 1 - Learning Markdown",
    "content": ". | Lab 1 - Learning Markdown . | Resources | Learning Outcomes | Question 1 What is Markdown? (10 pts) . | 1. Learn about Markdown: | 2. Install and Explore VS Code: | 3. Complete Practice 1: | Practice 1 (Slides 7–8) | . | Question 2 Working with Headings and Paragraphs (10 pts) . | Instructions: | Practice 2 - Slide 12 | . | Question 3 Working with Lists (10 pts) . | Instructions | Practice 3 | . | Question 4 Working with Code Formatting (10 pts) . | Instructions | Practice 4 - Slide 20 | . | Question 5 Working with Links and Images (10 pts) . | Instructions | Practice 5 - Slide 30 | . | Question 6 Working with Tables (10 pts) . | Instructions | Practice 6 | . | Question 7 Challenge Question – Create a Markdown Resume (40 pts) . | Scenario | What to Do | . | Time to submit . | Create a GITHUB account | What will you upload to Github: | Blackboard submission | Here is how I will grade you: | Regarding Late submissions | Special Note Regarding the final exam: | . | . | . ",
    "url": "/labs/lab1/",
    
    "relUrl": "/labs/lab1/"
  },"55": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Resources",
    "content": ". | Presentation | Lab 1 Files | Markdown Cheat Sheet | Markdown Official documentation | VS Code | Lab video | . ",
    "url": "/labs/lab1/#resources",
    
    "relUrl": "/labs/lab1/#resources"
  },"56": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Learning Outcomes",
    "content": ". | How to use VS Code | How to use Markdown | How to create a GitHub Repository | How to add files to a GitHub Repository via the Web | . ",
    "url": "/labs/lab1/#learning-outcomes",
    
    "relUrl": "/labs/lab1/#learning-outcomes"
  },"57": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 1 What is Markdown? (10 pts)",
    "content": "1. Learn about Markdown: . | Read Slides 1–6 . | These slides will help you understand what Markdown is and the formatting options it supports. | . | Complete Practice 1 (More Detailed Instructions Below) . | The slides have a summary of the steps. The instructions here are more detailed. | . | . 2. Install and Explore VS Code: . | Download and install Visual Studio Code (VS Code). | Familiarize yourself with the following features: . | How to install an extension | How to open a folder | How to create files and folders using the file manager | How to save files | ⚠️ Note: We will cover all of this during Practice 1, but reviewing it in advance will help you follow along more easily. | Here is a nice introduction to VS Code. Watch the video if you want to learn more than what its covered in this lab. | . | . 3. Complete Practice 1: . | Follow the detailed instructions provided here to complete Practice 1. | The slides contain a shorter version of these steps, but this version includes more explanation to help guide you. | . Practice 1 (Slides 7–8) . 📁 Step 1: Enable File Extensions (Windows Only) . | If you’re using Windows 10 or 11, make sure file extensions (like .md or .pdf) are visible. Some VS Code extensions will not work correctly if file extensions are hidden. | Windows 10: Enable file extensions | Windows 11: Enable file extensions | macOS: No action needed - file extensions are shown by default. | . | . 📦 Step 2: Set Up Your Practice Folder . | Download the file lab1.zip. | Unzip or decompress the file into your Documents folder. | You should now have a folder called lab1 in Documents. | . ⚠️ Important: Do not just open the zip file. You must extract it first. If you’re unsure how, watch this video. 💻 Step 3: Open the Folder in VS Code . | Open VS Code. | Go to File → Open Folder… and open the lab1 folder. | . ⚠️ Always open a folder in VS Code when working - never just a single file. 🧩 Step 4: Install These VS Code Extensions . | Install the following extensions (search for them in the Extensions panel): . | Markdown All in One – by Yu Zhang | Markdown PDF – by yzane | Markdown Preview Enhanced – by Yiyi Wang | PDF Preview – by Analytic Signal Limited | Code Spell Checker – by Street Side Software (optional but recommended) | . | . 🔍 Step 5: Try the Extensions . 1) Markdown PDF: . | Open the file Ubuntu.md inside the question1 folder. | Right-click on an empty area and choose: Markdown PDF: Export (PDF) | A file named Ubuntu.pdf should appear in the same folder. | . 2) Markdown Preview Enhanced: . | Right-click on an empty area of Ubuntu.md and select: Markdown Preview Enhanced: Open Preview | This lets you check for formatting issues before exporting. | . 4) PDF Preview: . | Open the newly created Ubuntu.pdf file in VS Code. | It should open like a regular PDF viewer. | . 3. Code Spell Checker: . | This extension highlights spelling mistakes in Markdown or code. | Optional: You can skip this if you prefer. | . ⚠️ Note: Make sure to save your markdown file. ",
    "url": "/labs/lab1/#question-1-what-is-markdown-10-pts",
    
    "relUrl": "/labs/lab1/#question-1-what-is-markdown-10-pts"
  },"58": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 2 Working with Headings and Paragraphs (10 pts)",
    "content": "Instructions: . | Read Slides 9–10 . | These slides explain how to use headings, bold, and italic formatting in Markdown. | . | Complete Practice 2 (More Detailed Instructions Below) . | The slides have a summary of the steps. The instructions here are more detailed. | . | . Practice 2 - Slide 12 . Step 1) Rename the File . | Inside the question2 folder, find the file named homework.txt. | Rename it to homework.md. | . Step 2) Apply Heading Formatting . | Format line 1 as a Heading 1: Add # at the beginning of the line. | Format line 2 as a Heading 2: Add ## at the beginning. | Format line 10 as a Heading 3: Add ### at the beginning. | . ⚠️ You must add a space after the # . ✅ Preview the file to see the difference between Heading 1, 2, and 3. Step 3) Bold Formatting . | Make every instance of the word markdown bold, except when it appears in a heading. | To do this, wrap the word with double asterisks like so: **markdown** (No spaces between the asterisks and the word.) | . Step 4) Italic Formatting . | Format the following phrases in italics using single asterisks (*): . | lightweight markup language | by John Gruber in 2004 | Websites like Reddit and GitHub support Markdown | . | . Step 5) Bold + Italic Formatting . | Format the following in bold and italics using triple asterisks (***): . | websites, documents, notes, books, presentations, email messages, and technical documentation. | opened using virtually any application. | any device running any operating system. | . | . Step 6) Preview the Markdown File . | Right-click in the editor and use Markdown Preview Enhanced to view the formatted document. | Do you see how each level of formatting looks different? | . ",
    "url": "/labs/lab1/#question-2-working-with-headings-and-paragraphs-10-pts",
    
    "relUrl": "/labs/lab1/#question-2-working-with-headings-and-paragraphs-10-pts"
  },"59": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 3 Working with Lists (10 pts)",
    "content": "Instructions . | Read Slides 14–15 . | These slides explain how to create unordered (bulleted) and ordered (numbered) lists in Markdown. | . | Complete Practice 3 . | The presentation has a shorter version of the instructions. Follow the more detailed steps below: | . | . Practice 3 . Step 1) Copy Your Previous Work . | Navigate to the question2 folder. | Copy the file homework.md into the question3 folder. | . Step 2) Create a Bulleted List . | In the homework.md file (inside question3), format lines 12 to 20 as a bulleted list: . | Start each line with a dash - or an asterisk * followed by a space. | Remove any empty lines between items. | Preview the file to check that it displays as a clean bulleted list. | . | . Step 3) Add a Heading and a Numbered List . | Below the bulleted list, add a Heading 2: ## Recommended Markdown Applications | Then add the following numbered list: | . Mac: MacDown, iA Writer, or Marked 2 Windows: ghostwriter or Markdown Monster Linux: ReText or ghostwriter . ⚠️ You can also indent list items by pressing Enter, then Tab, similar to Word. Step 4) Add a Second Heading and a Nested Bulleted List . | Add another Heading 2: ## Notes Taking Apps | Then add this bulleted list with indented sub-items (press Tab after hitting Enter to indent): | . Linux Joplin Obsidian Windows Typora Notion macOS Ulysses Craft . Step 5) Preview Your Markdown . | Use Markdown Preview Enhanced to review your final output. | Confirm that your headings, bulleted list, numbered list, and indents all appear correctly. | . ",
    "url": "/labs/lab1/#question-3-working-with-lists-10-pts",
    
    "relUrl": "/labs/lab1/#question-3-working-with-lists-10-pts"
  },"60": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 4 Working with Code Formatting (10 pts)",
    "content": "Instructions . | Read Slides 18–19 . | These slides explain how to format inline code and code blocks in Markdown. | . | Complete Practice 4 . | The slides contain a shorter version of these steps. Follow the detailed instructions below. Practice 4 - Slide 20 . | . | . Step 1) Open the file . | In the question4 folder, open the file codeNotes.md. | This file contains notes about Python, but the code is not yet properly formatted. | Preview the file to see how it looks before you apply formatting. | . Step 2) Format a Code Block (Lines 12 -15) . | Add triple backticks ``` before line 12 and after line 15. | Leave one empty line before the opening backticks and one empty line after the closing backticks. | . Step 3) Inline Code Formatting (Lines 19–23) . | Format the following words using inline code by wrapping them in single backticks: . | int, float, str, bool, list, tuple, dict, set | . | . Step 4) Format Another Code Block (Lines 30–43) . | Wrap lines 30–43 with triple backticks to create a code block. | Again, leave an empty line before and after the code block. | . Step 5) Save and Preview . | Save your file. | Use Markdown Preview Enhanced in VS Code to make sure: | Inline code appears correctly | Code blocks are formatted with the correct spacing | Python code is syntax highlighted (bonus) | . ",
    "url": "/labs/lab1/#question-4-working-with-code-formatting-10-pts",
    
    "relUrl": "/labs/lab1/#question-4-working-with-code-formatting-10-pts"
  },"61": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 5 Working with Links and Images (10 pts)",
    "content": "Instructions . | Read Slides 22–25 and 29 . | These slides explain how to insert hyperlinks and images in Markdown. | . | Complete Practice 5 . | The presentation includes a shorter version of the steps. Follow these detailed instructions below. Practice 5 - Slide 30 . | . | . Step 1) Open the Provided Files . | Navigate to the question5 folder. You’ll find: . | linux.md - the Markdown file you’ll be editing. | Debian_logo.png - an image file. | . | Open linux.md in VS Code. | . Step 2) Add Hyperlinks . | In the linux.md file, locate the words: . | Linux | Linux Kernel | Linux Distribution | Linus Torvalds | . | Format each of these words as a hyperlink using the appropriate URL listed in the file. | . Step 3) Insert Images . | Insert the Linux mascot (Tux) using the URL provided in the linux.md file. | Insert the Debian logo (Debian_logo.png) from the same folder. | . Step 4) Save and Preview . | Save your linux.md file. | Use Markdown Preview Enhanced to view the formatted document. | Check that: . | All hyperlinks work correctly | Images display properly with spacing | Alt text shows if the image fails to load | . | . ",
    "url": "/labs/lab1/#question-5-working-with-links-and-images-10-pts",
    
    "relUrl": "/labs/lab1/#question-5-working-with-links-and-images-10-pts"
  },"62": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 6 Working with Tables (10 pts)",
    "content": "Instructions . | Read Slides 32–34 . | These slides explain how to create and format tables in Markdown. | . | Complete Practice 6 . | The slides contain a summary version of the steps. Follow these detailed instructions below. | . | . Practice 6 . Step 1) Open the File . | Navigate to the question6 folder. | Open the file pets.md. | . Step 2) Format the Text as a Table . | The file contains unstructured or plain text data about pets. | Convert that text into a Markdown-formatted table using this syntax: | . | Column 1 | Column 2 | Column 3 |----------|----------|----------| Value A | Value B | Value C | . Make sure: Column headers are clearly labeled. The number of separators (|) matches the number of columns. Each row aligns properly under the correct column . Step 3) Align Your Table for Readability . | While spacing between columns doesn’t affect the preview, aligning them in the code improves readability. | You can use the VS Code extension “Markdown All in One” for automatic table formatting if installed. | . Step 4) Save and Preview . | Save your file. | Use Markdown Preview Enhanced to check that your table renders correctly. | . ",
    "url": "/labs/lab1/#question-6-working-with-tables-10-pts",
    
    "relUrl": "/labs/lab1/#question-6-working-with-tables-10-pts"
  },"63": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 7 Challenge Question – Create a Markdown Resume (40 pts)",
    "content": "Scenario . Your friend, John Doe, has asked you to create a 1-page resume for him. He has provided all of his information in a text file and included a profile picture. Since you’ve just learned Markdown, you decide to format the resume using Markdown and then export it as a PDF for John. What to Do . | Navigate to the question7 folder. You will find: . | info.txt - John’s resume content | resume.png - a preview of the finished PDF | johndoe.jpeg - john’s profile picture | . | Rename info.txt → resume.md | Format the resume using Markdown . | Use the Markdown skills you’ve learned to format: . | Headings for sections (e.g., ## Education) | Bullet points for lists (e.g., skills, experiences) | Bold and italic text where needed | An image for John’s profile photo | . | Use this reference image to guide your formatting: . | VS Code Preview of resume.md | . | . | Preview your Markdown . | Use Markdown Preview Enhanced to check how the resume looks in VS Code. | Make sure everything fits on one page and is clearly organized. | . | Convert to PDF . | Right-click anywhere inside resume.md and select: | Markdown PDF: Export (PDF) | This will generate a resume.pdf file in the same folder. | . | Compare with the Example . | Open resume.png in the question7 folder. | Your exported PDF should look similar to that example. | . | Save Your Work. Double-check that: . | resume.md is saved with all formatting | resume.pdf is properly generated | You didn’t remove any content from the original info.txt | John’s profile photo renders in the markdown and the pdf | . | . ",
    "url": "/labs/lab1/#question-7-challenge-question--create-a-markdown-resume-40-pts",
    
    "relUrl": "/labs/lab1/#question-7-challenge-question--create-a-markdown-resume-40-pts"
  },"64": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Time to submit",
    "content": "Create a GITHUB account . | Create a github account using your PCCC email address. Make sure to save your github username, email, and password somewhere safe (like a password manager). You will need it a lot! If you already have a GitHub account, you are allowed to use it. | Create a public repository called cis106 LOWERCASE PLEASE! | Here is a video on how to create a github account and repository. | Do not close the GitHub page, you will need it later. | . What will you upload to Github: . The lab1 folder. Every single file must be in your GitHub repository! . Blackboard submission . In blackboard, submit the following: . | The PDF file resume.pdf. | The URL of your GitHub Repository. For example, here is mine: https://github.com/linuxworkshop67/cis106 | . Here is how I will grade you: . | I will go to your github repository, I will check that you complete all the practice from the video that is 60 points. | I will check that you completed the challenge question that is 40 points. Having the resume.md file properly formatted and the pdf file is proof of this. | If I cannot find the files in Github, you will not be awarded a passing grade for this lab. | . Regarding Late submissions . Late submissions will be penalized 20 points. See blackboard for due date . Special Note Regarding the final exam: . | You will be required to use markdown during your final exam. | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/labs/lab1/#time-to-submit",
    
    "relUrl": "/labs/lab1/#time-to-submit"
  },"65": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Lab 2 - Installing Debian 13",
    "content": ". | Lab 2 - Installing Debian 13 . | READ ME FIRST! | Video Guide Here | Presentations: | Requirements | Step 1: Enable Virtualization . | Check your computer’s hardware: | Compare your hardware to the requirements below. | Required Specifications | . | Step 2: Install Virtualbox . | 1. Download the necessary files | 2. Install Microsoft Visual C++ Redistributable (Windows Only) | 3. Install VirtualBox | 4. Install the VirtualBox Extension Pack | 5. Restart VirtualBox | . | Step 3: Create the virtual machine . | 1. Open VirtualBox | 2. Start the New VM Wizard | 3. Fill in the Wizard Settings | 4. Adjust Additional VM Settings | 5. Need Help? | . | Step 4: Install Debian 13 | Step 5: Update and Install Essential Software . | 1. Sign In \\&amp; Take the Tour | 2. Disable the Debian Installer DVD Source | 3. Prevent the VM from Sleeping | 4. Update the System via Terminal | 5. Install Essential Programs | 6. Install VS Code and Extensions | . | Step 6: Install Guest Additions | Step 7 Set up Git \\&amp; GitHub . | 1. Sign in to your Github account | 2. Configure your Git Identity | 3. Generate an SSH Key | 4. Copy Your Public SSH Key | 5. Add Your SSH Key to GitHub | 6. Test Your Connection | 7. Clone Your Repository | 8. Visual Guides | . | Step 8: Set up screenshot tool | Prepare your submission . | Organize your repository | Create your submission | Submit in Blackboard | . | Special Note 1 – Practice with Virtual Machines | Special Note 2 – Git Command Quick Reference | Special Note Regarding the Final Exam | . | . ",
    "url": "/labs/lab2_debian/",
    
    "relUrl": "/labs/lab2_debian/"
  },"66": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "READ ME FIRST!",
    "content": ". | This lab uses VirtualBox 7.1 as the hypervisor. | This guide is designed for students whose host operating system is Windows or macOS. | It supports both: . | x86_64 (Intel/AMD processors) | Apple Silicon (M1, M2, M3, etc.) | . | Whenever an instruction applies only to Windows or only to macOS, it will be clearly marked at the start of the step in bold colored text. | Important: Because your computer setup may differ from mine, unexpected issues may occur. If you run into problems, alternative versions of this lab can be created upon request, and I am available to assist via Zoom or in person. Please do not wait until the last minute! | If you encounter too many problems with VirtualBox, you may use VMware Workstation Player 17 instead. I plan to create a separate guide for VMware Player in the future. | . ",
    "url": "/labs/lab2_debian/#read-me-first",
    
    "relUrl": "/labs/lab2_debian/#read-me-first"
  },"67": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Video Guide Here",
    "content": "Lab 2 Installing Debian 13 . ",
    "url": "/labs/lab2_debian/#video-guide-here",
    
    "relUrl": "/labs/lab2_debian/#video-guide-here"
  },"68": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Presentations:",
    "content": ". | The basics of Virtualization | Using VirtualBox | Debian Installer | Screenshots - creating a virtual machine | Screenshots - Debian installer | . ",
    "url": "/labs/lab2_debian/#presentations",
    
    "relUrl": "/labs/lab2_debian/#presentations"
  },"69": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Requirements",
    "content": ". | This lab is accompanied by several presentations that act as an extra resource for you. I recommend that you take a quick look at them just in case you get lost you will know where to find help aside from the video | Please go slow and take your time to do this lab. It is long but it is the core of this course. | If you do not have a computer that meets the recommended criteria, please reach out to me and stop doing this lab. | . NOTE! . | If your computer does not meet the required hardware, you will have a hard time completing all the work and the final project therefore be ready for some slow downs! | . ",
    "url": "/labs/lab2_debian/#requirements",
    
    "relUrl": "/labs/lab2_debian/#requirements"
  },"70": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Step 1: Enable Virtualization",
    "content": "Before you can create virtual machines, you need to confirm that your computer supports virtualization and meets the required specifications. Follow these steps: . Check your computer’s hardware: . | CPU model and number of cores | Amount of RAM | Available free storage space | . Compare your hardware to the requirements below. If your system does not meet these requirements, stop here and contact me. We can discuss possible alternatives on a one-on-one basis. Required Specifications . | CPU: Quad-core processor or higher | RAM: 8 GB or more | Free Storage: 60 GB or more | . If your system is slightly below the requirements, you may still be able to complete the course. However, performance will be slow, so be mindful of how many applications you have open at once. One requirement that you cannot overlook is your CPU. A quad-core or higher is required. [macOS / Apple Computers ONLY] . If your computer meets the above specifications, you can skip enabling virtualization—macOS enables it by default. If your Mac does not meet the requirements, it cannot be used for this class. Contact me so we can discuss possible solutions. [WINDOWS ONLY] . If your computer meets or exceeds the above specifications, you must check whether virtualization is enabled: . | Follow this guide to check and enable virtualization. | You can also use Speccy to confirm whether virtualization is enabled. | . If you run into trouble enabling virtualization, let me know immediately. Do not wait until the last minute! This step can take time. ",
    "url": "/labs/lab2_debian/#step-1-enable-virtualization",
    
    "relUrl": "/labs/lab2_debian/#step-1-enable-virtualization"
  },"71": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Step 2: Install Virtualbox",
    "content": "Follow these steps to download and install everything you need before creating your virtual machine. 1. Download the necessary files . Which Debian ISO Should You Download? . | Your Computer Type | CPU Type | ISO File to Download | Download Link | . | Windows 11/10 | Intel or AMD (x86_64) | debian-13.0.0-amd64-netinst.iso | Download -&gt; Click the black Download button | . | macOS (Intel) | Intel (x86_64) | debian-13.0.0-amd64-netinst.iso | Download -&gt; Click the black Download button | . | macOS (Apple Silicon) | ARM (arm64) | debian-13.0.0-arm64-netinst.iso | Direct Link | . ATTENTION MACOS USERS If your mac computer has an Apple Sillicon CPU (M Series), the latest version of virtualbox 7.2 is not working. Please download version 7.1 instead. To obtain the installer for 7.1, follow these steps: . | In virtualbox download page, scroll down to “Previews releases” | Select Virtualbox 7.1 | Then select ​macOS / Apple Silicon hosts | Also download the Extension Pack | . | VirtualBox Installer | VirtualBox Extension Pack | [Windows ONLY] Microsoft Visual C++ Redistributable | . 2. Install Microsoft Visual C++ Redistributable (Windows Only) . | Run the installer you downloaded in step 1.4. | You may need to restart your computer after installation. | . 3. Install VirtualBox . | Install VirtualBox like any other application on your system. | macOS users: During installation, VirtualBox will request permissions. Grant all requested permissions, otherwise some features will not work. | . 4. Install the VirtualBox Extension Pack . | Double-click the downloaded .vbox-extpack file (e.g., Oracle_VM_VirtualBox_Extension_Pack-7.0.26.vbox-extpack). | Follow the prompts to install it. | . 5. Restart VirtualBox . Close VirtualBox completely, then reopen it before continuing to the next step. Tip: If you need a visual walkthrough for this step, refer to the provided video guide. ",
    "url": "/labs/lab2_debian/#step-2-install-virtualbox",
    
    "relUrl": "/labs/lab2_debian/#step-2-install-virtualbox"
  },"72": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Step 3: Create the virtual machine",
    "content": "1. Open VirtualBox . | Launch VirtualBox if it’s not already open. | When prompted to choose between Basic and Expert mode, select Expert (this gives you all the settings in one screen). | . 2. Start the New VM Wizard . Click the New button to begin creating a virtual machine. 3. Fill in the Wizard Settings . | Setting | Value to Enter | Notes | . | Name | Debian 13 - Desktop | You can name it something else, but keep it clear. | . | Folder | Default location | Only change if you need to store the VM elsewhere. | . | ISO Image | Select your downloaded Debian 13 ISO | If you can’t find it, you may not have downloaded it or opened (mounted) it instead. | . | Type | Linux | Should be auto-detected. | . | Version | Debian (64-bit) | If 64-bit is missing, virtualization is not enabled—go back to Step 1. | . | Unattended Installation | Skip unattended installation | We will install Debian manually. | . | RAM | 4096 MB recommended | 2048 MB minimum (not recommended). | . | CPU | 2 CPUs | You may assign more if your host has 4+ cores, but 2 is enough. | . | Hard Disk Size | 50 GB | 40 GB minimum. For faster performance, enable Pre-allocate full size. | . | Hard Disk Type | VDI | VirtualBox’s native format. | . 4. Adjust Additional VM Settings . After creating the VM, select it and click Settings, then change the following: . | General -&gt; Advanced . | Shared Clipboard: Bidirectional | Drag &amp; Drop: Bidirectional | . | General -&gt; Description . | Add notes for your chosen hostname, username, and password. | . | Display -&gt; Screen . | Enable 3D Acceleration (If you see flickering or driver issues later, come back here and disable it). | Video Memory: Set to maximum. | . | Audio: Disable it. | . 5. Need Help? . Refer to the Visual Guide if you have trouble finding these settings. ",
    "url": "/labs/lab2_debian/#step-3-create-the-virtual-machine",
    
    "relUrl": "/labs/lab2_debian/#step-3-create-the-virtual-machine"
  },"73": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Step 4: Install Debian 13",
    "content": ". | Start your virtual machine in VirtualBox. | Follow the installation steps shown in the Visual Guide: | View the Visual Guide Here | Complete the installation exactly as shown. This will ensure your Debian setup matches the rest of the course instructions. | . ",
    "url": "/labs/lab2_debian/#step-4-install-debian-13",
    
    "relUrl": "/labs/lab2_debian/#step-4-install-debian-13"
  },"74": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Step 5: Update and Install Essential Software",
    "content": "At this point, Debian 13 is installed and your virtual machine has rebooted. You should now see a login screen similar to this: . Follow these steps to prepare your system for the semester: . Here is a visual guide to help you complete these step. 1. Sign In &amp; Take the Tour . | Log in with the credentials you set during installation. | A “Welcome to Debian 13” tour will appear. This is a quick slideshow about the GNOME desktop. Take a moment to go through it. | . 2. Disable the Debian Installer DVD Source . This will prevent package installation errors later. | Open the Software Center: . | Press the Windows/Super key or click Activities in the top-left corner. | Search for Software Center and open it. (It’s also in the favorites bar.) | . | Click the hamburger menu (three horizontal lines) in the top-right. | Select Software Repositories. | Find and disable the “Debian 13 DVD installer” source. | Close the Software Center. | . 3. Prevent the VM from Sleeping . This avoids issues, especially for macOS users, where the VM becomes unresponsive. | Open Settings: . | Click the System Menu in the top-right (battery/network/volume icons). | Click the gear icon next to the screenshot button. | . | Go to Power -&gt; Power Saving. | Turn off Automatic Power Saver and Automatic Screen Blank. | . 4. Update the System via Terminal . | Open the Terminal (search for “Terminal” in Activities). | Run the following command: | . sudo apt update &amp;&amp; sudo apt upgrade -y . | Enter your password when prompted (no characters will appear—that’s normal). | If you mistype, it will simply ask again. | . 5. Install Essential Programs . Run these commands to install required tools: . wget https://cis106.com/assets/scripts/essentials.sh chmod +x essentials.sh ./essentials.sh -a . Note: This may take a while depending on your internet speed. 6. Install VS Code and Extensions . wget https://cis106.com/assets/scripts/vscode.sh chmod +x vscode.sh ./vscode.sh . Note: This will install Visual Studio Code along with all the extensions needed for the course. When done, restart your virtual machine to ensure all updates and installations are applied. ",
    "url": "/labs/lab2_debian/#step-5-update-and-install-essential-software",
    
    "relUrl": "/labs/lab2_debian/#step-5-update-and-install-essential-software"
  },"75": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Step 6: Install Guest Additions",
    "content": "Right now, your virtual machine cannot fully utilize your host computer’s screen. While you could increase the display scaling from the Virtual Machine menu, that only enlarges the view — it doesn’t properly fit the screen. To enable full-screen mode (and other useful features), you need to install Guest Additions. Follow these steps: . | Insert the Guest Additions ISO . | In the Virtual Machine window menu, click Devices → Insert Guest Additions CD Image. | . | Open the GNOME File Manager and access the inserted disk . | Search for and launch the Files application. | In the left sidebar, click the Vbox CD entry. | . | Run the Guest Additions installer . | In the file manager, click the Run Software button at the top-right corner. | . | . ",
    "url": "/labs/lab2_debian/#step-6-install-guest-additions",
    
    "relUrl": "/labs/lab2_debian/#step-6-install-guest-additions"
  },"76": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Step 7 Set up Git &amp; GitHub",
    "content": "We’ll now configure Git on your virtual machine and connect it to your GitHub account using SSH. This will make it easier to upload files to GitHub since we wont need to manually upload files via the web interface. 1. Sign in to your Github account . | Open your web browser and log in to your GitHub account. | Debian 13 comes preloaded with Firefox. You can use the Software Center to install other Web Browsers however, we will use Firefox the entire semester. | . 2. Configure your Git Identity . | Open the Terminal Application | Run the following commands, replacing the placeholders with your actual information. These tell Git who you are, which is important for tracking your commits. | . git config --global user.name \"Your Name\" git config --global user.email \"your_email@example.com\" . 3. Generate an SSH Key . This SSH key will be how we connect to GitHub. Think of this as a password but much more secure. Run this command on your terminal. Remember to replace the placeholder information with your own. ssh-keygen -t ed25519 -C \"your_email@example.com\" . When prompted: . | “Enter a file in which to save the key” -&gt; Press Enter to accept the default location. | “Enter passphrase” -&gt; Press Enter for no passphrase (optional). | . A passphrase adds extra security, but for this course it’s not required. 4. Copy Your Public SSH Key . Run the following command: . cat ~/.ssh/id_ed25519.pub . Highlight and copy the entire output to your clipboard. 5. Add Your SSH Key to GitHub . | In GitHub, go to Settings -&gt; SSH and GPG Keys. | Click New SSH Key. | Paste your key into the text box and save. | Make sure that there are no trailing spaces | . 6. Test Your Connection . Run this command: . ssh -T git@github.com . Type yes when prompted. 7. Clone Your Repository . Run these command. Remember to replace the placeholders with your actual GitHub username and repository name: . cd git clone git@github.com:YourGitHubUsername/YourRepositoryName.git . 8. Visual Guides . These recordings were made in Ubuntu 24.04 but they will work the same for Debian 13. ",
    "url": "/labs/lab2_debian/#step-7-set-up-git--github",
    
    "relUrl": "/labs/lab2_debian/#step-7-set-up-git--github"
  },"77": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Step 8: Set up screenshot tool",
    "content": "Note: The default screenshot application in Debian does not meet our needs. Instead, we will use gnome-screenshot, which provides the required functionality. | Open Keyboard Settings in Debian: . | Settings → Keyboard → View and Customize Shortcuts → Custom Shortcuts | . | Click the + icon to add a new shortcut. | In the dialog box, enter the following: . | Name: gnome-screenshot | Command: gnome-screenshot -i | . | Assign your shortcut: . | Click the Set Shortcut button. | Press the Print Screen key on your keyboard (or any other key combination of your choice). | If prompted, click Replace to override the existing shortcut. | . | Test your shortcut: . | Press the Print Screen key. | If it doesn’t work, repeat the steps above. | . | Visual Guide: | . ",
    "url": "/labs/lab2_debian/#step-8-set-up-screenshot-tool",
    
    "relUrl": "/labs/lab2_debian/#step-8-set-up-screenshot-tool"
  },"78": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Prepare your submission",
    "content": "Organize your repository . | First, let’s organize your repository. We want to have a folder for labs, week reports, notes, and cheat sheets. It is important to have a project properly organized because as the project grows, the harder it becomes to manage files if they do not have some sort of organizational structure. | In the cis106 folder (also known as a directory in the Unix/Linux World), create the following folders (all lowercase please): . | labs | week_reports | notes | cheat_sheets | . | In the cis106 folder, you have a zip file for lab 1, week report 1 and notes 1. You also have several pdf and markdown files from the previews week. Remove the pdf and markdown files and unzip all the zip files. | Move the unzipped folders to their corresponding folder. For example, lab1 should moved to labs. | . Create your submission . | Inside the labs folder create a new folder for lab 2 called: lab2 | Open the cis106 folder in VS Code | Inside the lab2 folder, create a new markdown file called lab2.md | Paste the following markdown text in the file: | . # Lab 2 Submission ## Virtual Machine settings ![cpufetch](cpufetch.png) ![script](script.png) . | Open a terminal and run the following command: cpufetch 2&gt; /dev/null | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 folder | Clear the terminal with the command: clear and run the following command: curl -s https://cis106.com/assets/scripts/lab2_system_info.sh | bash | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 folder. Name the screenshot script.png | Save and convert the file lab2.md file to pdf | Open the VS Code terminal and enter the following commands to commit and push your changes to github: | . git pull git add . git commit -m 'lab2 finished' git push . Submit in Blackboard . In blackboard submit the following: . | The URL to the lab2.md file in github | The lab2.pdf file | . ",
    "url": "/labs/lab2_debian/#prepare-your-submission",
    
    "relUrl": "/labs/lab2_debian/#prepare-your-submission"
  },"79": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Special Note 1 – Practice with Virtual Machines",
    "content": "This lab is a canonical lab - meaning it’s foundational for your learning. You’ll be creating more virtual machines (VMs) later in this course and your career, so now is the time to get comfortable with the process. I recommend experimenting: . | Try installing Windows 10. First, research its minimum requirements so you can adjust your VM settings accordingly. | Install other Linux distributions to compare features and interfaces. | You do not need to keep these practice VMs. Once you’re done experimenting: | Delete them using the option “Delete all files” rather than just removing them from VirtualBox. | This ensures your hard drive space is fully recovered. | . | . ",
    "url": "/labs/lab2_debian/#special-note-1--practice-with-virtual-machines",
    
    "relUrl": "/labs/lab2_debian/#special-note-1--practice-with-virtual-machines"
  },"80": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Special Note 2 – Git Command Quick Reference",
    "content": "You’ll be using Git frequently this semester. Here’s a quick reminder of the most common commands: . | Command | Purpose | . | git clone repository/url/here | Download a GitHub repository to your computer. | . | git pull | Synchronize your local repository with the latest changes from GitHub. Always run this before starting work in VS Code. | . | git add . | Track all changes made to your files. | . | git commit -m \"description here\" | Save a snapshot of your tracked changes with a short description. | . | git push | Send your committed changes to GitHub. | . Command Order: . git pull git add . git commit -m \"message\" git push . ⚠️ Warning: ⚠️ Avoid making changes directly in the GitHub website unless you: . | Know exactly what you are doing, and | Remember to run git pull before working locally. | . ",
    "url": "/labs/lab2_debian/#special-note-2--git-command-quick-reference",
    
    "relUrl": "/labs/lab2_debian/#special-note-2--git-command-quick-reference"
  },"81": {
    "doc": "Lab 2 - Installing Debian 13",
    "title": "Special Note Regarding the Final Exam",
    "content": ". | The final exam will be in person. | It is performance-based and requires access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school: . | A Linux workstation will be available on campus. | Request it early—available computers are limited. | . | . ",
    "url": "/labs/lab2_debian/#special-note-regarding-the-final-exam",
    
    "relUrl": "/labs/lab2_debian/#special-note-regarding-the-final-exam"
  },"82": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Lab 3 - The GNOME DE and The Bash Shell",
    "content": " ",
    "url": "/labs/lab3/",
    
    "relUrl": "/labs/lab3/"
  },"83": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Video here",
    "content": "VIDEO . | Lab 3 - The GNOME DE and The Bash Shell . | Video here | Learning Outcomes | Pre Work | Question 1: Using The Gnome Desktop Environment . | Changing the wallpaper | Customizing the Dash | Using GNOME Extensions | Exploring the File Manager (GNOME Files / Nautilus) | Exploring Gnome Text | Exploring GNOME System Settings | . | Question 2: Working with the terminal emulator . | Step 1: Splitting the terminal | Step 2: Creating sessions | Step 3: Exploring Tilix preferences | . | Question 3: Trying Out Some Basic Commands . | Step 1: Split the terminal | Step 2: Open the manual page | Step 3: Using the echo command | . | Question 4: Changing the desktop environment (Optional) . | Deliverable Question 4 | . | Challenge Question . | Example question | Example solution | . | Special Note 1 - Practice the man command! | Special Note 2 - Git Command Quick Reference | Special Note Regarding the Final Exam | . | . ",
    "url": "/labs/lab3/#video-here",
    
    "relUrl": "/labs/lab3/#video-here"
  },"84": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Learning Outcomes",
    "content": ". | Get comfortable with the GNOME Desktop Environment | Learn how to use the terminal to run simple commands | Learn how to use the man command to read the manual pages | . ",
    "url": "/labs/lab3/#learning-outcomes",
    
    "relUrl": "/labs/lab3/#learning-outcomes"
  },"85": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Pre Work",
    "content": "Before starting this lab, complete the following setup steps: . | Open the File Manager and navigate to the labs folder/directory inside your cis106 repository: ~/cis106/labs/ | Create a new folder/directory named lab3. | Open Visual Studio Code (VS Code) and open the cis106 folder/directory. | Inside the lab3 folder/directory, create a new file named lab3.md. | Copy and paste the following markdown template into the file. Save your changes, close VS Code, and then begin your lab work. | . Note: This template will be the standard format for all lab submissions moving forward. If you are ever unsure about how to structure your work, return to this lab as a reference. # Lab 3 Submission ## Question 1 ![q2](q1.png) ## Question 2 ![q2](q2.png) ## Question 3 ![q3](q3.png) ## Challenge Question ![q4](q4.png) ## Challenge Question Script Source code: [lab3](lab3-script.sh) . ",
    "url": "/labs/lab3/#pre-work",
    
    "relUrl": "/labs/lab3/#pre-work"
  },"86": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Question 1: Using The Gnome Desktop Environment",
    "content": "In this section, you’ll get comfortable with GNOME by exploring its features, customizing your desktop, and learning how to manage basic settings. Changing the wallpaper . | Download a wallpaper you like. (You can use Google Images or a dedicated site like wallhaven.cc and pexels.com). | In your Pictures folder, create a new folder/directory called wallpapers. | Save your downloaded image into this new folder. Rename the file to something descriptive. | Right-click on the desktop -&gt; choose Change Background -&gt; select your new wallpaper. | . Customizing the Dash . The dash is the favorites bar that appears on your desktop. You can add apps you use often and remove the ones you don’t need. | To remove an app: Right-click -&gt; Unpin from Dash | To add an app: Search for the app -&gt; Right-click -&gt; Pin to Dash | . Make the following changes: . Add: . | Tilix | VS Code | GNOME Screenshot | . Remove: . | Help | Calculator | Software Center | . Using GNOME Extensions . In Lab 2, you ran the essentials.sh script. This script installed several GNOME Extensions — small programs that add or change GNOME features. To manage them, open the Extensions Manager app. Extensions to Enable: . | Caffeine - Prevents the computer from going to sleep. (Look for the coffee cup icon in the system menu.) | Dash to Panel - Moves the dash into a bottom panel, similar to Windows 10. | System Monitor - Displays resource usage (helpful since our VM has limited resources). | Tiling Assistant - Lets you snap apps to the left or right (like macOS/Windows). | . Steps: . | Turn on these extensions one at a time. Wait until each one is fully enabled before turning on the next. | Install one new extension: Frippery Applications Menu by Rmyorston. | After enabling it, you’ll see a new Applications option in the panel. | . Extensions can also be tweaked. For instance, let’s customize the Dash to Panel extension. | Click on the gears icon in the Dash to Panel extension. | In the Fine-Tune section, enable “Keep original gnome-shell top panel”. Notice that the top panel has been re-enabled. However, now we have duplicated items such as the date and system menu | In the Position section, use the visible option to hide the system menu and the date | . Exploring the File Manager (GNOME Files / Nautilus) . GNOME’s file manager is simple but works much like Windows Explorer. Let’s try some tasks to get familiar with it: . | Show hidden files -&gt; Press Ctrl + H or use the menu button. In Linux/Unix, hidden files start with a dot (.). | Create a hidden folder/directory in your Home folder named .fonts. | Download FiraCode Nerd Font from: nerdfonts.com/font-downloads. | Open the zip file FiraCode.zip. It will unzip into a folder called FiraCode. | Open the FiraCode folder -&gt; Select all files (Ctrl + A) -&gt; Copy them. | Paste the files into the .fonts folder you created. | Delete the unnecessary files: LICENSE and README.md. | Refresh the font cache: . | Option 1: Log out and log back in | Option 2: Run this command in the terminal: fc-cache -f -v | . | Turn off hidden files (Ctrl + H) when finished. | . Exploring Gnome Text . Another essential tool in any desktop environment is the text editor. Linux relies heavily on configuration files; so much so that in Linux/Unix, everything is considered a file (we’ll explore this idea in more detail later). As a Linux user, you’ll be working with configuration files frequently, which makes familiarity with a text editor indispensable. GNOME provides a simple yet powerful text editor called Gnome Text. In earlier versions of GNOME, the default editor was Gedit. While Gedit can still be installed and used, it is no longer part of the core GNOME applications. Follow these steps to get comfortable with Gnome Text: . | Open the Text Editor app (Gnome Text). | Click the hamburger menu (≡) and go to Properties: . | Enable “Show line numbers” | Enable “Show right margin” | Disable “Check spelling” | Disable “Restore Session” | Under Spaces Per Tab, set the value to 4 | Choose a theme you like | Enable Custom font, then select the font you downloaded earlier. Adjust the font size to your preference | Enable Highlight current line | . | Create a new file and write a simple to-do list. Save the file as Todo.md. | Add a bit of Markdown formatting and observe how the editor provides syntax highlighting. | . | Reopen the file, make some edits, and try to close the editor without saving. | Notice that Gnome Text gives you three options: . | Discard -&gt; Closes the editor and loses all changes | Save -&gt; Prompts you to save your file in a location of your choice | Cancel -&gt; Cancels the action and returns you to the editor | . | Save and close the editor. | Finally, open two or more files in Gnome Text. Notice that each file opens in its own tab within a single window. | . Exploring GNOME System Settings . GNOME provides two main apps for system configuration: . | Settings -&gt; general options (appearance, apps, notifications, etc.) | GNOME Tweaks -&gt; advanced customization Tasks: . | Open the Settings app. Explore the available categories. | Open GNOME Tweaks. | . | Go to Windows -&gt; Enable Titlebar Buttons -&gt; add Minimize and Maximize. | Notice the window border now shows Minimize, Maximize, and Close. | Back in Settings: | . | Switch between Dark Mode and Light Mode, and choose an accent color. | Check Default Apps -&gt; see which apps are set for each task. | Go to Notifications -&gt; Turn on Do Not Disturb, or manage app-specific notifications. | Explore the Search section -&gt; decide whether to include files in search results or just apps. | Explore any other options you’re curious about. | . | . | . Deliverable Question 1 . Take a screenshot of your full virtual machine screen. | Name the file: q1.png | Save it in your lab3 folder/directory. | . ",
    "url": "/labs/lab3/#question-1-using-the-gnome-desktop-environment",
    
    "relUrl": "/labs/lab3/#question-1-using-the-gnome-desktop-environment"
  },"87": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Question 2: Working with the terminal emulator",
    "content": "Before we start working with Bash, let’s first get comfortable with the terminal emulator itself. Since most people have little to no experience using a terminal, this step will help you understand the application before we dive into commands. Currently, your system has two terminal emulators installed: . | GNOME Console | Tilix | . For this lab, we will use Tilix because it offers more features than GNOME Console. However, I encourage you to explore GNOME Console on your own time. Step 1: Splitting the terminal . | Open Tilix. (If a warning or error message appears, you can safely ignore it.) | Look in the top-left corner—you will see two icons that allow you to split the terminal. | Use these buttons to split the terminal into four panes, so you end up with 4 terminal windows like this: | . Note: It is common to use multiple terminals simultaneously. This is an essential skill for your final exam. Advanced users often use tools like Tmux to achieve similar workflows, but Tilix makes it easier for beginners. Step 2: Creating sessions . | Tilix also allows you to create separate sessions, which work like workspaces. | Click on “View session side bar (1/1)” and use the “+” button to add a new session. | . Step 3: Exploring Tilix preferences . | Open the hamburger menu (≡) → select Preferences. | Under Global: . | Enable: Strip first character of paste if comment or variable declaration | Enable: Strip trailing whitespaces and new lines | . | Under Appearance: . | Set the theme variant to match your system preference (dark or light). | Optionally, you can set a background image (a dark wallpaper pairs well with white text). | If you use a background image, you will need to adjust transparency later. | Enable: Use wide handle for splitters (this makes resizing panes easier). | . | Under Default Profile -&gt; General tab: . | Enable Custom font and choose FiraCode Nerd Font (pick any variant you like). | If you want something more modern, try the Dracula Theme for Tilix. | Adjust transparency if you added a background image earlier. | . | . Deliverable Question 2 . Take a screenshot of Tilix. | Name the screenshot: q2.png | Save it in your lab3 folder/directory. | . ",
    "url": "/labs/lab3/#question-2-working-with-the-terminal-emulator",
    
    "relUrl": "/labs/lab3/#question-2-working-with-the-terminal-emulator"
  },"88": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Question 3: Trying Out Some Basic Commands",
    "content": "In this question, we will learn how to read the manual (man) page of a command and how to work with two terminals at the same time. The command we will focus on is echo. Step 1: Split the terminal . | Open Tilix. | Split it vertically so you have two terminal panes. | . Step 2: Open the manual page . | In the right terminal, open the manual page for echo using the command: man echo | Navigate the manual page using: . | Arrow keys to scroll line by line | Spacebar to scroll one page at a time | . | To open the help page inside the manual reader (for additional commands and navigation tips), press h. | To exit the manual page, press Q. | . Step 3: Using the echo command . | The basic usage of echo is: echo \"string to print to the screen\" . | Tip: Quotes are optional but recommended, as they help avoid issues with special characters. | . | Use the man page to learn how to perform the following tasks: . | Display a line of text without a new line | Display a line of text that includes a horizontal tab | Display two lines of text in a single echo command | Display two lines of text in a single echo command, with the second line starting with a tab | Display two lines of text, with the first line starting with a tab | . | . Deliverable Question 3 . Take a screenshot of Tilix. | Name the screenshot: q3.png | Your screenshot should show all echo commands and the man page open | If more than 1 screenshot is needed, use the following naming convention: | q3.1.png, q3.2.png | Save it in your lab3 folder/directory. | . ",
    "url": "/labs/lab3/#question-3-trying-out-some-basic-commands",
    
    "relUrl": "/labs/lab3/#question-3-trying-out-some-basic-commands"
  },"89": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Question 4: Changing the desktop environment (Optional)",
    "content": "During the Debian installation we chose 2 desktop environments: Gnome and Gnome Classic. In Linux, we are not tied to a single desktop environment, we can install others we if want to. Since we have Gnome Classic already installed, lets take a look. | Log out. | In the display manager, type your password but do not press enter | In the button right corner, you will notice a gear icon. Click it and choose Gnome Classic | Sign in. | Notice how different the desktop environment looks | Sign out and switch back to the Default Gnome Session | . Deliverable Question 4 . This question has no deliverable . ",
    "url": "/labs/lab3/#question-4-changing-the-desktop-environment-optional",
    
    "relUrl": "/labs/lab3/#question-4-changing-the-desktop-environment-optional"
  },"90": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Challenge Question",
    "content": "Use the man page to find the answer to the following questions. Make sure to split your terminal in two so that you can use the man page in one and run commands on the other. The point of this question is to get you used to using multiple terminals and the man page. This is a skill that you will need for the final exam so please do not use the internet to find the answers. Make sure to take a screenshot of every command that answers each question. The screenshot needs to show the man page of the given command open in the location where you found the answer and it has to show the command and its output. | John wants to see how much free memory he has in his system. He understands that the free command is used for this however, he would like the output of the command to appear in a single line and with human readable format. | What is the complete command that John has to use here? | Take a screenshot showing the man page showing the correct options and the command and its output. See the example for a reference. | . | Kenny is a system administrator working on automation scripts. He is building a script where he needs to know the kernel name, kernel release, kernel version, and operating system of the computer. He knows that the uname command can provide this information. | What is the complete command that Kenny has to use here? | Take a screenshot showing the man page showing the correct options and the command and its output. See the example for a reference. | . | Dave is working with an API that only accepts rfc-3339 time format for dates. For example, 2025-09-10 18:39:53.467197335-04:00 is an acceptable format but anything else will return an error. He needs a date command that will allow him to convert the current time into rfc-3339 format. | What is the complete command that Dave has to use here? | Take a screenshot showing the man page showing the correct options and the command and its output. See the example for a reference. | . | . Here is an example question and solution so that you know what I am expecting of you: . Example question . | Julius has a homelab with tailscale. His homelab has several Linux containers and he wants a command that will display in JSON format the IP configuration for a machine when he signs in. He knows that the command ip addr show dev &lt;interface&gt; can be used for displaying the specific interface configuration but the output is not in JSON format and it is also hard to read. | What is the complete command that Julius has to use here? (options for the ip command have to be placed after ip) | Take a screenshot showing the man page showing the correct options and the command and its output. | . | . Example solution . Warning: If your screenshot does not show where in the man page you found the answer, you will not be awarded a passing grade for this question. The example clearly shows the command options in the man page that solves the problem. Deliverable for challenge question . Take a screenshot of Tilix for the answer of each question. | Name the screenshots: q5.1.png, q5.2.png, q5.3.png, q5.4.png | Your screenshot should show the command and the man page. Just like the example | If more than 1 screenshot is needed, use the following naming convention: | q5.1.1.png, q3.1.2.png | Save it in your lab3 folder/directory. | . ",
    "url": "/labs/lab3/#challenge-question",
    
    "relUrl": "/labs/lab3/#challenge-question"
  },"91": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Special Note 1 - Practice the man command!",
    "content": "The challenge question in this lab is similar to the type of questions you will see in your final exam. In the final exam, you will have access to your notes and the man pages but not to the internet or any LLM. This means that you should use the challenge question as practice playground. Learn how to use the man pages efficiently and practice the workflow of having 2 terminals open. ",
    "url": "/labs/lab3/#special-note-1---practice-the-man-command",
    
    "relUrl": "/labs/lab3/#special-note-1---practice-the-man-command"
  },"92": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Special Note 2 - Git Command Quick Reference",
    "content": "You’ll be using Git frequently this semester. Here’s a quick reminder of the most common commands: . | Command | Purpose | . | git clone repository/url/here | Download a GitHub repository to your computer. | . | git pull | Synchronize your local repository with the latest changes from GitHub. Always run this before starting work in VS Code. | . | git add . | Track all changes made to your files. | . | git commit -m \"description here\" | Save a snapshot of your tracked changes with a short description. | . | git push | Send your committed changes to GitHub. | . Command Order: . git pull git add . git commit -m \"message\" git push . ⚠️ Warning: ⚠️ Avoid making changes directly in the GitHub website unless you: . | Know exactly what you are doing, and | Remember to run git pull before working locally. | . ",
    "url": "/labs/lab3/#special-note-2---git-command-quick-reference",
    
    "relUrl": "/labs/lab3/#special-note-2---git-command-quick-reference"
  },"93": {
    "doc": "Lab 3 - The GNOME DE and The Bash Shell",
    "title": "Special Note Regarding the Final Exam",
    "content": ". | The final exam will be in person. | It is performance-based and requires access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school: . | A Linux workstation will be available on campus. | Request it early—available computers are limited. | . | . ",
    "url": "/labs/lab3/#special-note-regarding-the-final-exam",
    
    "relUrl": "/labs/lab3/#special-note-regarding-the-final-exam"
  },"94": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Lab 4 - Software Installation and Shell Scripting",
    "content": " ",
    "url": "/labs/lab4/",
    
    "relUrl": "/labs/lab4/"
  },"95": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Video",
    "content": " ",
    "url": "/labs/lab4/#video",
    
    "relUrl": "/labs/lab4/#video"
  },"96": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Learning outcomes",
    "content": ". | How to search, install, and remove software using APT | How to create and run a basic shell script | . ",
    "url": "/labs/lab4/#learning-outcomes",
    
    "relUrl": "/labs/lab4/#learning-outcomes"
  },"97": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Question 1: Using APT",
    "content": "General formula of the apt command: . | (sudo when installing/removing) apt + apt command package name(s) | Available apt commands: . | search | install | remove | purge | show | clean | . | See man apt and man apt-get for a comprehensive list | . Searching for packages . | Open Tilix (terminal application) and search for a tetris clone using the search string \"tetris clone\". The command should return 3 packages: bastet, ltris, tint | Now, use the search string tetris to search for all packages related to tetris | Repeat the previews search but this time use packages name only. Use the command: apt search --names-only \"tetris\". Notice that this command only returned packages whose name include the word tetris | Take a screenshot of your terminal. Name your screenshot q1.1.png and place it in your lab4/ directory/folder | . So Whats the difference? . | apt search \"tetris\" searches for the pattern “tetris” in both package names and their descriptions (and other searchable metadata). | apt search --names-only \"tetris\" restricts the search so that “tetris” is matched only in the package names, not in descriptions. There is a caveat: in some versions, --names-only also matches the Provides (virtual package) fields. | . Installing packages . | Install the packages bastet and blockattack | Split Tilix in 2 and show the package information for both packages. Compare the output of each command. Press letter q when you are done reading. | Install the package blockout2, cuyo and remove the package blockattack. Use the command: sudo apt install blockout2+ cuyo+ blockattack- | Take a screenshot of your terminal. Name your screenshot q1.2.png and place it in your lab4/ directory/folder | . So what’s up with those + and - signs? APT can install and remove applications in a single command. Simply mark the packages you want to install with a + sign and those you want to remove with a - . Removing packages . | Remove the package cuyo | Purge the package cuyo | Take a screenshot of your terminal. Name your screenshot q1.3.png and place it in your lab4/ directory/folder | . So what was the difference? . | sudo apt remove cuyo: . | Removes the package’s installed files (binaries, libraries, etc.). | Retains system-wide configuration files in /etc and any user-specific config files under $HOME. | Reinstalling the same package later will reuse those retained configuration files. | . | sudo apt purge cuyo: . | Performs the same removal, plus deletes all system-wide configuration files. | Equivalent to apt remove --purge cuyo. | Leaves only user-specific files under $HOME. It is important to remember that purging a package does not remove user level configurations under $HOME that means that we must delete those manually whenever that applies. | . | . Cleaning the system . For cleaning the system we use the following commands: . | Command | Function | Removes Packages | Removes Config Files | Affects Cache | Notes | . | sudo apt clean | Deletes all .deb files from /var/cache/apt/archives/ | No | No | Yes | Clears the entire local package cache (both used and unused files). | . | sudo apt autoclean | Deletes only obsolete .deb files (no longer available for download) | No | No | Yes | Keeps cache clean without wiping current packages. | . | sudo apt autoremove | Removes packages installed automatically as dependencies but no longer needed | Yes | No | No | Safe cleanup of unused dependencies. | . | sudo apt autopurge | Combines autoremove and purge | Yes | Yes | No | Removes unused dependencies and purges their config files. | . If you want to clean your system, you can use the following 1-liner: . sudo apt clean &amp;&amp; sudo apt autoclean &amp;&amp; sudo apt autoremove &amp;&amp; sudo apt autopurge . | Take a screenshot of your terminal. Name your screenshot q1.4.png and place it in your lab4/ directory/folder | . ",
    "url": "/labs/lab4/#question-1-using-apt",
    
    "relUrl": "/labs/lab4/#question-1-using-apt"
  },"98": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Question 2 - Shell Scripting  - Part 1",
    "content": "Creating a shell script . A shell script is just a plaintext file that contains commands that the shell will execute line by line. Therefore, to create a shell script, all you need is a text editor. In your virtual machine, you have 3 text editors installed: . | Gnome Text | Geany | Vs Code | . Since we will be creating simple shell scripts, you can use Gnome Text or Geany. Please try not to use VS Code for scripting. If you prefer a simpler/cleaner interface, use Gnome Text. If you want a light yet powerful editor, use Geany. I will be using Gnome Text for the most part. | Open Gnome Text (text editor) | Save the file as: lab4-script1.sh in the scripts/ directory/folder located in your home directory/folder. If you do not have the directory, make it. | The first line of your script is the shebang or shell declaration: !#/bin/bash you may also find it written like this: #!/usr/bin/env bash. For the sake of this exercise, we will stick to #!/bin/bash. | Save your file. | Currently, you have a script that does nothing. Let’s execute: . | Open your Terminal Application | Navigate to the directory that contains your script. In our case, it is scripts/. Use the command: cd scripts/ | Run the script using this command: bash lab4-script1.sh | Notice that nothing was displayed on the screen because our script does nothing. | . | Take a screenshot of your text editor. Name your screenshot q2.1.png and place it in your lab4/ directory/folder | . If you need to know: . | #!/bin/bash: Executes the script using the Bash binary located specifically at /bin/bash. This assumes that bash is installed in the system but can fail in systems that install bash in a different path. | #!/usr/bin/env bash: Uses the env command to locate Bash in the user’s PATH. This makes the script portable and will make sure that bash runs the script regardless of where it is installed (as long as it is in the PATH) | . Printing text to the screen . Simplest thing to do in a shell script is to print text to the screen. This is achieved with the command echo. The command printf can also be used but that command is outside of the scope of the course. | Create a new script called: lab4-script2.sh | Use the echo command to print the sentence: \"Hello World\" (without the quotes) | Save and run the script the same way you did before. Keep in mind that the name is different and that if you are already in the scripts/ folder/directory you do not need to use the cd command. | Alternatively, we can run the script using the following command: . | bash ~/scripts/lab4-script2.sh | There are other ways to run the script but for now, let’s keep it simple. | . | The output of the script should be “Hello World”. If you do not see anything, it is likely that you did not save the file. | Use the echo command again to add the following: . | A line of text with a horizontal tab | 2 lines of text in a single echo command | . | Save and run the script | Take a screenshot of your text editor. Name your screenshot q2.2png and place it in your lab4/ directory/folder | . Running other commands in a script . Of course, printing text is not the only thing we can do. In reality, bash is a complete programming language that you can use to do anything (some things you should not do in Bash). So now lets add a couple of more commands to our script. | Create a new shell script and save it in the scripts/ directory. Call the script lab4-script3.sh | Use the echo and date command to print the following lines: . | today's date is: and in a new line Wed Oct 8 08:24:37 PM EDT 2025 | . | Use the echo and whoami command to print the following lines: . | the current user is: and in the same line: username of current user | . | Use the echo and free command to show how much used and free memory the system has: . | Memory usage: and the output of free -h | . | Take a screenshot of your text editor and your terminal. Name your screenshots q2.3png and q2.4png. Place them in your lab4/ directory/folder | . ",
    "url": "/labs/lab4/#question-2---shell-scripting----part-1",
    
    "relUrl": "/labs/lab4/#question-2---shell-scripting----part-1"
  },"99": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Challenge question",
    "content": "Write a shell script that displays the following output: . | Take a screenshot of your text editor and your terminal after you run the script. Name your screenshots q3.1png and q3.2png. Place them in your lab4/ directory/folder | . Tips: . | You will need to read the man page of the echo, uname, and date commands | The date format in the screenshot is RFC 5322 | Save the script in the lab4 directory/folder | Name the script challenge_lab4.sh | The command to run the script is bash ~/cis106/labs/lab4/challenge_lab4.sh if this does not work, it is because you saved the script in the wrong folder. Retrace your steps to troubleshoot. | You must complete this question alone. I cannot provide assistance here. Everything you need to complete this challenge has been covered in this lab/presentations/practice. | See the What is a Shell? and Shell Scripting Chapter 1 presentations. | . ",
    "url": "/labs/lab4/#challenge-question",
    
    "relUrl": "/labs/lab4/#challenge-question"
  },"100": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "What will you submit:",
    "content": ". | Place and properly label (using headings) all the screenshots | Convert the file to pdf | Push everything to github | In Blackboard, submit the pdf file lab4.pdf | . Note: I will read your script from github. If the script is not there, you will not receive credit. ",
    "url": "/labs/lab4/#what-will-you-submit",
    
    "relUrl": "/labs/lab4/#what-will-you-submit"
  },"101": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "How I will grade you:",
    "content": ". | I will navigate to your GitHub repository and read your script. I will download your script and run it on my machine. If your script runs and I get the same output as the screenshot, you will get full credit for the challenge question. | Question 1: 25 pts | Question 2: 25 pts | Question 3: 50 pts | . ",
    "url": "/labs/lab4/#how-i-will-grade-you",
    
    "relUrl": "/labs/lab4/#how-i-will-grade-you"
  },"102": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Special Note 1 - Practice creating a basic script",
    "content": "The challenge question in this lab is similar to the type of questions you will see in your final exam. There you will create a script and just being able to create and run the script gives you points. Make sure you understand the concepts here. Practice! Practice! Practice! . ",
    "url": "/labs/lab4/#special-note-1---practice-creating-a-basic-script",
    
    "relUrl": "/labs/lab4/#special-note-1---practice-creating-a-basic-script"
  },"103": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Special Note 2 - Git Command Quick Reference",
    "content": "You’ll be using Git frequently this semester. Here’s a quick reminder of the most common commands: . | Command | Purpose | . | git clone repository/url/here | Download a GitHub repository to your computer. | . | git pull | Synchronize your local repository with the latest changes from GitHub. Always run this before starting work in VS Code. | . | git add . | Track all changes made to your files. | . | git commit -m \"description here\" | Save a snapshot of your tracked changes with a short description. | . | git push | Send your committed changes to GitHub. | . Command Order: . git pull git add . git commit -m \"message\" git push . ⚠️ Warning: ⚠️ Avoid making changes directly in the GitHub website unless you: . | Know exactly what you are doing, and | Remember to run git pull before working locally. | . ",
    "url": "/labs/lab4/#special-note-2---git-command-quick-reference",
    
    "relUrl": "/labs/lab4/#special-note-2---git-command-quick-reference"
  },"104": {
    "doc": "Lab 4 - Software Installation and Shell Scripting",
    "title": "Special Note Regarding the Final Exam",
    "content": ". | The final exam will be in person. | It is performance-based and requires access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school: . | A Linux workstation will be available on campus. | Request it early—available computers are limited. | . | . ",
    "url": "/labs/lab4/#special-note-regarding-the-final-exam",
    
    "relUrl": "/labs/lab4/#special-note-regarding-the-final-exam"
  },"105": {
    "doc": "Markdown Cheat Sheet",
    "title": "Markdown Cheat Sheet",
    "content": "File here: https://devhints.io/markdown . ",
    "url": "/docs/MarkdownCheatSheet/",
    
    "relUrl": "/docs/MarkdownCheatSheet/"
  },"106": {
    "doc": "Frequently Asked Questions",
    "title": "Frequently Asked Questions",
    "content": " ",
    "url": "/docs/faq/",
    
    "relUrl": "/docs/faq/"
  },"107": {
    "doc": "Frequently Asked Questions",
    "title": "If this class is about Linux, why are we learning about Git, VS Code, and VirtualBox?",
    "content": ". | To learn an operating system, you need to use it. To use an operating system, you need a computer to install and run it. VirtualBox allows you to create a virtual machine where you can install an operating system, so learning about virtualization is essential. To receive grades for completing assignments, you need a way to create, save, and submit documents. VS Code is our text/code editor of choice because it manages Markdown easily and offers a lot of versatility through extensions. Markdown is a plaintext formatting language, which is simple to learn and runs well in a virtual machine. Git is version control software that tracks changes in files and directories, while GitHub is a cloud hosting solution for Git. Together, they serve as a backup for your files. If your virtual machine breaks, all your work can be retrieved from GitHub. VS Code, VirtualBox, and Git are essential tools that every Linux user should have experience with. | . ",
    "url": "/docs/faq/#if-this-class-is-about-linux-why-are-we-learning-about-git-vs-code-and-virtualbox",
    
    "relUrl": "/docs/faq/#if-this-class-is-about-linux-why-are-we-learning-about-git-vs-code-and-virtualbox"
  },"108": {
    "doc": "Frequently Asked Questions",
    "title": "Why is this class only 1 credit?",
    "content": ". | Due to the limitations of associate degree programs. | . ",
    "url": "/docs/faq/#why-is-this-class-only-1-credit",
    
    "relUrl": "/docs/faq/#why-is-this-class-only-1-credit"
  },"109": {
    "doc": "Frequently Asked Questions",
    "title": "Why is this class so much work?",
    "content": ". | It is not. For every lecture, you will be assigned the equivalent of 2 hours of work. This is the required amount of time that a 1-credit class is designed to be studied each week. This course ensures that you study for 2 hours every week per lecture. The 2 hours of work are designed with the following assumptions: . | You understand basic computer terminology. | You are efficient at using your computer. | You can follow instructions. | Your computer is functioning optimally for the class. | . | . ",
    "url": "/docs/faq/#why-is-this-class-so-much-work",
    
    "relUrl": "/docs/faq/#why-is-this-class-so-much-work"
  },"110": {
    "doc": "Frequently Asked Questions",
    "title": "Why is the final in person?",
    "content": ". | This guarantees fairness to everyone. It is impossible to prevent cheating if a performance-based exam is given over Zoom to some students and in person to others. Conducting the exam in person also ensures that AI is not used to answer the questions. If you have any issues, DM your professor in Slack or email them as soon as possible. To ensure that everyone has enough time to prepare, all details are provided on the first day of class and repeated throughout the semester. | . ",
    "url": "/docs/faq/#why-is-the-final-in-person",
    
    "relUrl": "/docs/faq/#why-is-the-final-in-person"
  },"111": {
    "doc": "Frequently Asked Questions",
    "title": "What is the format of the final exam?",
    "content": ". | The final exam is performance-based. You will be given 4 problems to solve using your Linux machine. Just like in the labs, you will take screenshots of your terminal to show the solutions. One of the questions will involve writing a script. You can find examples here. All the commands and topics to study are available here. | . ",
    "url": "/docs/faq/#what-is-the-format-of-the-final-exam",
    
    "relUrl": "/docs/faq/#what-is-the-format-of-the-final-exam"
  },"112": {
    "doc": "Frequently Asked Questions",
    "title": "What happens if I do not have a computer to bring to school?",
    "content": ". | I have 4 computers with Linux already installed. You can use them during class and for the exam. If needed, a dedicated user account can be created for you. All you need to do is reserve one as soon as possible, and the PC will be yours for the semester. These PCs cannot be taken out of the school, but I will bring them every Wednesday and Thursday. | . ",
    "url": "/docs/faq/#what-happens-if-i-do-not-have-a-computer-to-bring-to-school",
    
    "relUrl": "/docs/faq/#what-happens-if-i-do-not-have-a-computer-to-bring-to-school"
  },"113": {
    "doc": "Frequently Asked Questions",
    "title": "Are there any PCs you recommend I buy?",
    "content": ". | If you want to have your own PC for Linux and don’t mind spending some money, I recommend buying a MiniPC. They are inexpensive, and Linux runs well on them. Here are the ones I have tested and use for the class: . | ACEMAGICIAN Win11 Mini PC, 12th Alder Lake N100 – Price: around $150. | Beelink Mini PC, SER5 Pro 5850U AMD Ryzen 7 – Price: around $280. | HP Prodesk 600 G3 Micro Computer Mini PC (Intel Quad Core i5-7500T 2.7GHz) – Price: about $110. | Dell OptiPlex 3050 Micro Business Desktop (Intel Core i5-6500T) – Price: about $100. | . | Note: . | Regardless of which computer you get, keep the following in mind: . | Memory: DDR4 with a minimum of 8GB, upgradeable. | CPU: Quad-core or higher. The newer, the better. | Storage: M.2 or SSD. If it comes with an HDD, replace it with an SSD as soon as possible. | Research to ensure compatibility with Linux. Most desktop PCs, especially older ones, are likely to be compatible. | . | . | . ",
    "url": "/docs/faq/#are-there-any-pcs-you-recommend-i-buy",
    
    "relUrl": "/docs/faq/#are-there-any-pcs-you-recommend-i-buy"
  },"114": {
    "doc": "Frequently Asked Questions",
    "title": "How do I take a snapshot of my virtual machine?",
    "content": ". | If you are using UTM on macOS, unfortunately, this option is not available as UTM does not have snapshot capability. For VirtualBox: | . You can learn more about snapshots here. ",
    "url": "/docs/faq/#how-do-i-take-a-snapshot-of-my-virtual-machine",
    
    "relUrl": "/docs/faq/#how-do-i-take-a-snapshot-of-my-virtual-machine"
  },"115": {
    "doc": "Frequently Asked Questions",
    "title": "How do I clone a GitHub repository?",
    "content": ". | In the terminal, run: git clone url-of-repository-here | . ",
    "url": "/docs/faq/#how-do-i-clone-a-github-repository",
    
    "relUrl": "/docs/faq/#how-do-i-clone-a-github-repository"
  },"116": {
    "doc": "Frequently Asked Questions",
    "title": "My computer died. How do I recover my virtual machine?",
    "content": ". | You will need to create a new virtual machine unless you had a backup of your virtual machine (export). However, once you clone your GitHub repository, all your work that you pushed to GitHub will be restored in your new virtual machine. | . ",
    "url": "/docs/faq/#my-computer-died-how-do-i-recover-my-virtual-machine",
    
    "relUrl": "/docs/faq/#my-computer-died-how-do-i-recover-my-virtual-machine"
  },"117": {
    "doc": "Frequently Asked Questions",
    "title": "I need help. Where do I get tutoring for this class?",
    "content": ". | Tutoring for all CIS courses is offered in room H311 in the Hamilton building. However, I cannot guarantee that there will always be a tutor for you. Therefore, I offer my time. If you are struggling with the course material, you can schedule time with me over Zoom or in person. You can also request extra lectures and materials, and I can create a video for you. All you need to do is ask. Remember, you paid for this class! | . ",
    "url": "/docs/faq/#i-need-help-where-do-i-get-tutoring-for-this-class",
    
    "relUrl": "/docs/faq/#i-need-help-where-do-i-get-tutoring-for-this-class"
  },"118": {
    "doc": "Frequently Asked Questions",
    "title": "Do you recommend that I install Linux on my main PC/laptop?",
    "content": ". | No. This is likely not the only class you are taking. Not all necessary applications for other classes will be available for Linux. However, if you have a spare PC, I recommend installing Linux on it, provided it is a PC you are comfortable experimenting with. | . ",
    "url": "/docs/faq/#do-you-recommend-that-i-install-linux-on-my-main-pclaptop",
    
    "relUrl": "/docs/faq/#do-you-recommend-that-i-install-linux-on-my-main-pclaptop"
  },"119": {
    "doc": "Frequently Asked Questions",
    "title": "Do you recommend dual-booting?",
    "content": ". | No, unless you know what you are doing. Windows is notorious for breaking GRUB (the boot manager). However, if you are confident in your technical skills, you can handle any issues that arise from dual-booting. I never dual-boot on the same drive. If your laptop/PC has more than one drive, you can install Windows on one drive and Linux on another. | . ",
    "url": "/docs/faq/#do-you-recommend-dual-booting",
    
    "relUrl": "/docs/faq/#do-you-recommend-dual-booting"
  },"120": {
    "doc": "Setting up a web server in Debian",
    "title": "Setting up a web server in Debian",
    "content": ". | Setting up a web server in Debian . | READ ME | Video | Requirements . | Host Machine System Requirements | Guest Machine System Requirements | . | Step 1: Create a virtual machine . | Files to download: | . | Step 2: Install Debian | Step 3: Update | Step 4: Configure the server . | 1. Configure the firewall | 2. Check Running services | 3. Check if the web server is working | . | Step 5: Remote Access to the server . | Understanding the virtual machine networking | How to tell if you can use Bridge Network Adapter . | More on this IPV4 stuff! | . | How to use NAT with Port Forwarding . | What is port forwarding? | How to enable port forwarding | . | . | Step 6: Managing our Server Virtual Machine from the Host . | How do I use SSH | How do I connect to my virtual machine from my host machine | . | Step 7: Adding content to our web server . | Uploading files using SCP - Alternative 1: Using the command line | Uploading files using Filezilla - Alternative 2: Using a graphical application | How do I add files? | . | Step 8: Using Git in our server . | Here is an example of this workflow | . | . | . ",
    "url": "/guides/ApacheWebserver/",
    
    "relUrl": "/guides/ApacheWebserver/"
  },"121": {
    "doc": "Setting up a web server in Debian",
    "title": "READ ME",
    "content": "This guide assumes the following: . | You have installed Virtualbox | You know how to create a Debian virtual machine | . ",
    "url": "/guides/ApacheWebserver/#read-me",
    
    "relUrl": "/guides/ApacheWebserver/#read-me"
  },"122": {
    "doc": "Setting up a web server in Debian",
    "title": "Video",
    "content": ". ",
    "url": "/guides/ApacheWebserver/#video",
    
    "relUrl": "/guides/ApacheWebserver/#video"
  },"123": {
    "doc": "Setting up a web server in Debian",
    "title": "Requirements",
    "content": ". | Hypervisor: VirtualBox | Host OS: Windows 11/10 or MacOS (Intel/Apple Silicon) | Guest OS: Debian 13 (NO GUI) | Server Application: Apache | SSH:For remote management of the server virtual machine | Git/GitHub: To Upload files to the web server | . Host Machine System Requirements . | CPU: Quad core CPU or higher | RAM: 8GB or More | Free Storage: 60GB or more | . Guest Machine System Requirements . | CPU: 1 Core | RAM: 1 GB | Storage: 10 GB | . ",
    "url": "/guides/ApacheWebserver/#requirements",
    
    "relUrl": "/guides/ApacheWebserver/#requirements"
  },"124": {
    "doc": "Setting up a web server in Debian",
    "title": "Step 1: Create a virtual machine",
    "content": "Files to download: . | Download the Debian ISO. Which Debian ISO Should You Download? | . | Your Computer Type | CPU Type | ISO File to Download | Download Link | . | Windows 11/10 | Intel or AMD (x86_64) | debian-13.0.0-amd64-netinst.iso | Download -&gt; Click the black Download button | . | macOS (Intel) | Intel (x86_64) | debian-13.0.0-amd64-netinst.iso | Download -&gt; Click the black Download button | . | macOS (Apple Silicon) | ARM (arm64) | debian-13.0.0-arm64-netinst.iso | Direct Link | . | Create a virtual machine where Debian will be installed that meets the following specifications: . | RAM: 1GB | CPU: 1 | Storage: 20GB | . | Follow the steps in this presentation as a general guide and adjust the settings accordingly. | . ",
    "url": "/guides/ApacheWebserver/#step-1-create-a-virtual-machine",
    
    "relUrl": "/guides/ApacheWebserver/#step-1-create-a-virtual-machine"
  },"125": {
    "doc": "Setting up a web server in Debian",
    "title": "Step 2: Install Debian",
    "content": ". | Turn on the virtual machine and install Debian. | Follow the steps in this presentation as a general guide. Please do not install a desktop environment as we wont need one. When you get to this step, pick: Web Server, SSH Server, and Standard System Utilities | . | . ",
    "url": "/guides/ApacheWebserver/#step-2-install-debian",
    
    "relUrl": "/guides/ApacheWebserver/#step-2-install-debian"
  },"126": {
    "doc": "Setting up a web server in Debian",
    "title": "Step 3: Update",
    "content": ". | Once the Debian is installed, the virtual machine will reboot. This virutal machine does not have a desktop environment so we will be presented with a TTY to sign to. Enter your username and password. | Update Debian using the following command: | . sudo apt update &amp;&amp; sudo apt upgrade -y . ",
    "url": "/guides/ApacheWebserver/#step-3-update",
    
    "relUrl": "/guides/ApacheWebserver/#step-3-update"
  },"127": {
    "doc": "Setting up a web server in Debian",
    "title": "Step 4: Configure the server",
    "content": "1. Configure the firewall . First, let’s install, enable, and configure the firewall. | Install: sudo apt install ufw | Enable: sudo ufw enable | Configure: . | sudo ufw allow 'WWW Full' | sudo ufw allow 'OpenSSH' | . | . You can learn more about ufw here . 2. Check Running services . | Check that Apache is enabled and running. Use the following command: . | systemctl status apache2 | . | Check that SSH is enabled and running. Use the following command: . | systemctl status ssh | . | Check that UFW is enabled and running. Use the following command: . | systemctl status ufw | . | If any of these services are not running, enable them and restart them. You can lear more abo0ut the systemctl command here. | . 3. Check if the web server is working . At this point you should be able to see the default apache index.html site. The easiest way to see if the web server is hosting something is by using curl or wget. Since wget is installed by default, use the following command to download the index.html document that is currently being hosted by the server: . wget localhost # You can also use this alternative command: wget 127.0.0.1 . Take a look at the index.html file. It should be Apache’s Home page. ls -l index.html less index.html # press q to exit . ",
    "url": "/guides/ApacheWebserver/#step-4-configure-the-server",
    
    "relUrl": "/guides/ApacheWebserver/#step-4-configure-the-server"
  },"128": {
    "doc": "Setting up a web server in Debian",
    "title": "Step 5: Remote Access to the server",
    "content": "Understanding the virtual machine networking . Depending on the network configuration of your virtual machine you may not be able to reach your web server from outside of your virtual machine. Take a moment to look at the network settings of your virtual machine: . The “Attached to” configuration has the following options (See the Introduction to Networking Modes in VBOX documentation) . | Not attached: In this mode, Oracle VirtualBox reports to the guest that a network card is present, but that there is no connection. | Network Address Translation (NAT): In this mode, your virtual machine connects to the internet via your host machine. The virtual machine is isolated. This isolation makes your virtual machine not reachable from other computers in your network. | NAT Network: This mode allows you to use NAT between your VMs, as well as with external connections. You first have to create the NAT Network service that you want to use, and then select NAT Network as the network mode. | Bridged networking: This is for more advanced networking needs, such as network simulations and running servers in a guest. When enabled, Oracle VirtualBox connects to one of your installed network cards and exchanges network packets directly, circumventing your host operating system’s network stack. This is the easiest way to setup a server in a virtual machine! | Internal networking: This can be used to create a different kind of software-based network which is visible to selected virtual machines, but not to applications running on the host or to the outside world. | Host-only networking: This can be used to create a network containing the host and a set of virtual machines, without the need for the host’s physical network interface. Instead, a virtual network interface, similar to a loopback interface, is created on the host, providing connectivity among virtual machines and the host. | Cloud networking: This can be used to connect a local VM to a subnet on a remote cloud service. | Generic networking: Rarely used modes that share the same generic network interface, by allowing the user to select a driver which can be included with Oracle VirtualBox or be distributed in an extension pack. | . This information was extracted from Virtualbox Documentation. For this project, we will use either NAT with Port Forwarding or Bridge Adapter. The easiest of the two options is Bridge Adapter because all we need to do is change the Attached to Setting to “Bridge”. This will allow our VM to get an IP address from your Home Router and it will be just another computer in your network. However, for some people, this is not possible because their network interface card does not allow them to use Bridge mode. Some routers also may reject a Bridged Network adapter. For example, in the College Network, we cannot use Bridge Network Adapter because the router rejects the connection. So the first thing we need to do is figure out if we can use Bridge Network Adapter. How to tell if you can use Bridge Network Adapter . | Turn off your virtual machine and then change the network adapter settings to “Bridge Adapter” | Start your virtual machine and sign in | Type the command: hostname -I to see if your virtual machine gets an IP address. If it gets an IP Address, write it down. | Find out the IP address of your host machine (Windows/MacOS) . | For Windows | For MacOS | . | Compare the IP address of your server virtual machine and the host OS. Notice that they are similar. Either the first 2 or first 3 octets need to be the same (depending on your networks subnet mask). For example: . | Host OS: 192.168.1.09 | VM OS: 192.168.1.11 | . | This is because of how IP Version 4 works. In IPV4 we have the concept of Subnet mask. The subnet mask tells which part of that address is the network and which part is the host. | If your virtual machine got an IP address, and said IP looks like your host IP, then you can use Bridge Network adapter. | If your virtual machine did not get an IP address, then you cannot use “Bridge Network Adapter”. Please use NAT with Port Forwarding. | . More on this IPV4 stuff! . | An IPv4 address is 32 bits, usually written like 192.168.1.10. | A subnet mask is also 32 bits, like 255.255.255.0. How they relate: . | Line up the address and the mask in binary. | Wherever the mask has 1s, that part of the IPv4 address is the network ID. | Wherever the mask has 0s, that part of the IPv4 address is the host ID (the device inside that network). | . | . | What it means | Human readable | Binary | . | IP Address: | 192.168.1.10 | 11000000.10101000.00000001.00001010 | . | Network Mask: | 255.255.255.0 | 11111111.11111111.11111111.00000000 | . | Network ID: | 192.168.1.0 | 11000000.10101000.00000001.00000000 | . | Host ID: |   | ————————–.00001010 | . So how do we read the IP Address 192.168.1.10/24? Simple! The device 10 on the 192.168.1 network . | Network part = 192.168.1 | Host part = 10 | . This specific network mask configuration allows for up to up to 254 devices. But what does that /24 mean? Well, since IPV4 uses 32 bit addresses, it means that each octet has 8 bits (8x4=32). So the network mask as 3 populated octets (3x8=24). We call this a CIDR notation (Classless Inter-Domain Routing). In plain english it means: “the first 24 bits of the IPv4 address are the network part”. How to use NAT with Port Forwarding . What is port forwarding? . A port is like a numbered door on an IP address. It lets a computer run many different network services on the same IP without mixing them up. For example, HTTP(S) runs on ports 80 and 443 respectively. SSH runs on port 22 and FTP on port 21. When you connect to an IP, you’re really connecting to an IP + port pair (called a socket). The computer receiving the request knows which port to use for each request. The issue is that in our case we are using a virtual machine with a NAT network. Therefore in order to penetrate this NAT network, we need to tell Virtualbox that every request that arrives to a custom port be routed to the virtual machine. That is what port forwarding does. Port forwarding is when traffic that arrives at a certain port on one machine is forwarded to another machine and port. In our virtual machine setup, the virtual machine has an internal only IP Address (NAT). This VM cannot accept external requests. With port forwarding, you are configuring the host so that if any traffic on a given custom port arrives, we will send it over to the virtual machine port. So in a nutshell, it creates a tunnel where communication can come in and go out! . How to enable port forwarding . | Open the virtual machine network settings and make sure the adapter is set to NAT | Click on Port Forwarding and add the rules as they are shown in the image below: | . | Since we are setting a web server, we need to forward port 80 as http runs on port 80 | We will be using SSH to administer the server therefore we need to forward port 22 | . ",
    "url": "/guides/ApacheWebserver/#step-5-remote-access-to-the-server",
    
    "relUrl": "/guides/ApacheWebserver/#step-5-remote-access-to-the-server"
  },"129": {
    "doc": "Setting up a web server in Debian",
    "title": "Step 6: Managing our Server Virtual Machine from the Host",
    "content": "Currently, every time we need to do anything on the server VM, we need to turn on the virtual machine and sign in directly in the virtual machine TTY. If you have physical access to the server, this is fine. However, that is not how things work in the real world. Most of the time, you are configuring servers that are not on premise. Either they are hosted on the Cloud, VPS (virtual private server), or they are virtual machines running on a virtualization server. There is also the concept of containers which work similarly like virtual machines. This is where SSH comes into play. SSH (Secure Shell) is a protocol that lets you securely connect to another computer over a network. SSH uses encryption to protect login credentials and data in transfer. It uses port 22 by default. SSH is also used for transferring files securely. As an IT, computer science, and web development student, it is canonical that you learn the fundamentals of SSH. How do I use SSH . This is the general formula for using ssh with and without port forwarding: . | In the formula, the specified port is 2222 because that is the custom port we are forwarding from our host machine (127.0.0.1) to the server virtual machine. | If we were to connect from another computer that is not our host machine then we would need to replace the local host IP address with the actual IP address of the machine. | . How do I connect to my virtual machine from my host machine . | Windows, MacOS, and most Linux distributions have ssh already installed. All you need to do is open your terminal application: . | On Windows is PowerShell | On MacOs is Terminal | On Linux, well, whatever is your preferred terminal application | . | Then type the SSH command that fits your network configuration. For example: . | If I am using Bridge Network Adapter, and my virtual machine’s IP Address is 192.168.1.157 then my command would be: . | ssh rap@192.168.1.157 | . | If I am using NAT with Port forwarding, then my the command I would use is: . | ssh -p 2222 rap@127.0.0.1 | . | . | . Here is an example using Bridge Network Adapter . Here is an example using NAT with Port Forwarding . ",
    "url": "/guides/ApacheWebserver/#step-6-managing-our-server-virtual-machine-from-the-host",
    
    "relUrl": "/guides/ApacheWebserver/#step-6-managing-our-server-virtual-machine-from-the-host"
  },"130": {
    "doc": "Setting up a web server in Debian",
    "title": "Step 7: Adding content to our web server",
    "content": "Our server stores all the files in /var/www/html/ by default. That is the directory where we will place all of our pages. By default, this directory is owned by root and regular users cannot place data there. So we will change the permissions of the /var/www/html directory so that we can create and modify files there. | Use the chown command to change the ownership of the directory: sudo chown -R $USER:www-data /var/www/html | Use the chmod command to change the permissions of the folder: sudo chmod -R 775 /var/www/html | . Now, we can create html documents in our host machine and upload them to the server using SSH. This is something we will work on later. For now, lets test our web server with an already built website. | In your host machine, go to this page: html5up.net and download one of the templates. I will choose this one. | There are many ways to upload files to the server. In this guide, we will 2 ways: | . Uploading files using SCP - Alternative 1: Using the command line . | The command for uploading files via SCP when using port forwarding is: scp -P port file-to-upload remote-username@127.0.0.1:/path/to/place/file | So in my case the command would be: scp -P 2222 ~/Downloads/html5up-paradigm-shift.zip rap@127.0.0.1:/var/www/html | The command for uploading files via SCP when using Bridge Network Adapter is: scp file-to-upload remote-username@remote-server-ip-address:/path/to/place/ | So in my case the command would be: scp ~/Downloads/html5up-paradigm-shift.zip rap@192.168.1.157:/var/www/html | . Here is the port forwarding example expanded: . Uploading files using Filezilla - Alternative 2: Using a graphical application . | Install the FileZilla application in your host machine. You can download it from here: filezilla-project.org. You need the FileZilla Client, not the server! If you are using Linux as your host OS, install Filezilla from your repository. | After you install fileZilla, open it. | Click on File -&gt; Site Manager -&gt; New Site | Change the following settings: . | Protocol: SFTP - SSH File Transfer Protocol | Host: . | If you are using Bridge Network Adapter: Use the IP address of your virtual machine. In my case it is 192.168.1.157 | If you are using NAT Port Forwarding use: 127.0.0.1 | . | Port: . | If you are using Bridge Network Adapter use: 22 | If you are using NAT Port Forwarding use: 2222 | . | Login Type: Normal | User: your user name in the server. In my case, it is rap | Password: your password to sign in to the server | . | Click on OK | Click on the drop down and select your new connection | You will be presented with an unknown host key message. Click ok | Now you have successfully connected to your server | . How do I add files? . | The left panel represents your host machine. Navigate to the location you have the zip file | The right panel represents your server. Navigate to /var/www/html/ | Drag and drop the zip file from the left to the right | . ",
    "url": "/guides/ApacheWebserver/#step-7-adding-content-to-our-web-server",
    
    "relUrl": "/guides/ApacheWebserver/#step-7-adding-content-to-our-web-server"
  },"131": {
    "doc": "Setting up a web server in Debian",
    "title": "Step 8: Using Git in our server",
    "content": "At this point, we already know how to upload files to our server. However, it would be much more efficient if we could just store everything in a Github repository and then clone the repository in our server. That will allow us to work on our website and when we are ready to publish the changes, we just pull the latest updates from the server. Here is an example of this workflow . | Sign in to GitHub and create a repository called portfolio | Clone the repository in your host machine or the computer that you use to write code . | For students taking CIS106, this would be your Desktop Virtual Machine | To clone the repository use the command: git clone https://github.com/github-username/portfolio | . | Open the local repository (portfolio folder) in VS Code | Create a markdown file called index.md | Write your resume in markdown and when you are done convert the file to html. | Note For CIS106 Students: . | Your index.md file should include a general idea of how you expect your resume to look like when you graduate. | Please include a section for Projects and in there link to your github repository | You have full creative freedom in this part. I suggest not to put real contact information like phone numbers or email addresses. | . | . | Push your changes to your GitHub repository | Ssh into your server and clone your repository in the directory: /var/www/html | Now, from your host computer you can see your webpage using the following URL. | Port Forwarding: http://127.0.0.1:8080/portfolio/ | Bridge Network: http://192.168.1.157/portfolio/ | . | In the future, for any changes you make, simply follow these general steps. | Push the changes to GitHub | SSH into the server | cd into the local repository: cd /var/www/html/portfolio | Pull the latest changes: git pull | . | . ",
    "url": "/guides/ApacheWebserver/#step-8-using-git-in-our-server",
    
    "relUrl": "/guides/ApacheWebserver/#step-8-using-git-in-our-server"
  },"132": {
    "doc": "Setup SSH Guide",
    "title": "Setup SSH Guide",
    "content": " ",
    "url": "/guides/SetupSSHUbuntuServer/",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/"
  },"133": {
    "doc": "Setup SSH Guide",
    "title": "Installation",
    "content": ". | Make sure that your server and your client computer are in the same network. The easiest way to do this is to make sure that the network addapter in the viertual machine is set to bridge instead of nat. To do this go, open the virtual machine settings and in the network section change the adapter to Bridge. | . | However, your network may prevent you from doing this. Some IDS and smart routers may prevent you from getting an IP. In this case, you need to use port forwarding in your virtual machine. Here is a guide on how to do it. Portforwarding Example . | Make sure that the ssh server program is installed in the server virtual machine sudo apt install openssh-server -y . | Make sure that the ssh client program is installed in the client machine. This is the computer that you will be using to manage your server. sudo apt install openssh-server -y . | Enable and start ssh in the server: sudo systemctl enable ssh; sudo systemctl start ssh . | Test the connection by loging in to the server from the client. First, use the ip or hostname command to find out the ip address of the server. | On the server type, hostname -I this will give you the ip address of your server. | On the client type: ssh username@server-ip-address . | If you are using port forwarding, your command will be: | . ssh -p 2222 username@127.0.0.1 . | Read and answer the questions and you will connect sucessfully. | . ",
    "url": "/guides/SetupSSHUbuntuServer/#installation",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/#installation"
  },"134": {
    "doc": "Setup SSH Guide",
    "title": "Setup private and public key authentication with or without password:",
    "content": ". | On the server, configure the firewall to accept ssh connections. sudo ufw allow ssh sudo ufw enable sudo ufw status . | Now we need to generate an ssh key in our client computer. If you are using your ubuntu machine from the course, then you already have one. If you are not, then you must create the ssh keys: | In your client machine type: ssh-keygen . | Now you can type this command to copy your ssh key to the server ssh-copy-id -i .ssh/id_rsa.pub webmaster@server-ip-address . | if you are using port forwarding, use this command instead: ssh-copy-id -i .ssh/id_rsa.pub -p 2222 webmaster@127.0.0.1 . | . if you use port forwarding your command will be: . ssh-copy-id -p 2222 username@127.0.0.1 . | Now you can connect to your server without having to remember the password. | . ",
    "url": "/guides/SetupSSHUbuntuServer/#setup-private-and-public-key-authentication-with-or-without-password",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/#setup-private-and-public-key-authentication-with-or-without-password"
  },"135": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "How to Setup Git and Github in Ubuntu 20.04",
    "content": " ",
    "url": "/guides/Ubuntu%20Github%20Setup/",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/"
  },"136": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Assumptions:",
    "content": "I assume the following: . | You have a computer running Ubuntu and VS Code is installed in it. | You have a basic understanding of the Linux Command Line and your Terminal Emulator | You have a Github Account | . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#assumptions",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#assumptions"
  },"137": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Install and setup git",
    "content": "Install command: sudo apt install git -y . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#install-and-setup-git",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#install-and-setup-git"
  },"138": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Setup Git",
    "content": ". | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#setup-git",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#setup-git"
  },"139": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Setup SSH authentication",
    "content": ". | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. See examle here: . | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboad in the step prior. Type yes (the whole word) and press enter and you are done . | Test you ssh connection by using this command: ssh -T git@github.com You will see the following outcome: . | . If you do not see an error message or a different message than the one shown prior, then your SSH connection is correct. Now you can push and clone using SSH. ",
    "url": "/guides/Ubuntu%20Github%20Setup/#setup-ssh-authentication",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#setup-ssh-authentication"
  },"140": {
    "doc": "Customize Gedit",
    "title": "Customize Gedit",
    "content": " ",
    "url": "/guides/custimizeGedit/",
    
    "relUrl": "/guides/custimizeGedit/"
  },"141": {
    "doc": "Customize Gedit",
    "title": "Video:",
    "content": ". | Here | . ",
    "url": "/guides/custimizeGedit/#video",
    
    "relUrl": "/guides/custimizeGedit/#video"
  },"142": {
    "doc": "Customize Gedit",
    "title": "Synopsis",
    "content": "Make Gedit feel and look more like an IDE than a text editor . ",
    "url": "/guides/custimizeGedit/#synopsis",
    
    "relUrl": "/guides/custimizeGedit/#synopsis"
  },"143": {
    "doc": "Customize Gedit",
    "title": "What is Gedit",
    "content": "Gedit is a text editor designed for the GNOME desktop environment. It was GNOME’s default text editor and part of the GNOME Core Applications until GNOME version 42 in March 2022, which changed the default text editor to GNOME Text Editor. ",
    "url": "/guides/custimizeGedit/#what-is-gedit",
    
    "relUrl": "/guides/custimizeGedit/#what-is-gedit"
  },"144": {
    "doc": "Customize Gedit",
    "title": "How to install Gedit",
    "content": "If you are using Gnome, gedit is installed by default. This is the default text editor for Gnome. To install gedit: sudo apt install gedit gedit-plugins -y If you are using gnome, install the plugins package otherwise the plugins won’t be available. Gnome Text Editor and gedit are essentially the same app. ",
    "url": "/guides/custimizeGedit/#how-to-install-gedit",
    
    "relUrl": "/guides/custimizeGedit/#how-to-install-gedit"
  },"145": {
    "doc": "Customize Gedit",
    "title": "Installing and using plugins",
    "content": ". | Open gedit (text editor) and go to preferences &gt; Plugins | Enable the following plugins: . | Bracket Autocompletion: will auto close brackets, parenthesis, and quotes | Code Comment: will allow us to do multi line commenting. (CTRL + M and CTRL + Shift + M) | Embedded terminal: Will give us a quick terminal at the bottom of the gedit window. | File Browser Panel: Will give us a file manager to the left of the window. | Multi Edit: will give us multi line editing. | Open Links: will allow us to open URLs | Quick highlight: Will automatically highlight all instances of the highlighted word | Quick open: with CTRL + Alt + o ,opens a menu to open recently edited files | Session Saver: saves the session so when you close gedit and open it again, it opens on the last session | Text Size: will us to increase or decrease the size of the text using CTRL + and CTRL - | Word completion: Will enable autocomplete of common words in the script | . | . ",
    "url": "/guides/custimizeGedit/#installing-and-using-plugins",
    
    "relUrl": "/guides/custimizeGedit/#installing-and-using-plugins"
  },"146": {
    "doc": "Customize Gedit",
    "title": "Enabling functionality",
    "content": ". | In the view tab of the preferences window enable the following: . | Display line numbers | Display right margin at column 80 | Display overview map | In the editor tab: . | Set the tab width to 4 spaces | Autosave the file every 5 minutes | . | . | . | In the Font and color: . | Download the font Firacode Nerd Font Mono | Install the font . | Extract the archive in a the directory .fonts located in YOUR home directory. If the directory is not there, press CTRL + H to enable hidden files. If the directory is not there still, create it. | Open a terminal and type the command: fc-cache -f -v to refresh the font cache. | Go back to gedit Font &amp; Colors tab inside preferences. | Change the font to FiraMono Nerd Font Mono Regular (if you cant find the font, close gedit and open it again) | . | . | . | Changing the theme . | Optional (change the font size to a size you are more comfortable with) | Optional (change the color scheme to something you prefer or matches our preference). I like the dracula theme which you can download from here | Here are other themes you can download too! | You will need to place these themes in: $HOME/.local/share/gedit/styles/ | Themes are xml files so you need to extract the xz file in that directory. | . | In the view options of the hamburger menu, enable: . | Side Panel | Bottom Panel | . | . ",
    "url": "/guides/custimizeGedit/#enabling-functionality",
    
    "relUrl": "/guides/custimizeGedit/#enabling-functionality"
  },"147": {
    "doc": "Customize Gedit",
    "title": "Testing Gedit",
    "content": "Here is the source code: . Bash . #!/bin/bash main (){ echo \"Hello world\" } main . HTML . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;style&gt; button { background-color: #04AA6D; border: none; color: white; padding: 15px 32px; font-size: 25px; } &lt;/style&gt; &lt;body&gt; &lt;button onclick=\"say();\" id=\"btn\" type=\"button\"&gt;Say hello!&lt;/button&gt; &lt;h1 id=\"msg\"&gt;&lt;/h1&gt; &lt;/body&gt; &lt;script&gt; function say(){ document.getElementById(\"msg\").innerHTML = \"Hello world!\"; } &lt;/script&gt; &lt;/html&gt; . Python . #!/usr/bin/python3 def hello(): print(\"hello World\") hello() . C++ . #include &lt;iostream&gt; using std::cout; int main() { cout &lt;&lt; \"Hello World!\\n\"; return 0; } // g++ hello.cpp &amp;&amp; ./a.out to compile and run . Rust . fn main() { println!(\"Hello World!\"); } // Must have rust installed: // curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh // rustc hello.rs &amp;&amp; ./hello to compile and run . ",
    "url": "/guides/custimizeGedit/#testing-gedit",
    
    "relUrl": "/guides/custimizeGedit/#testing-gedit"
  },"148": {
    "doc": "FORMAT control characters",
    "title": "FORMAT control characters supported by the GNU/date command",
    "content": "| %FORMAT String | Description | . | %% | a literal % | . | %a | locale’s abbreviated weekday name (e.g., Sun) | . | %A | locale’s full weekday name (e.g., Sunday) | . | %b | locale’s abbreviated month name (e.g., Jan) | . | %B | locale’s full month name (e.g., January) | . | %c | locale’s date and time (e.g., Thu Mar 3 23:05:25 2005) | . | %C | century; like %Y, except omit last two digits (e.g., 21) | . | %d | day of month (e.g, 01) | . | %D | date; same as %m/%d/%y | . | %e | day of month, space padded; same as %_d | . | %F | full date; same as %Y-%m-%d | . | %g | last two digits of year of ISO week number (see %G) | . | %G | year of ISO week number (see %V); normally useful only with %V | . | %h | same as %b | . | %H | hour (00..23) | . | %I | hour (01..12) | . | %j | day of year (001..366) | . | %k | hour ( 0..23) | . | %l | hour ( 1..12) | . | %m | month (01..12) | . | %M | minute (00..59) | . | %n | a newline | . | %N | nanoseconds (000000000..999999999) | . | %p | locale’s equivalent of either AM or PM; blank if not known | . | %P | like %p, but lower case | . | %r | locale’s 12-hour clock time (e.g., 11:11:04 PM) | . | %R | 24-hour hour and minute; same as %H:%M | . | %s | seconds since 1970-01-01 00:00:00 UTC | . | %S | second (00..60) | . | %t | a tab | . | %T | time; same as %H:%M:%S | . | %u | day of week (1..7); 1 is Monday | . | %U | week number of year, with Sunday as first day of week (00..53) | . | %V | ISO week number, with Monday as first day of week (01..53) | . | %w | day of week (0..6); 0 is Sunday | . | %W | week number of year, with Monday as first day of week (00..53) | . | %x | locale’s date representation (e.g., 12/31/99) | . | %X | locale’s time representation (e.g., 23:13:48) | . | %y | last two digits of year (00..99) | . | %Y | year | . | %z | +hhmm numeric timezone (e.g., -0400) | . | %:z | +hh:mm numeric timezone (e.g., -04:00) | . | %::z | +hh:mm:ss numeric time zone (e.g., -04:00:00) | . | %:::z | numeric time zone with : to necessary precision (e.g., -04, +05:30) | . | %Z | alphabetic time zone abbreviation (e.g., EDT) | . ",
    "url": "/guides/format-control-char-date-command/#format-control-characters-supported-by-the-gnudate-command",
    
    "relUrl": "/guides/format-control-char-date-command/#format-control-characters-supported-by-the-gnudate-command"
  },"149": {
    "doc": "FORMAT control characters",
    "title": "Example:",
    "content": ". | ls -l --time-style=+%Z / | . ",
    "url": "/guides/format-control-char-date-command/#example",
    
    "relUrl": "/guides/format-control-char-date-command/#example"
  },"150": {
    "doc": "FORMAT control characters",
    "title": "FORMAT control characters",
    "content": " ",
    "url": "/guides/format-control-char-date-command/",
    
    "relUrl": "/guides/format-control-char-date-command/"
  },"151": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Install Ubuntu Server 20.04 In VirtualBox",
    "content": " ",
    "url": "/guides/install-ubuntu-server-20.04/#install-ubuntu-server-2004-in-virtualbox",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#install-ubuntu-server-2004-in-virtualbox"
  },"152": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 1",
    "content": ". | Download Ubuntu Server 24.04 iso file. | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-1",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-1"
  },"153": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 2",
    "content": ". | Create a virtual machine that meets Ubuntu Server 24.04 Minimun requirements.. | The minimum system requirements are: . | CPU: 1 core | RAM: 1 gigabyte or more | Disk: a minimum of 30 gigabytes | . | . | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-2",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-2"
  },"154": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 3",
    "content": ". | Turn on Virtual Machine | Start the installer. | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-3",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-3"
  },"155": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "content": " ",
    "url": "/guides/install-ubuntu-server-20.04/",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/"
  },"156": {
    "doc": "Kvm + Virtmanager",
    "title": "Kvm + Virtmanager",
    "content": "Note: This guide was tested on Ubuntu 22.04 and 24.04 Source: How to Install KVM on Ubuntu 20.04 This is a work in progress . ",
    "url": "/guides/install_virtmanager/",
    
    "relUrl": "/guides/install_virtmanager/"
  },"157": {
    "doc": "Kvm + Virtmanager",
    "title": "Step 1",
    "content": ". | Check if virtualization is supported using the commands: egrep -c '(vmx|svm)' /proc/cpuinfoThis command should return any number greater than 0 | Install cpu checker: sudo apt update &amp;&amp; sudo apt install cpu-checker | Check if your system supports KVM sudo kvm-ok This should return the following output: INFO: /dev/kvm exists KVM acceleration can be used . | . ",
    "url": "/guides/install_virtmanager/#step-1",
    
    "relUrl": "/guides/install_virtmanager/#step-1"
  },"158": {
    "doc": "Kvm + Virtmanager",
    "title": "Step 2",
    "content": ". | Install KVM and other dependencies: sudo apt install -y qemu qemu-kvm libvirt-daemon libvirt-clients bridge-utils virt-manager | Enable the virtualization daemon: sudo systemctl status libvirtd | Check if the kvm modules are running: lsmod | grep -i kvm | This should return the following output (similar): kvm_amd 208896 0 kvm 1417216 1 kvm_amd ccp 155648 4 kvm_amd . | Add your user to the necessary groups. This will allow qemu to use iso files: sudo usermod -aG libvirt-qemu $USER and sudo usermod -aG libvirt $USER | You can make virtual machines with virt-manager now. The process is similar to Virtualbox. | If you get an error message in virt-manager that reads: QEMU/KVM - Not Connected, reboot. | . ",
    "url": "/guides/install_virtmanager/#step-2",
    
    "relUrl": "/guides/install_virtmanager/#step-2"
  },"159": {
    "doc": "Kvm + Virtmanager",
    "title": "Pending on this guide:",
    "content": ". | Add steps to create virtual machines graphically and via the command line | Add steps to export virtual machines | Add steps to create snapshopts and install spice tools | . ",
    "url": "/guides/install_virtmanager/#pending-on-this-guide",
    
    "relUrl": "/guides/install_virtmanager/#pending-on-this-guide"
  },"160": {
    "doc": "Install Jekyll",
    "title": "How to install Jekyll in Ubuntu",
    "content": ". | Note: This is a daft. | Main guide | tutorial | . ",
    "url": "/guides/jekyll/#how-to-install-jekyll-in-ubuntu",
    
    "relUrl": "/guides/jekyll/#how-to-install-jekyll-in-ubuntu"
  },"161": {
    "doc": "Install Jekyll",
    "title": "Dependencies:",
    "content": "sudo apt-get install ruby-full build-essential zlib1g-dev . ",
    "url": "/guides/jekyll/#dependencies",
    
    "relUrl": "/guides/jekyll/#dependencies"
  },"162": {
    "doc": "Install Jekyll",
    "title": "Gem Installation directory",
    "content": "echo 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrc echo 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrc source ~/.bashrc . ",
    "url": "/guides/jekyll/#gem-installation-directory",
    
    "relUrl": "/guides/jekyll/#gem-installation-directory"
  },"163": {
    "doc": "Install Jekyll",
    "title": "Install jekyll",
    "content": "gem install jekyll bundler . ",
    "url": "/guides/jekyll/#install-jekyll",
    
    "relUrl": "/guides/jekyll/#install-jekyll"
  },"164": {
    "doc": "Install Jekyll",
    "title": "Create a jekyll site",
    "content": "To generate a new site, use the command: jekyll new name-of-site. This will generate a directoryw with the name of the site in the current directory. ",
    "url": "/guides/jekyll/#create-a-jekyll-site",
    
    "relUrl": "/guides/jekyll/#create-a-jekyll-site"
  },"165": {
    "doc": "Install Jekyll",
    "title": "Install Jekyll",
    "content": " ",
    "url": "/guides/jekyll/",
    
    "relUrl": "/guides/jekyll/"
  },"166": {
    "doc": "Install NodeJS",
    "title": "How to install NodeJS and NPM in Ubuntu",
    "content": ". | Sources: . | Digital Ocean | NVM Cheat Sheet | NPX Cheat Sheet | NPM Cheat sheet | NPM VS NPX | React cheat sheet | JS Cheat Sheet | . | . This was tested on Ubuntu 22.04 and 24.04 . ",
    "url": "/guides/nodejs/#how-to-install-nodejs-and-npm-in-ubuntu",
    
    "relUrl": "/guides/nodejs/#how-to-install-nodejs-and-npm-in-ubuntu"
  },"167": {
    "doc": "Install NodeJS",
    "title": "Installation",
    "content": "The Digital Ocean article discusses multiple ways of getting this done. I prefer using node version manager because it allows me to have more than 1 version. | Run this command: | . curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh . | If it does not return an error repeat the command and pipe it to bash | . curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash &amp;&amp; source $HOME/.bashrc . | Now check which versions of node are avaialable: | . nvm list-remote . | Basic nvm commands: | . ",
    "url": "/guides/nodejs/#installation",
    
    "relUrl": "/guides/nodejs/#installation"
  },"168": {
    "doc": "Install NodeJS",
    "title": "Basic Syntax of Node Version Manager",
    "content": "| Command | Description | . | nvm ls-remote | Lists all available versions of Node | . | nvm ls | Lists all locally installed versions | . | nvm install node | Installs the newest release of Node | . | nvm install &lt;version&gt; | Installs the given release of Node | . | nvm use &lt;version&gt; | Switches and uses the given Node release | . | nvm which &lt;version&gt; | Shows path to the given Node version | . | nvm current | Shows what is the currently used Node version | . | nvm alias default &lt;version&gt; | Sets the default Node version to the given version | . | nvm unalias &lt;alias_name&gt; | Deletes the alias named | . | nvm --help | Shows NVM help documents. | . | nvm exec &lt;version&gt; node app.js | Run Node app.js with the PATH pointing to given node version | . | nvm set-colors cgYmW | Set text colors to cyan, green, bold yellow, magenta, and white | . | nvm run &lt;version&gt; app.js | Run app.js using given Node version | . | nvm install-latest-npm | Update your version of npm if you use Node installed through nvm | . | nvm root &lt;path&gt; | Set the directory where nvm should store different versions of node.js. | . | nvm proxy [url] | Set a proxy to use for downloads. Leave [url] blank to see the current proxy. Set [url] to “none” to remove the proxy. | . | nvm -v | Check if nvm is installed | . | nvm uninstall &lt;version&gt; | Un-Install a specific version | . | nvm ls | Show versions available locally | . | nvm uninstall --lts | Uninstall the latest long term support version | . ",
    "url": "/guides/nodejs/#basic-syntax-of-node-version-manager",
    
    "relUrl": "/guides/nodejs/#basic-syntax-of-node-version-manager"
  },"169": {
    "doc": "Install NodeJS",
    "title": "NPM VS NPX",
    "content": "NPM . | The npm stands for Node Package Manager and it is the default package manager for Node.js. | It is written entirely in JavaScript, developed by Isaac Z. Schlueter. | NPM manages all the packages and modules for node.js and consists of command-line client npm. Cheat cheat . | . | Command | Description | . | npm i | Alias for npm install | . | npm install | Install everything in package.json | . | npm install --production | Install everything in package.json, except devDependecies | . | npm install lodash | Install a package | . | npm install --save-dev lodash | Install as devDependency | . | npm install --save-exact lodash | Install with exact | . | npm list | Lists the installed versions of all dependencies in this software | . | npm list -g --depth 0 | Lists the installed versions of all globally installed packages | . | npm view | Lists the latest versions of all dependencies in this software | . | npm outdated | Lists only the dependencies in this software which are outdated | . | npm update | Update production packages | . | npm update --dev | Update dev packages | . | npm update -g | Update global packages | . | npm update lodash | Update a package | . | npm rm lodash | Remove package production packages | . | npm i sax | NPM package | . | npm i sax@latest | Specify tag latest | . | npm i sax@3.0.0 | Specify version 3.0.0 | . | npm i sax@\"&gt;=1 &lt;2.0\" | Specify version range | . | npm i @org/sax | Scoped NPM package | . | npm i user/repo | GitHub | . | npm i user/repo#master | GitHub | . | npm i github:user/repo | GitHub | . | npm i gitlab:user/repo | GitLab | . | npm i /path/to/repo | Absolute path | . | npm i ./archive.tgz | Tarball | . | npm i https://site.com/archive.tgz | Tarball via HTTP | . | npm version 1.2.3 | Bump the package version to 1.2.3 | . | npm version major | Bump the major package version by 1 (1.2.3 → 2.0.0) | . | npm version minor | Bump the minor package version by 1 (1.2.3 → 1.3.0) | . | npm version patch | Bump the patch package version by 1 (1.2.3 → 1.2.4) | . | npm owner add USERNAME PACKAGENAME | Add someone as an owner | . | npm deprecate PACKAGE@\"&lt; 0.2.0\" \"critical bug fixed in v0.2.0\" | Adds warning to those that install a package of old versions | . | npm update [-g] PACKAGE | update all packages, or selected packages | . | npm outdated [PACKAGE] | Check for outdated packages | . NPX: . | The npx stands for Node Package Execute and it comes with the npm, when you installed npm above 5.2.0 version then automatically npx will installed. | It is an npm package runner that can execute any package that you want from the npm registry without even installing that package. | The npx is useful during a single time use package. If you have installed npm below 5.2.0 then npx is not installed in your system. | . Cheat cheat . | Command | description | . | npx server &lt;folder-name&gt; | Create local server | . | npx pretty-quick | Format using prettier | . | npx envinfo | Show system info | . | npx envinfo --preset &lt;package-name&gt; | To show system info and show specific npm packages info | . | npx json-server &lt;json-file-link&gt; | Run a json server with .json file | . | npx sort-package-json | Sort package.json file | . | npx npm-upgrade | Check for node module updates and update them interactively | . | npx gvi &lt;package-name&gt; | Get the package version information | . | npx set-default-browser &lt;browser-name&gt; | Set any browser as default browser via cli | . | npx npkill | Delete node_modules | . | npx fx &lt;file.json&gt; | View JSON from terminal | . ",
    "url": "/guides/nodejs/#npm-vs-npx",
    
    "relUrl": "/guides/nodejs/#npm-vs-npx"
  },"170": {
    "doc": "Install NodeJS",
    "title": "Testing",
    "content": " ",
    "url": "/guides/nodejs/#testing",
    
    "relUrl": "/guides/nodejs/#testing"
  },"171": {
    "doc": "Install NodeJS",
    "title": "Install NodeJS",
    "content": " ",
    "url": "/guides/nodejs/",
    
    "relUrl": "/guides/nodejs/"
  },"172": {
    "doc": "How to install Starship Shell",
    "title": "How to install Starship Shell",
    "content": " ",
    "url": "/guides/starshipShell/",
    
    "relUrl": "/guides/starshipShell/"
  },"173": {
    "doc": "How to install Starship Shell",
    "title": "What is starship shell?",
    "content": "Is a customizable shell prompt. Learn more in the projects website: starship.rs . ",
    "url": "/guides/starshipShell/#what-is-starship-shell",
    
    "relUrl": "/guides/starshipShell/#what-is-starship-shell"
  },"174": {
    "doc": "How to install Starship Shell",
    "title": "How to install",
    "content": ". | Run this command: | . curl -sS https://starship.rs/install.sh | sh . | Open the file ~/.bashrc and add this line at the end: | . eval \"$(starship init bash)\" .bashrc is a hidden file. You will need to enable hidden files view (CTRL + H) to see this file if you are doing this graphically . | Restart the terminal or run the command: source ~/bashrc . | How to customize the shell prompt . | . Read the manual: Starship Config. If you want the same config I use, then run this command: . curl https://cis106.com/assets/starship.toml -o $HOME/.config/starship.toml . Screenshots . ",
    "url": "/guides/starshipShell/#how-to-install",
    
    "relUrl": "/guides/starshipShell/#how-to-install"
  },"175": {
    "doc": "Final Project Description",
    "title": "Final Project Description",
    "content": " ",
    "url": "/project/Final_Project_description/",
    
    "relUrl": "/project/Final_Project_description/"
  },"176": {
    "doc": "Final Project Description",
    "title": "Description",
    "content": "The goal of this project is to host a web server using Debian 13, Apache, and VirtualBox as the hypervisor. This project will expose students to the following technologies: . | Virtualization (VirtualBox/UTM) | Debian 13 - No Desktop Environment | Apache Web Server | SSH | HTML | Markdown | VS Code | . The project is divided into 3 deliverables. It is done this way, so you can work slowly through the semester as you gain more knowledge working with Linux. This also allows you to earn a grade as the semester progresses because the final project grade is divided equally among the 3 deliverables. The final project is 15% of your final grade, however, this can change, therefore do not skip any deliverable! . Each deliverable will be submitted as a Markdown document in your GitHub Repository. You will also be required to submit a PDF version of each deliverable, just in case something happens to your GitHub Repository. No late submission will be accepted. ",
    "url": "/project/Final_Project_description/#description",
    
    "relUrl": "/project/Final_Project_description/#description"
  },"177": {
    "doc": "Final Project Description",
    "title": "Requirements",
    "content": ". | A virtual machine/PC where you can install Debian. | . ",
    "url": "/project/Final_Project_description/#requirements",
    
    "relUrl": "/project/Final_Project_description/#requirements"
  },"178": {
    "doc": "Final Project Description",
    "title": "Deliverable 1: Project’s Requirements",
    "content": "The goal of deliverable 1 is to demystify the task. You are required to familiarize your self with the technologies that we will use to complete the project. For deliverable 1, we are going to accomplish the following tasks: . | Answer The following questions: . | What is a web server? (In the context of software Ex. Apache) | What are some different web server applications? Include definitions, project’s website/where to download it, which operating system is available for and its latest version. | What is virtualization? | What is virtualbox? | What is a virtual machine? | In the context of virtualization, what does host machine and guest machine mean? | What is Debian? | What is a firewall? | What is SSH? | What is an IP Address? | What is a network mask? | What is a port? (in the context of networking/computers) | What is port forwarding? | What is localhost? (in the context of networking/computers) | What does this ip address represent 127.0.0.1? | What is Git? | What is GitHub? | . | Read the tutorial. Write down every concept you don’t understand and research. | . To demonstrate the completion of deliverable 1, the student needs to submit a markdown and pdf file where all the questions are answered. Here you can find an example of how the document should look like. How am I going to grade deliverable 1? . | Your markdown file should contain: . | Proper markdown syntax | Well organized and easy to read | If you used any images, properly resized them. Use an image resizing tool or HTML to resize them so that they don’t break the formatting. | Here is an example of how I expect the formatting to be: . | Final Project example for deliverable 1 | . | . | . What will you submit for Deliverable 1 . | Convert the deliverable1.md file to pdf and html | In blackboard, submit the pdf file and the URL to the markdown file as it appears in Github. Just like you do for your labs/week reports/notes | . ",
    "url": "/project/Final_Project_description/#deliverable-1-projects-requirements",
    
    "relUrl": "/project/Final_Project_description/#deliverable-1-projects-requirements"
  },"179": {
    "doc": "Final Project Description",
    "title": "Deliverable 2 Setting Up The Web Server",
    "content": "*Video:Deliverable 2 Latest Video 0-100! . Resources: . | Apache Commands You Should know | IP Command With Examples | UFW Essentials | How To Troubleshoot Common Apache Errors | . Follow this guide to install Debian with a web server. After completing the installation, which is only steps 1 to 6, answer the following questions. You must type your answer and take screenshots of the commands and their output. | What are the server hardware specifications (virtual machine settings)? Take a screenshot - don’t type it! | What is the Debian Login Screen? (Take screenshot - do not type it!) | What is the IP address of your Debian Server Virtual Machine? (type the command and show a screenshot of the commands output) | How do you work with the Firewall in Debian? (Type and explain what each command does) . | How do you check if the Firewall is running? | How do you disable the Firewall? | How do you add Apache to the Firewall? | . | What different commands do we use to work with Apache? (Type and explain what each command does and include a screenshot!) . | What is the command you use to check if Apache is running? | What is the command you use to stop Apache? | What is the command you use to restart Apache? | What is the command used to test Apache configuration? | What is the command used to check the installed version of Apache? | What are some common configuration files for Apache? | Where does Apache store logs? | What are some basic commands we can use to review logs? | . | Not all the answers are in the guide. Some researching and testing is required | Make sure the screenshots are properly formatted. Not too big and not too small. Use either a resizing tool or HTML. | . To demonstrate the completion of deliverable 2, the student must submit a markdown and pdf file where all the questions are answered. How am I going to grade deliverable 2? . | Your markdown file should contain: . | Proper markdown syntax | Well organized and easy to read | Images properly resized. Use a tool or HTML to resize them so that they don’t break the formatting. | All required screenshot are included | . | . ",
    "url": "/project/Final_Project_description/#deliverable-2-setting-up-the-web-server",
    
    "relUrl": "/project/Final_Project_description/#deliverable-2-setting-up-the-web-server"
  },"180": {
    "doc": "Final Project Description",
    "title": "Deliverable 3 Adding content to the server",
    "content": ". | Use Step 7 and 8 from the guide to learn how to add content to your web server. | Note: When you get to the part where I am writing a resume, you can just copy/paste from lab 1 Challenge question. There is no need to re-invent the wheel. | . | After you have learned how to add content to your web server, make sure that you remove every file inside the /var/www/html/ directory. You did Step 7 and 8 just to learn how to add files to your server. We want a clean /var/www/html/ directory to continue. | Now, You will create a new repository for a website you will build. Pick any topic you like. Your website should include the following elements: . | At lest 3 sections | Images | Tables | . | You will write this website in markdown and then convert it to HTML. After you have converted the website to html, embed this style sheet so that it looks better than just plain HTML. | Once the HTML is generated, open the html file and insert this line to load the style sheet: &lt;link rel=\"stylesheet\" href=\"style.css\"&gt; | You will place that line right after the last closing &lt;/style&gt; tag and before the &lt;script src=\"https://unpkg.com/mermaid/dist/mermaid.min.js\"&gt;&lt;/script&gt; line. Here is an example | And here is a screenshot | . | These are the general steps to guide you: . | Create a repository in Github - Name it whatever you want | Clone the repository in your Debian Desktop Virtual Machine | Open the repository in VS Code and then create the markdown file | Name your markdown file index.md | Convert the markdown file to HTML | Add the stylesheet to your HTML file | Commit and push your changes to Github | Clone the repository in your Server Virtual machine under the directory /var/www/html/ | . | Confirm, in your Host OS, that your web server is hosting the website you just created. The URL should be one of the following: . | http://localhost:8080/name-of-repository/index.html (Port Forwarding) | http://SERVER-IP-ADDRESS/name-of-repository/index.html (Bridge Network Adapter) | Note: I suggest that you open the site on an Incognito Window to avoid cache | . | . How am I going to grade deliverable 3? . | Your markdown file for deliverable 3 should simply contain: . | Screenshots of your web site running on your web server (At least 2 screenshots) | The link to your web site repository (the one you cloned in your server) | . | . ",
    "url": "/project/Final_Project_description/#deliverable-3-adding-content-to-the-server",
    
    "relUrl": "/project/Final_Project_description/#deliverable-3-adding-content-to-the-server"
  },"181": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Shell Scripting Extra practice 1",
    "content": " ",
    "url": "/extra/Shell_scripting_Basics/",
    
    "relUrl": "/extra/Shell_scripting_Basics/"
  },"182": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Goal",
    "content": "This extra credit is just to practice basic shell scripting. The main goal is to get comfortable doing the following: . | Creating and executing a basic script | Using the man command to get help | . We will use the following commands only: . | echo: to display text | date: to manipulate dates | df: disk space usage | free: memory usage | uname: basic system information | clear: clear screen | . ",
    "url": "/extra/Shell_scripting_Basics/#goal",
    
    "relUrl": "/extra/Shell_scripting_Basics/#goal"
  },"183": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "How to write and execute a basic script step by step",
    "content": "1. The tools: . | To write the script you will need a text editor. These text editors are easy to use: . | Gnome Text Editor: Ubuntu’s default text editor | Geany: More advanced and feature rich but still easy enough for beginners | . | There are a tone more. A simple google search will tell you so! However the text editor you choose is irrelevant so just pick one and move on. | In this guide I will be using Gnome Text and Geany. | A terminal emulator to run the script. Any terminal emulator will work but here I will be using Tilix. | . 2. Write the script . | Open your text editor | The first line of code is the shell declaration or shebang: #!/bin/bash This line will tell the shell (bash) who will be running the script. This line is important because without it, all the commands in the script will be run by the current shell. | Save your file with the file extension .sh. The file extension is not mandatory but it is good practice. | In this guide, we will be placing all our scripts in a folder/directory called scripts in your home directory. This will make it easier to find our scripts. | . 3. Execute the script . | Open your terminal emulator. | The most basic way of running a script is using this formula: . | shell + path/to/script/ | . | For example, we know that our shell is bash and we placed our script in ~/scripts/ therefore the command to execute our script will be: . | bash ~/scripts/hello.sh | . | This part of the path: ~ is a shorthand for /home/$USER which is the current’s user home directory. If you want to learn more about this read read the presentation The Linux Filesystem or the article The Linux FS. For now, every script will be placed in ~/scripts/ so you should not worry about it. | . 4. Add more code to the script . | Notice that when you ran the script, nothing happened. That is because there is nothing to do in the script. | Let’s write some basic commands in the script: . | Use echo to print/display a line of text: . | echo \"hello world\" | . | . | Save and run the script. Notice that the line “hello world” is displayed in the terminal. | . ",
    "url": "/extra/Shell_scripting_Basics/#how-to-write-and-execute-a-basic-script-step-by-step",
    
    "relUrl": "/extra/Shell_scripting_Basics/#how-to-write-and-execute-a-basic-script-step-by-step"
  },"184": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Let’s Practice!",
    "content": "You should now be comfortable writing and executing a basic script. However, before we practice, let’s make our environment more comfortable. Customize Gnome Text Editor: . | Open the Text Editor Preferences: . | Choose a theme you like | Enable custom font and increase the size to a size you are more comfortable with | Enable “Highlight Current Line” | Enable “Display Overview Map” | Disable “Restore Session” | . | In the Options menu: . | Enable line numbers | Change the “Spaces per tab” to 4 | Disable “Check Spelling” | . | . Now, let’s place the terminal emulator and text editor side by side. Use the Windows/Super Key + Right Arrow to snap one window to the right then select the terminal emulator to snap it to the left. This will allow us to work more efficiently . ",
    "url": "/extra/Shell_scripting_Basics/#lets-practice",
    
    "relUrl": "/extra/Shell_scripting_Basics/#lets-practice"
  },"185": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Practice 1: Learning more about echo",
    "content": "The echo command is used to display/print text to the screen. The formula for the command is: . echo + option + \"String you want to display\" . Where option can be one of the followings: . | -n: Do not output a trailing new line. | -e: Enable interpretation of backslash escapes. See man echo for a list of backslash escapes | -E: disable interpretation of backslash escapes (this is the default behavior) | . In a terminal emulator practice the echo command. You may need to open the man page of echo for reference. To practice echo, complete the following tasks: . | Display a line of text. | Display a line of text suppressing the trailing new line | Display a line of text with a tab at the beginning of the line | Display multiple lines of text in a single echo command | Display multiple lines of text in a single command including horizontal and vertical tabs | . Show Solution . ",
    "url": "/extra/Shell_scripting_Basics/#practice-1-learning-more-about-echo",
    
    "relUrl": "/extra/Shell_scripting_Basics/#practice-1-learning-more-about-echo"
  },"186": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Practice 2: Working with more than just echo",
    "content": "| NOTE: At the top of this guide, you have a short description of some basic commands. When needed, use the man command to read the man page of any of those commands | . | Create a shell script named systemInfo.sh and save it in the scripts directory/folder. | This script should output the following information about your system: . | Current date in UTC | Disk space usage in human readable format | Memory/RAM usage in human readable format | Network node hostname (machines name) | Type of processor and type of operating system | . | Make sure that each part is described before it is printed to the screen. This is an example output of your program: | . See Example . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the output of your script (terminal) . ",
    "url": "/extra/Shell_scripting_Basics/#practice-2-working-with-more-than-just-echo",
    
    "relUrl": "/extra/Shell_scripting_Basics/#practice-2-working-with-more-than-just-echo"
  },"187": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Practice 3: More on Echo!",
    "content": "In this practice, use what you have learned about echo to better the script’s output. | Make a copy of systemInfo.sh called systemInfo2.sh | Your goal is to use echo to make the information more presentable. You may need to move some parts around. | Here are some tips: . | Echo can insert new empty lines | Echo can insert tabs within text | Echo can suppress the new line putting the output of echo in the same line as the next command | . | You should review the man page of echo and practice some of those commands. | This is how the output of your script should look like: | . See Example . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the output of your script (terminal) . ",
    "url": "/extra/Shell_scripting_Basics/#practice-3-more-on-echo",
    
    "relUrl": "/extra/Shell_scripting_Basics/#practice-3-more-on-echo"
  },"188": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called “ExtraCredit” (One word no spaces in file names pleases!) | Inside “ExtraCredit”, create another directory called “extra2” | Open your cis106 directory/local repository in VS Code | Inside “extra2” create a markdown file called “extra2.md” | Add all the screenshots to “extra2.md” using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 2: Shell Scripting Extra practice 1 | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 1\" | git push | . | In blackboard submit the following: . | The URL of extra2.md | The PDF file extra2.pdf | . | . ",
    "url": "/extra/Shell_scripting_Basics/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/Shell_scripting_Basics/#what-will-you-submit-for-extra-credit"
  },"189": {
    "doc": "Bash Variables",
    "title": "Bash Variables",
    "content": " ",
    "url": "/extra/bash_variables/",
    
    "relUrl": "/extra/bash_variables/"
  },"190": {
    "doc": "Bash Variables",
    "title": "What is a variable?",
    "content": ". | A variable is a placeholder for data that can be reused and changed later on in your program. In general, bash uses 2 types of variables: . | Environment variables . | These are used by the shell to story system and user session information. | To see a list of environment variables, use the command env | . | User defined variables . | these are created by the user and exist only in the shell script and any subshell that runs said script | When creating variables, follow these rules: . | variable names cannot start with a number | variable names can be up to 20 characters long | variables are case sensitive (name is not the same thing as NAME) | values are assigned using an = sign and no spaces (name=”bob”) | Bash stores all values as string but you should still use “” . | Bash is technically untyped, which means that there are no other data types other than string. | There are exceptions to this rule but we should leave those for another lecture | . | . | . | . | . What is string? . A string is a type of data in programming that represents text. It is made up of letters, numbers, symbols, or spaces and is usually enclosed in quotes (\" or '). Strings are not the only types of data used in programming. You also have numbers which can be floating point or integers. You also have boolean which is only true or false. There is also arrays which are a list of values. Depending on the programming language, you will also encounter other types of data. So why do we say that bash is untyped? . We say that Bash is untyped (or dynamically typed with weak typing) because it does not have explicit data types like other programming languages. Instead, bash defaults everything to string. This means that the following variables are all strings: . #!/bin/bash name=\"bob\" age=35 student=true height=5.9 . Does that mean that I cannot do math in bash? . NO! Bash can do math but values need to be explicitly treated as numbers. One way is to user arithmetic expansion: . #!/bin/bash number1=2 number2=2 sum=$(( number1 + number2 )) echo \"The sum of $number1 and $number2 is: $sum\" . We will cover math in bash in a later lecture. ",
    "url": "/extra/bash_variables/#what-is-a-variable",
    
    "relUrl": "/extra/bash_variables/#what-is-a-variable"
  },"191": {
    "doc": "Bash Variables",
    "title": "How do I use a variable?",
    "content": "Regardless of the type (environment or user defined), to use a variable, you must first put a $ and then the variable name. That is call “accessing a variable”. Here is an example: . #!/bin/bash # Using an environment variable: echo \"Current user is $USER\" # Using a user defined variable: name=\"bob\" echo \"Their name is $name\" . ",
    "url": "/extra/bash_variables/#how-do-i-use-a-variable",
    
    "relUrl": "/extra/bash_variables/#how-do-i-use-a-variable"
  },"192": {
    "doc": "Bash Variables",
    "title": "Practice 1: Environment Variables",
    "content": "Practice env or printenv command first . | Open a terminal emulator and run the env command to display all the environment variables. You can also use the printenv command. | Using the echo command display the content of the following variables: . | USER, HOME, SHELL, PWD | . | There are some environment variables that become available as you start using your system. For example OLDPWD which stores the absolute path of the previous working directory. Change your current working directory to ~/Downloads then display the content of the variable OLDPWD | . Scripting part . | Create a shell script that will display the following output: | . | Notice that the script is using tabs at the beginning of every line and before the variables. | Save and execute your script. | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the output of your script (terminal) . ",
    "url": "/extra/bash_variables/#practice-1-environment-variables",
    
    "relUrl": "/extra/bash_variables/#practice-1-environment-variables"
  },"193": {
    "doc": "Bash Variables",
    "title": "Practice 2: Using Environment Variables part 2",
    "content": ". | Create a shell script that uses the HOME, PWD and OLDPWD environment variables to produce the following output | . Show Solution . ",
    "url": "/extra/bash_variables/#practice-2-using-environment-variables-part-2",
    
    "relUrl": "/extra/bash_variables/#practice-2-using-environment-variables-part-2"
  },"194": {
    "doc": "Bash Variables",
    "title": "Practice 3: User defined variables",
    "content": "Create a script that uses user defined variables to generate the following output: . Show Solution . ",
    "url": "/extra/bash_variables/#practice-3-user-defined-variables",
    
    "relUrl": "/extra/bash_variables/#practice-3-user-defined-variables"
  },"195": {
    "doc": "Bash Variables",
    "title": "Practice 4: Bring it all together",
    "content": "Create a shell script that will generate the following output: . The script must use the following: . | Environment variables | User defined variables | The commands: pwd, ls, and cd | . Show Solution . ",
    "url": "/extra/bash_variables/#practice-4-bring-it-all-together",
    
    "relUrl": "/extra/bash_variables/#practice-4-bring-it-all-together"
  },"196": {
    "doc": "Bash Variables",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called “ExtraCredit” (One word no spaces in file names pleases!) | Inside “ExtraCredit”, create another directory called “extra4” | Open your cis106 directory/local repository in VS Code | Inside “extra4” create a markdown file called “extra4.md” | Add all the screenshots to “extra4.md” using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 4: Bash Variables | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 4\" | git push | . | In blackboard submit the following: . | The URL of extra4.md | The PDF file extra4.pdf | . | . ",
    "url": "/extra/bash_variables/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/bash_variables/#what-will-you-submit-for-extra-credit"
  },"197": {
    "doc": "Cd ../ vs cd -",
    "title": "Cd ../ vs cd -",
    "content": " ",
    "url": "/extra/cd_parent_vs_cd_previous/",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/"
  },"198": {
    "doc": "Cd ../ vs cd -",
    "title": "Concepts",
    "content": ". | Environment variable: is a dynamic-named value typically used to configure the behavior of programs and applications, provide information about the system environment, or store temporary data. | $PWD: Stores the absolute path of the current working directory | $OLDPWD: Stores the absolute path of the previous current working directory | . | Parent directory: refers to the directory that contains another directory or file. It’s the directory that is one level higher in the directory tree hierarchy. | Current directory: refers to the directory in which you are currently working or the directory that your shell session is currently “in.” | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#concepts",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#concepts"
  },"199": {
    "doc": "Cd ../ vs cd -",
    "title": "cd ..",
    "content": "We user cd ../ when we want to navigate the the directory above the current directory. Say that your current working directory is /home/student/Downloads/Games/Doom/ and you want to go to /home/student/Downloads/Games. In this instance the cd ../ command will take you there. The 2 dots indicate the parent directory of the current working directory. You can use it to navigate to more than 1 parent directory for example, if we want to go to /home/student, we would use cd ../../../ . Notice that in this instance we only moved up in the directory tree. ",
    "url": "/extra/cd_parent_vs_cd_previous/#cd-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#cd-"
  },"200": {
    "doc": "Cd ../ vs cd -",
    "title": "cd -",
    "content": "cd - is used to move between 2 directories. These are the current directory and the previous current directory. Linux has 2 environment variables to keep track of this information; $OLDPWD and $PWD. Every time you use the cd command these 2 variables get updated to reflect the current information. So if your current working directory is /home/student/Downloads/Games/Doom and you use cd to change to /usr/share/themes then the current value of those variables would be: . | OLDPWD=home/student/Downloads/Games/Doom | PWD=/usr/share/themes | . Now, if you use the cd - command, then bash will change directories to the value in $OLDPWD and update the variables accordingly. So the values now are: . | OLDPWD=/usr/share/themes | PWD=home/student/Downloads/Games/Doom | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#cd--",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#cd--"
  },"201": {
    "doc": "Cd ../ vs cd -",
    "title": "When should I use cd -?",
    "content": "Well that depends on your workflow and what you are doing at the moment. Since we can switch between 2 directories without typing the path, this comes handy in the following essenarios: . | If you are working in two directories and need to switch between them frequently, and the path is long and you don’t want to type all of that. | If you are editing files in different directories using a command-line | If you are working in a temporary directory you can switch back and forward between the temp directory and the current directory | If you are writing script that requires you to move from 2 directories, cd - allows you to do that without storing the paths in variables. | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd--",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd--"
  },"202": {
    "doc": "Cd ../ vs cd -",
    "title": "When should I use cd ../?",
    "content": "All the time honestly! typing .. is quicker than typing a path backwards. So whenever you need to switch back to the parent directory, use this instead! . ",
    "url": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd-"
  },"203": {
    "doc": "Cd ../ vs cd -",
    "title": "Then what’s up with .. and .?",
    "content": "A single dot (.), represents the current directory where the 2 dots, as mentioned earlier represents the parent directory. This means that: . | ls . and ls do the same thing because by default ls will list the current directory. | cd . will do nothing because it will try to change directory to the current directory. And you cannot go into a room that you are already in! | . However, there are legit uses for the single dot (.) For example, when you want to copy a file from one directory the current directory: . | cp ~/Pictures/Wallpapers/wall.png ./ | . Or when writing paths to files in the current directory in markdown: . | ![wall](./wall.png) | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#then-whats-up-with--and-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#then-whats-up-with--and-"
  },"204": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Getting Comfortable with Ubuntu 24.04",
    "content": ". | Getting Comfortable with Ubuntu 24.04 . | Question 1: Working With Files . | Part 2 - Working with files | . | Question 2: Exploring System Settings | Question 3: Installing Applications Graphically | Question 4: Editing a document | Question 5: Installing Gnome Extensions | What will you submit for extra credit | . | . the goal of this lab/article/page is to give you exposure to using Ubuntu 24.04 (Gnome Desktop Environment) We Will be performing basic computer task . ",
    "url": "/extra/getting_confortable_with_ubuntu/",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/"
  },"205": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 1: Working With Files",
    "content": ". | 1- Open the file manager (files) and explore its interface. Use the image below for help. | . The information in this image was extracted from OpenSuse Documentation. | 2- Practice the following shortcuts: | . | Key Combination | Description | . | Alt + ⬅ &amp; Alt + ➡ | Go backward/go forward | . | Alt + ↑ | Open the parent directory | . | ←, →, ↑, ↓ | Select an item | . | Alt + ↓ or Enter | Open an item | . | Alt + Enter | Open an item’s Properties dialog | . | Shift + Alt ↓ | Open an item and close the current directory | . | Ctrl + L | Toggles the path bar from buttons to path | . | Alt + Home | Opens the home directory | . | any number or letter | Starts a search within the current directory | . | Ctrl + T | Start a search within the current directories and their subdirectories | . | Del | Moves the selected file or directory to the trash, from which it can be restored with Undo | . The information in this image was extracted from OpenSuse Documentation. | 3- In your home directory, create a new directory called Games. | 4- Inside the Games directory, create 3 more directories called: fps,action,rpg | 5- Delete the Games directory | 6- Open the Trash and restore the Games directory | 7- Delete the Games directory again | 8- Empty the Trash | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of your file manager with your trash empty. That will be the proof of submission for question 1 . Part 2 - Working with files . | 1- Open the file manager if it is not open | 2- Use Firefox or any other web browser of your choice to download the following this zip file: https://cis106.com/assets/extras/gcu/site.zip | 3- Decompress/unzip the file in your Downloads directory. | 4- Inside the Downloads directory you should now have a new directory called site | 5- Inside the site directory you should have 3 files: . | site.html | SCRIPT.js | STYLE.css | . | . Show Solution . | 6- Use the website, Pexel.com to download 3 Landscape format images. | 7- Move the images to the site directory | 8- Rename the images to: image1.jpg, image2.jpg, and image3.jpg | 9- Open the file site.html. Notice that the website looks broken. | 10- Rename the files SCRIPT.js and STYLES.css to: . | STYLE.css =&gt; style.css | SCRIPT.js =&gt; script.js | . | 11- Refresh the website site.html and you will notice that now it looks as expected. This is because Linux is case sensitive. So STYLES.css is not the same as styles.css | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of your file manager with your the site directory open. Take another screenshof of Firefox showing the site. Those 2 will be the proof of submission for question 1 part 2 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-1-working-with-files",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-1-working-with-files"
  },"206": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 2: Exploring System Settings",
    "content": "There are two ways of accessing the settings app: . | Via the system menu: | . The information in this image was extracted from Ubuntu's Documentation. | Searching for Settings using the applications launcher: | . | Use the settings app to perform the following tasks: . | 1- Appearance: . | Choose light or dark mode | Choose an accent color you like | Change the wallpaper . | You can download a wallpaper from the internet if you want or use a predefined one. | . | . | . | . Show Solution . | 2- Ubuntu Desktop: . | Play around with the setting of the Desktop Icons and Dock | . | . Show Solution . | Keyboard: . | Add a custom shortcut for the following applications: . | Firefox . | name: Web Browser | command: firefox | shortcut: Super Key (Windows key) + W (or any other key combination you want) | . | Tilix . | name: terminal | command: tilix | shortcut: Super key (windows key) + Enter (or any other key combination you want) | . | Files . | name: File manager | command: nautilus | shortcut: Super key (windows key) + F (or any other key combination you want) | . | VS Code . | name: VS Code | command: code | shortcut: Super + C (or any other key combination you want) | . | Geany . | name: Text Editor | command: geany | shortcut: Super + t (or any other key combination you want) | . | . | To add custom shortcut, follow these steps: . | 1- Click on Keyboard and then scroll down to “View and Customize Shortcuts” | 2- In the dialog that pops up, scroll down to “Custom Shortcut” | 3- Click on “Add Shortcut…” | . | . | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of your desktop showing that you changed the wallpaper or the position of the doc. Take another screenshot showing your custom shortcuts. That will be the proof of submission for question 2 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-2-exploring-system-settings",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-2-exploring-system-settings"
  },"207": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 3: Installing Applications Graphically",
    "content": "To install applications graphically, we use the Software Center also known as the App Center. Let’s install a couple of applications: . | Open the App Center | Search for LibreOffice and install it - This is a productivity suite just like Microsoft Software | Search for a Tetris game. Install one of the options. | Wait until the apps finish installing | Open the LibreOffice Writer and close it | Open the tetris game and close it | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the tetris game you installed. That will be the proof of submission for question 3 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-3-installing-applications-graphically",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-3-installing-applications-graphically"
  },"208": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 4: Editing a document",
    "content": "In this question we will be editing word documents and pdf files. | Download this word document | Open the word document in LibreOffice. | Edit the document and export it to pdf | Open the PDF file in libre Office Draw | Edit the PDf and export it again | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the edited pdf document showing your edits. That will be the proof of submission for question 4 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-4-editing-a-document",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-4-editing-a-document"
  },"209": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 5: Installing Gnome Extensions",
    "content": "Gnome extensions allow you to add extra functionality to your desktop environment. As part of the initial setup for the class, you installed the gnome extension app that allows you to download extensions. | Open the app “Extensions Manager” | Search for the extension “Caffeine” and install it. This extension is used for preventing your computer to go to sleep. To use the extension, click on the system menu. You will see a new icon ( a cup of coffee). | Search for the extension “Apps Menu” by “Fmuelliner” and install it. This will give you a windows like menu at the top left corner. | You can disable or uninstall any Extension you want. Keep in mind that system updates make break some extensions. I recommend keeping the number of extensions to a minimum. | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of your desktop showing the extensions. That will be the proof of submission for question 5 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-5-installing-gnome-extensions",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-5-installing-gnome-extensions"
  },"210": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called “ExtraCredit” (One word no spaces in file names pleases!) | Inside “ExtraCredit”, create another directory called “extra1” | Open your cis106 directory/local repository in VS Code | Inside “extra1” create a markdown file called “extra1.md” | Add all the screenshots to “extra1.md” using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 1: Getting used to the Gnome Desktop Environment | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 1\" | git push | . | In blackboard submit the following: . | The URL of extra1.md | The PDF file extra1.pdf | . | . ",
    "url": "/extra/getting_confortable_with_ubuntu/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#what-will-you-submit-for-extra-credit"
  },"211": {
    "doc": "Markdown Extra Practice",
    "title": "Markdown Extra Practice",
    "content": "If you wish to practice more markdown, try to recreate the following documents in markdown: . ",
    "url": "/extra/lab1_md_extra_practice/",
    
    "relUrl": "/extra/lab1_md_extra_practice/"
  },"212": {
    "doc": "Markdown Extra Practice",
    "title": "Document 1",
    "content": "Create a markdown document from this page, that contains the following: . | Several sections of paragraphs | ordered and unordered lists | A couple of images . | The Linux mascot | Linux distributions logos | Desktop environment screenshots | . | At least 1 table. | . Try to make the document look as professional as possible . ",
    "url": "/extra/lab1_md_extra_practice/#document-1",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-1"
  },"213": {
    "doc": "Markdown Extra Practice",
    "title": "Document 2",
    "content": "To practice note taking and code formatting, use this introduction to python website and create a 1 page document that shows how to get started with python. You just simply include the following: Learn the Basics . | Hello, World! | Variables and Types | Lists | Basic Operators | String Formatting | Basic String Operations | Conditions | Loops | . ",
    "url": "/extra/lab1_md_extra_practice/#document-2",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-2"
  },"214": {
    "doc": "Markdown Extra Practice",
    "title": "Document 3",
    "content": "To practice tables, use the following images and create a pdf file that contains all of these tables: . Table 1 . You can download the images from here . ",
    "url": "/extra/lab1_md_extra_practice/#document-3",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-3"
  },"215": {
    "doc": "Learning Git",
    "title": "Learning Git",
    "content": ". | Presentation here | Cheat Sheet here | . ",
    "url": "/extra/learning-git/",
    
    "relUrl": "/extra/learning-git/"
  },"216": {
    "doc": "Learning Git",
    "title": "Setup Git",
    "content": ". | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | . ",
    "url": "/extra/learning-git/#setup-git",
    
    "relUrl": "/extra/learning-git/#setup-git"
  },"217": {
    "doc": "Learning Git",
    "title": "Setup SSH authentication",
    "content": ". | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. See examle here: . | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboad in the step prior. Type yes (the whole word) and press enter and you are done . | Test you ssh connection by using this command: ssh -T git@github.com You will see the following outcome: . | . If you do not see an error message or a different message than the one shown prior, then your SSH connection is correct. Now you can push and clone using SSH. ",
    "url": "/extra/learning-git/#setup-ssh-authentication",
    
    "relUrl": "/extra/learning-git/#setup-ssh-authentication"
  },"218": {
    "doc": "Mkdir, touch, and rm",
    "title": "Mkdir, touch, and rm",
    "content": ". | . | Commands reference table | . | . | MKDIR . | 2.1. Description | 2.2. Formula/usage | 2.3. Examples | 2.4. Practice | . | 2.4.1. Description | 2.4.2. Solution | . | . | . | TOUCH . | 3.1. Description | 3.2. Formula/usage | 3.3. Examples | 3.4. Practice | . | 3.4.1. Description | 3.4.2. Solution | . | . | . | RM . | 4.1. Description | 4.2. Formula/usage | 4.3. Examples | 4.4. Practice | . | . | . | MV . | 5.1. Description | 5.2. Formula/usage | . | 5.2.1. Moving | 5.2.2. Renaming * 5.3. Examples * 5.4. Practice | . | . | . | CP . | 6.1. Description | 6.2. Formula/usage | 6.3. Examples | 6.4. Practice | . | . | . ",
    "url": "/extra/mkdir_touch_rm/",
    
    "relUrl": "/extra/mkdir_touch_rm/"
  },"219": {
    "doc": "Mkdir, touch, and rm",
    "title": "1. Commands reference table",
    "content": "These are the most basic commands to manage files and directories. | Command | Definition | Formula | Example | . | mkdir | makes directories | mkdir + option + new directory(ies) name | mkdir ~/Downloads/games | . | touch | makes files | touch + option + new file(s) name | touch ~/Downloads/games/list.txt | . | rm | removes files | rm + option + files to delete | rm ~/Downloads/games/list.txt | . | mv | moves files &amp; directories | mv + option + source path + destination path | mv ~/Downloads/games ~/Documents/ | . | mv | rename files &amp; directories | mv + option + old name + new name | mv ~/Documents/games/old.txt ~/Documents/games/mylist.txt | . | cp | copies files &amp; directories | cp + option + sources path + destination | cp -r ~/Downloads/oldGames/ ~/Games/ | . ",
    "url": "/extra/mkdir_touch_rm/#1-commands-reference-table",
    
    "relUrl": "/extra/mkdir_touch_rm/#1-commands-reference-table"
  },"220": {
    "doc": "Mkdir, touch, and rm",
    "title": "2. MKDIR",
    "content": "2.1. Description . | Used for create directories. Mkdir can make 1 or multiple directories by separating each directory name with a space. | . 2.2. Formula/usage . mkdir + option + directory names . Where directory name can be: . | Just the name of the directory if you want to create them in the current working directory | Absolute or relative path if you want to create the directory in a different location | . 2.3. Examples . | Using relative path: Create a directory in your current working directory called games . | mkdir games | . | Using relative path: Create 3 directories inside the games directories called: action, adventure,fps . | mkdir games/action games/adventure games/fps | . | Using absolute path: Create a directory in the action directory called wonderboy . | mkdir ~/games/action/wonderboy | . | Using absolute path: Create 2 directories, one in fps and another in adventure. Call them cod and uncharted . | mkdir ~/games/fps/cod ~/games/adventure/uncharted | . | Create a parent and subdirectory at the same time . | mkdir -p ~/Documents/school/english/homework | . | Create a directory and display a message confirming the directory creation (verbose output) . | mkdir -pv ~/Downloads/games | mkdir -pv ~/Downloads/games/action games/fps/doom practice | . | . 2.4. Practice . 2.4.1. Description . You have just been assigned the task of organizing a new project called “ProjectPhoenix” on your company’s server. For this project, you need to set up a directory structure that will hold various types of documents. The structure should look like this: . ProjectDelta/ ├── planning/ │  ├── meetings/ │ └── drafts/ ├── development/ │ ├── code/ │ └── documentation/ └── testing/ ├── unit_tests/ └── integration_tests/ . 2.4.2. Solution . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#2-mkdir",
    
    "relUrl": "/extra/mkdir_touch_rm/#2-mkdir"
  },"221": {
    "doc": "Mkdir, touch, and rm",
    "title": "3. TOUCH",
    "content": "3.1. Description . touch is used to create an empty file or to update the timestamp of an existing file. If the specified file does not exist, touch will create it. If the file exists, touch will update its access and modification times to the current time. 3.2. Formula/usage . | touch + option + file(s) name | . Where file name can be: . | Just the name of the files if you want to create them in the current working directory | Absolute or relative path if you want to create the directory in a different location | . 3.3. Examples . | Create multiple files in the current working working directory . | touch notes.txt program.py page.html | . | Create multiple files in different directories using absolute path . | touch ~/games/action/wonderboy/run.txt ~/games/adventure/uncharted/todo.md | . | Create multiple files in different directories using relative path . | touch games/action/run.sh games/fps/readme.md | . | . 3.4. Practice . 3.4.1. Description . In th previous practice, you created a directory structure. Add the following files to each directory: . ProjectDelta/ ├── development │   ├── code │   │   ├── app.js │   │   ├── index.html │   │   └── styles.css │   └── documentation │   └── readme.md ├── planning │   ├── drafts │   │   └── notes.md │   └── meetings │   └── schedule.docx └── testing ├── integration_tests │   └── instructions.md └── unit_tests └── test.js 10 directories, 8 files . 3.4.2. Solution . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#3-touch",
    
    "relUrl": "/extra/mkdir_touch_rm/#3-touch"
  },"222": {
    "doc": "Mkdir, touch, and rm",
    "title": "4. RM",
    "content": "4.1. Description . The rm command is used to remove files and directories. It is a powerful command that can permanently delete files, so it should be used with caution. By default, rm removes files, but with certain options, it can also delete directories and their contents. In Linux, only empty directories can be removed. When you try to remove non-empty directories the following error is shown: “rm: cannot remove 'directory_name/': Is a directory”. Even when using the rmdir command, trying to remove a non empty directory results in the following error: “rmdir: failed to remove 'directory_name/': Directory not empty”. To remove directories use the -r option. See examples. 4.2. Formula/usage . | rm + option + directories or files to remove | . Where file/directory name can be: . | Just the name of the files/directories if they are located in the current working directory | Absolute or relative path if they are located in a different location | . Common Options: . | -f: Force removal without prompting for confirmation. | -r or -R: Recursively remove directories and their contents. | -i: Prompt before each removal. | -v: Verbose mode, showing the files as they are removed. | . 4.3. Examples . | Remove files using absolute path . | rm ~/games/action/run.sh ~/games/adventure/uncharted/todo.md | . | Remove files using relative path . | rm games/fps/readme.md games/notes.txt games/page.html | . | Remove files and directories but prompt for confirmation before removing and display removal message when done . | rm -vir games/program.py ~/ProjectDelta | . | Remove a non empty directory forcing the removal . | rm -rf games/ | . | . 4.4. Practice . You have a folder named “OutdatedProjects” in your home directory. This folder contains old project files that you no longer need, including subdirectories with their own files. You want to clean up your home directory by completely removing the “OutdatedProjects” folder and all of its contents. The directory structure looks like this: . /home/user/OutdatedProjects/ ├── projectA/ │ └── old_data.txt ├── projectB/ │ └── old_report.txt ├── projectC/ │ └── notes.txt └── archived_files.txt . Use the rm command to delete the entire “OutdatedProjects” directory, including all of its subdirectories and files, using an absolute path. Before you can run the rm command, you will need to create the directories. Run this command that will run a script to generate the directories and files for you. curl https://cis106.com/assets/extras/rm_practice.sh | bash . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#4-rm",
    
    "relUrl": "/extra/mkdir_touch_rm/#4-rm"
  },"223": {
    "doc": "Mkdir, touch, and rm",
    "title": "5. MV",
    "content": "5.1. Description . The mv command is used for moving and renaming files and directories. Keep the following points in mind about the mv command: . | mv cannot rename more than 1 file at the time | mv can move and rename a file at the same time | mv will set the last argument as the destination or file new name | Common options of the mv command: . | -i: Prompt before overwriting an existing file. | -u: Move only when the source file is newer than the destination file or when the destination file is missing. | -v: Verbose mode, showing the files as they are moved or renamed. | . | . 5.2. Formula/usage . 5.2.1. Moving . | mv + option + files/directories to move + destination directory 5.2.2. Renaming . | mv + option + old name + new name | . 5.3. Examples . | Move multiple files using a combination of absolute path and relative path . | mv -v ~/games/ schoolProject/ Documents/school/hmw.txt ~/Downloads/new_folder/ . | In this example: . | ~/games, schoolProject/, and, Documents/school/hmw.txt are moved to ~/Downloads/new_folder/ | -v enables verbose output. | . | . | . | Rename a directory . | mv -v ~/Downloads/new_folder ~/Downloads/projectAvalon/ | . | Rename a file . | mv -v ~/Downloads/projectAvalon/hmw.txt ~/Downloads/projectAvalon/submission.txt | . | Move and rename a file in a single command . | mv -v ~/Downloads/projectAvalon/submission.txt ~/Documents/cis107_document.txt | . | Move and rename a directory in a single command . | mv -v ~/Downloads/projectAvalon/ ~/Documents/Avalon | . | . 5.4. Practice . You are working on a web development project named “AlphaProject”. You have been give all the files for this project. Your task is to organize the folder. You have to use the mv command for renaming and moving. You are not allowed to create new directories. To get all the necessary files, run this command, which will run a script to generate the directory “AlphaProject” including all the necessary files. curl https://cis106.com/assets/extras/mv_practice.sh | bash . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#5-mv",
    
    "relUrl": "/extra/mkdir_touch_rm/#5-mv"
  },"224": {
    "doc": "Mkdir, touch, and rm",
    "title": "6. CP",
    "content": "6.1. Description . The cp command is used to copy files and directories. Cp requires -r option to copy directories. You can copy and rename a directory or file in a single command too. However, this only works when trying to copy a single file or directory. This is like making a backup sort-of-speak. Common Options: . | -r or -R: Recursively copy directories and their contents. | -i: Prompt before overwriting an existing file. | -u: Copy only when the source file is newer than the destination file or when the destination file is missing. | -v: Verbose mode, showing the files as they are copied. | -a: Copy files and directories, preserving attributes like timestamps and permissions. | . 6.2. Formula/usage . | cp + option + source files/directories + destination directory | . 6.3. Examples . | Copy several files using a combination of absolute and relative path. | cp -r ~/projectOrion/ ~/Downloads/games.txt Videos/example.mp4 Pictures/bg.png ~/bookProject/ . | Note: Here we have to use -r because there is a directory in the sources to copy (~/projectOrion) | . | . | Copy a directory with verbose output . | cp -rv ~/projectOrion/ ~/Documents/ | . | . 6.4. Practice . Copy the directory of the previous practice. Copy the directory to the Documents directory. The name of the copy is: AlphaProjectBackup . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#6-cp",
    
    "relUrl": "/extra/mkdir_touch_rm/#6-cp"
  },"225": {
    "doc": "Mkdir, touch, and rm",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called “ExtraCredit” (One word no spaces in file names pleases!) | Inside “ExtraCredit”, create another directory called “extra5” | Open your cis106 directory/local repository in VS Code | Inside “extra5” create a markdown file called “extra5.md” | Add all the screenshots to “extra5.md” using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 5: Managing Files/Directories | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 5\" | git push | . | In blackboard submit the following: . | The URL of extra5.md | The PDF file extra5.pdf | . | . ",
    "url": "/extra/mkdir_touch_rm/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/mkdir_touch_rm/#what-will-you-submit-for-extra-credit"
  },"226": {
    "doc": "Practice Virtualization",
    "title": "Practice Virtualization",
    "content": "This is for Students using VirtualBox in Windows or MacOS with an Intel CPU . ",
    "url": "/extra/practice_virtualization/",
    
    "relUrl": "/extra/practice_virtualization/"
  },"227": {
    "doc": "Practice Virtualization",
    "title": "Option 1",
    "content": "Simply create virtual machines of Windows or Ubuntu using Lab 2 as a guide. Keep in mind the following: . | The minimun hardware requirements and recommended requires of the OS. | For example here is for Windows | . | To optain an iso file for Windows, use the Windows 10 Media creation tool or Windows 11 media creation tool. | . For Ubuntu, try out the many Ubuntu Flavors in a virtual machine. You can use the live session or do the full installation . Just remember to delete the virtual machine completely when you are done practicing . ",
    "url": "/extra/practice_virtualization/#option-1",
    
    "relUrl": "/extra/practice_virtualization/#option-1"
  },"228": {
    "doc": "Practice Virtualization",
    "title": "Option 2",
    "content": ". | You can download pre-made VDI images from osboxes.org | . ",
    "url": "/extra/practice_virtualization/#option-2",
    
    "relUrl": "/extra/practice_virtualization/#option-2"
  },"229": {
    "doc": "VM Test Activity",
    "title": "VM Test Activity",
    "content": " ",
    "url": "/extra/testingvms/",
    
    "relUrl": "/extra/testingvms/"
  },"230": {
    "doc": "VM Test Activity",
    "title": "Goal",
    "content": ". | All the activities in this lab should be executed reliably with minimal slow downs with a virtual machine that meets the following criteria: . | CPU: 2 Cores | RAM: 4 GB | HDD: 50 GB | . ",
    "url": "/extra/testingvms/#goal",
    
    "relUrl": "/extra/testingvms/#goal"
  },"231": {
    "doc": "VM Test Activity",
    "title": "Applications installed:",
    "content": ". | Code Editor: VS Code | Text Editor: Geany | Web Browser: Firefox, Librewolf, Chromium | . ",
    "url": "/extra/testingvms/#applications-installed",
    
    "relUrl": "/extra/testingvms/#applications-installed"
  },"232": {
    "doc": "VM Test Activity",
    "title": "Test 1: Creating Markdown Documents",
    "content": ". | Download or clone this github repository: https://github.com/ra559/markdown-test | Open the directory in vs code | Create a markdown file called: husky.md | Use the text in the husky.txt file to create the husky.md file. | The document should contain as much markdown format as possible. | Convert the document to pdf | Convert the document to html | Preview the pdf file in vs code | Preview the html file using live server | . were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-1-creating-markdown-documents",
    
    "relUrl": "/extra/testingvms/#test-1-creating-markdown-documents"
  },"233": {
    "doc": "VM Test Activity",
    "title": "Test 2: Basic Website",
    "content": ". | Open the markdown-test directory from the previous test in vs code | Add some css and bootstrap to the html | Add some javascript | Preview the website with live preview | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-2-basic-website",
    
    "relUrl": "/extra/testingvms/#test-2-basic-website"
  },"234": {
    "doc": "VM Test Activity",
    "title": "Test 3: Basic Jekyll Site",
    "content": ". | Use this guide to install Jekyll | Use this guide to create your jekyll site. | Add some entries to your site | Constantly server your site with --trace enabled. | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-3-basic-jekyll-site",
    
    "relUrl": "/extra/testingvms/#test-3-basic-jekyll-site"
  },"235": {
    "doc": "VM Test Activity",
    "title": "Test 3: Terminal + Vs Code + Web Browser",
    "content": ". | Use this Linux FS guide to practice some commands. | Create a markdown file and take screenshots. | Add the screenshots to the markdown file and convert the file to pdf | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-3-terminal--vs-code--web-browser",
    
    "relUrl": "/extra/testingvms/#test-3-terminal--vs-code--web-browser"
  },"236": {
    "doc": "The Linux FS",
    "title": "The Linux FS",
    "content": "All The videos here . ",
    "url": "/extra/thelinuxfs/",
    
    "relUrl": "/extra/thelinuxfs/"
  },"237": {
    "doc": "The Linux FS",
    "title": "Other Review Videos:",
    "content": ". | REVIEW 4: The LS command and Practice | Linux Tutorials The ls command GeeksforGeeks | How to Use The ls Command on the Linux Command Line | . | The Linux FS . | Other Review Videos: | Basic Concepts . | Special characters: | Bash Environment Variables | Bash Tips: | . | Commands to navigate the linux filesystem . | PWD | CD | Practice CD command: | LS . | Output of LS -L explained: | . | Practice LS command: | Tree | EXA | . | What will you submit for extra credit | . | . ",
    "url": "/extra/thelinuxfs/#other-review-videos",
    
    "relUrl": "/extra/thelinuxfs/#other-review-videos"
  },"238": {
    "doc": "The Linux FS",
    "title": "Basic Concepts",
    "content": ". | The root directory: The first directory in the filesystem that contains the entire filesystem represented by “/”. | Current working directory: Also known as the present working directory. It is the directory where you are currently working in. You are always working from a directory. | Parent Directory: a dirtectory containing one or more directories and files. | Child directory: a better name for this is a subdirectory or subfolder. This is a directory inside another directory. See image for visual reference. | . | YOUR HOME DIRECTORY: This is your user’s personal directory where all your files are located. Every user has it’s own home directory just like in a apartment complex they all residents have their own apartment while sharing the common areas. You have total ownership of your home directory but outside of the home directory only the root user can make changes. An example absolute path, assuming that user name is maria53, would be /home/maria53 | The home Directory: This is the parent directory of all the home directories. This is where all the users’ home directory are. The absolute path of this directory is /home. Noticed that it starts at the root. | The root user: This is the administrator account of your system. To perform administrative tasks or to manage directories and files outside of your home directory, you must obtain root privileges using the sudo command at the beginning of the command. | Path name: Also known as file path. This is the location of a given file in your computer. A path name can be absolute path or relative path. | Absolute Path: The location of a file starting at the root of the file system. For example, /home/maria53/Downloads/list.txt is the absolute path of the file list.txt. The advantage of absolute paths is that they can be used at any point of the file system regardless of your current directory. Any command that is given an absolute path will be able to find the file because it will start at the beginning of the filesystem. The disadvantage is that a command can be long to type if the file path is long. | Relative Path: The location of a file starting from a child directory of the current working directory or from the current directory itself. The advantage of using relative path is that typing commands is faster. The disadvantage of relative paths is that they cannot work from anywhere in the filesystem. In order for a relative path to work, a file must be reachable from the current directory onwards. Another disadvantage of relative paths is that they require a better mental understanding of the linux filesystem in the sense that you must keep a mental image of the directory tree that you are working with. An example of a relative path would be Downloads/list.txt assuming that the current working directory is /home/maria53 Special characters: . Special characters are function like commands that tell the shell to perform a specific action without having to type the complete command. These special characters make working on the command line more efficiently. Here is short list to keep in mind. | . (single period): represents the current directory. | .. (2 consecutive periods): represents the parent directory. | ~ (tilde character): expands the current users home directory. It is like a variable that the shell uses to store the absolute path of the user’s home directory. This ~/Downloads is the same as typing /home/maria53/Downlods | / (one forward slash): as mentioned earlier, this is the root directory and the shortest path in the system. This is the beginning of the directory tree. There is nothing before it and everything after it. | - (hyphen-minus): is used to move to the previous current working directory. | # (hash or number sign): This is used for single line comments in shell scripting. | ! (single exclamation mark): used for repeating a command from the history. For example !5 will repeat the 5th command in the command history. To view the entire command history type history. | !! (2 consecutive exclamaton marks): are used for repeating the previous command. For example, !! will repeat the previous command while, sudo !! will repeat the previous command but will add sudo at the beginning of the command. This is useful for times when we forget to type sudo when performing administrative tasks. | . Bash Environment Variables . | What is a variable? . | In programming, a variable is place to store data. A variable is like a box with a label. For example, if you a lot of pens in your desk and you place them in a box a label it pens, now the box store your pens. In programming a variable can be used to store temporary or permanent information that you will continuously reuse in your program. For example, username='maria53' the variable name now stores the value maria. When evener the programs need to access the maria’s username, it can do it by referencing the variable username. | . | What is an environment variable? . | Environment variables store values of a user’s environment and can be used in commands in the shell. These values can be unique to the user’s environment which makes them ideal when writhing commands that you want to use regales of which user is using the computer. To see a list of your environment variables type env. To use the value stored in an environment variable you must prepend the variable name with a $. Here are some useful environment variables: | $USER = stores the current’s user username | $HOME = stores the absolute path of current’s user home directory | $PWD = stores the absolute path of the present working directory. | $OLDPWD = stores the absolute path of the previous current working directory | . | . Bash Tips: . | Tab Completion: autocomplete a command/pathname by pressing the tab key | Arrow keys: allows you to move, edit, and repeat commands | Ctrl + a: go to the start of the command line | Ctrl + e: go to the end of the command line . | Shortcut list | . | . ",
    "url": "/extra/thelinuxfs/#basic-concepts",
    
    "relUrl": "/extra/thelinuxfs/#basic-concepts"
  },"239": {
    "doc": "The Linux FS",
    "title": "Commands to navigate the linux filesystem",
    "content": "To navigate the linux filesystem, you only need to master 3 commands: cd, pwd and ls. While there are other useful commands, those can be considered complimentary and you should learn them after you have mastered those 3. PWD . | Usage . | Displays the absolute path of the current working directory. | . | Formula . | pwd | . | Examples . | Print the absolute path of current working directory . | pwd | . | . | . CD . | Usage . | Changes the current working directory. In other words, it moves you from one directory to another. By default, it will always send you to your home directory. | . | Formula . | cd + destination absolute path or relative path | . | Examples . | Go (change your current directory) to your home directory (there is more than 1 way of doing this): . | cd (without any arguments, cd will take you home) | cd ~ (using the ~ special character. as ~ will expand to the absolute path of the user’s home directory) | cd $HOME (using the $HOME environment variable) | cd /home/$USER/Downloads (using $USER environment variable in the path) | . | Go to a specified directory with absolute path: . | cd /usr/share/themes | . | Go to a specified directory with relative path assuming your current working directory is /home . | cd maria53/Downloads/ | . | Go to the previous working directory. This is useful when you are working with 2 directories located far in the directory tree . | cd - | . | Go to the previous directory in the directory tree. One directory above. | cd ../ | . | Go to 2 directories above the directory tree . | cd ../../ | . | . | . Practice CD command: . Try to complete these tasks without looking at the solution. Use the image below as a reference: . | Using absolute path, go to the directory “/user/share/themes/Adwaita” | Go back to your home directory. | Go back to the “/user/share/themes/Adwaita” using the - special character. | Go to the root of the filesystem using the “..” special character. | Go to your “Downloads” directory 1 directory at the time. Display/Print your present working directory once you have reached the “Downloads” directory. | Go back to your home directory and then to the “Pictures” directory. | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the terminal showing all the commands you used to complete the practice . LS . | Usage . | ls is used for listing files and directories. By default it will list the current directory when no directory is specified. Listing means to see what is inside a directory. | . | Formula . | ls + option + directory to list | . | Examples . | See all the options of the ls command (extracted from the man page): . | ls --help | . | List the current directory: . | ls | . | List all the files including hidden files in current directory: . | ls -A | . | List all the files inside a given directory: . | ls -A /usr/share/fonts/X11 (absolute path) | ls -A Documents/ (relative path assuming that the $PWD is $HOME) | . | Long list a directory . | ls -lA ~/Pictures | . | List a directory recursively . | ls -R Documents/ | . | Long list a directory only . | ls -ld Documents/ | . | List a directory sorted by last modified . | ls -t Documents/ | . | List a directory sorted by file size . | ls -S Documents/ | . | Long list a directory excluding group and owner information, with human readable file size and sorted in reverse order. | ls -lhgGr Documents/ | . | . | . Output of LS -L explained: . Practice LS command: . Try to complete these tasks without looking at the solution. | Use this command to download some example files: curl https://raw.githubusercontent.com/ra559/cis106/main/assets/scripts/practice_ls.sh | bash | The command above will create a directory in your home directory called practicels Here you will find 10 example files to practice ls. If the command above did not work, read the output carefully and try to fix it yourself. You can also download the zip file on your own. Read the basic script for the URL. | . | list all the files in the practice directory. | long list all the files in the practice directory. | long list all the files in the practice directory sorted by file size with human readable file sizes | long list all the files in the practice directory sorted by file size with human readable file sizes and in reverse order. | long list all the files in the practice directory without the group and owner, with human readable file sizes, sorted by file extension and with full time stamp. | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the terminal showing all the commands you used to complete the practice . Tree . | Usage . | used to display a recursive directory listing (tree) of files. | . | Formula . | tree + option + directory | . | Examples . | Display a tree of the home directory . | tree ~ or tree $HOME or tree /home/$USER | . | Display a tree of a directory with file permissions . | tree -p ~/practicels | . | Display a tree of a directory with the full path prefix, with the user and group owner, human readable file sizes, and the date of last modified. | tree -pughD ~/practicels/ | . | . | . EXA . | Usage . | Used the same way as ls. To list files and directories. Exa is a modern replacement for ls written in Rust. Exa is not installed by default. You will need to install it using your linux distribution package manager. | . | Formula . | exa + option + directory | . | Examples . | list all files in a given directory in a single line . | exa -1 ~/practicels | . | long list all the files in a given directory . | exa -l ~/practicels | . | long list all the files in a given directory with headers . | exa -lh ~/practicels | . | list a directory in a tree like format . | exa -T ~/practicels | . | . | . ",
    "url": "/extra/thelinuxfs/#commands-to-navigate-the-linux-filesystem",
    
    "relUrl": "/extra/thelinuxfs/#commands-to-navigate-the-linux-filesystem"
  },"240": {
    "doc": "The Linux FS",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called ExtraCredit (One word no spaces in file names pleases!) | Inside ExtraCredit, create another directory called extra3 | Open your cis106 directory/local repository in VS Code | Inside extra3 create a markdown file called extra3.md | Add all the screenshots to extra3.md using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 3: The Linux FS | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 1\" | git push | . | In blackboard submit the following: . | The URL of extra3.md | The PDF file extra3.pdf | . | . ",
    "url": "/extra/thelinuxfs/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/thelinuxfs/#what-will-you-submit-for-extra-credit"
  },"241": {
    "doc": "Wildcards",
    "title": "Wildcards",
    "content": " ",
    "url": "/extra/wildcards/",
    
    "relUrl": "/extra/wildcards/"
  },"242": {
    "doc": "Wildcards",
    "title": "Description",
    "content": "Wildcards or file globing is a shell feature that, using special characters, allows us to rapidly specify groups of filenames. Because we work with files all the time, it is useful to be able to work with multiple files at the same time. Why and when should I use a wildcard? . Using wildcards can save you a lot of time. Imagine you need to move all the text files in a folder. You could move them one by one—if you know each file’s name. But what if there are 300 files? Moving them one at a time would take forever! Wildcards help you by allowing you to match all files that meet a certain pattern or criteria, so you can move them all at once with a single command. Here are some examples: . | Copy all photos from a drive to a flash drive. | Delete certain types of files from a folder. | List all files that have a date in their name. | . There are only 3 wildcards. Here is how they work: . | Wildcard | definition | example | . | * | matches 0 to any number of characters | ls ~/Downloads/*.png | . | ? | matches 1 character | ls ~/Downloads/f?ll.sh | . | [] | matches 1 character from a set | ls ~/Downloads/f[0-9]ll.sh | . ",
    "url": "/extra/wildcards/#description",
    
    "relUrl": "/extra/wildcards/#description"
  },"243": {
    "doc": "Wildcards",
    "title": "What does “matches x number of character” really mean?",
    "content": "This refers to the number of characters in the file name that can be matched everytime the wildcard is used in a command. For example, here is an illustration using the * wildcard: . Notice that because the * wildcard matches 0 characters and also any number of characters, this command: ls *SC*.png matches the files Script_remover.sh and BackupScript.sh. To practice the wildcards, run this command: . curl https://cis106.com/assets/extras/wildcards.sh | bash . This will create a directory in your home directory called wildcard_extra_practice. This directory contains a bunch of files and directories (created at random). All the examples here will use the files in this directory. ",
    "url": "/extra/wildcards/#what-does-matches-x-number-of-character-really-mean",
    
    "relUrl": "/extra/wildcards/#what-does-matches-x-number-of-character-really-mean"
  },"244": {
    "doc": "Wildcards",
    "title": "The * (star/asterisk) wildcard",
    "content": "Examples: . | List all of the directories inside a given directory without listing their content . | ls -1d wildcard_extra_practice/*/ | . | . | Move all the .sh (shell scripts) files . | mv wildcard_extra_practice/*.sh wildcard_extra_practice/scripts/ | . | . | List and then move all the image files in the wildcard_extra_practice directory. You will need to create a directory first. | mkdir wildcard_extra_practice/images/ | ls wildcard_extra_practice/img-*.* | mv -v wildcard_extra_practice/img-*.* wildcard_extra_practice/images/ | . | . ",
    "url": "/extra/wildcards/#the--starasterisk-wildcard",
    
    "relUrl": "/extra/wildcards/#the--starasterisk-wildcard"
  },"245": {
    "doc": "Wildcards",
    "title": "The ? (question mark) wildcard",
    "content": "Examples: . | List all the files that contain a 4 letter file extension. | ls -1X wildcard_extra_practice/*.???? | . | List all the files that contain a 4 letter file extension and start with letter i: . | ls -1X wildcard_extra_practice/i*.???? | . | List all th files Microsoft Office 365 files. | ls -1X wildcard_extra_practice/*.???x | . | . ",
    "url": "/extra/wildcards/#the--question-mark-wildcard",
    
    "relUrl": "/extra/wildcards/#the--question-mark-wildcard"
  },"246": {
    "doc": "Wildcards",
    "title": "The [] (square brackets) wildcard",
    "content": "| POSIX class | Represents | Means | Example using ls | . | [:upper:] | [A-Z] | Uppercase letters | ls *[[:upper:]]* - List files with uppercase letters | . | [:lower:] | [a-z] | Lowercase letters | ls *[[:lower:]]* - List files with lowercase letters | . | [:digit:] | [0-9] | Digits | ls *[[:digit:]]* - List files containing digits | . | [:alpha:] | [A-Za-z] | Alphabetic characters | ls *[[:alpha:]]* - List files with alphabetic characters | . | [:alnum:] | [A-Za-z0-9] | Alphanumeric characters | ls *[[:alnum:]]* - List files with alphanumeric characters | . | [:space:] | [ \\t\\n\\r\\f\\v] | Whitespace characters | ls *[[:space:]]* - List files with spaces in names | . | [:punct:] | Punctuation | Punctuation characters | ls *[[:punct:]]* - List files with punctuation characters | . | [:blank:] | [ \\t] | Space and tab | ls *[[:blank:]]* - List files with spaces or tabs | . | [:xdigit:] | [0-9A-Fa-f] | Hexadecimal digits | ls *[[:xdigit:]]* - List files with hexadecimal characters | . | [:cntrl:] | Control characters | Control characters | ls *[[:cntrl:]]* - List files with control characters | . | [:print:] | Printable | Printable characters | ls *[[:print:]]* - List files with printable characters | . | [:graph:] | Graphical | Visible characters (not spaces) | ls *[[:graph:]]* - List files with graphical characters | . | [:word:] | [A-Za-z0-9_] | Word characters (alphanumeric + underscore) | ls *[[:word:]]* - List files containing word characters | . | [:ascii:] | ASCII characters | All ASCII characters (0-127) | ls *[[:ascii:]]* - List files containing ASCII characters | . Examples: . | List all the files that start with a capital letter . | ls wildcard_extra_practice/[A-Z]* | . | List all the files that contain a number in their name . | ls wildcard_extra_practice/*[0-9]* | . | List all the files that start with a capital letter and have a 2 character file extension . | ls wildcard_extra_practice/[A-Z]*.?? | . | List all the files that contain a punctuation character in the name and a 4 character file extension . | ls wildcard_extra_practice/*[[:punct:]]*.???? | . | . Note: . | Wildcards also have their limitations. | For instance, “List all the files that do not contain a digit in the file name” You may assume that the approach would be ls *[!0-9]*. However, this does not work. This wildcard translates to: “all files and directories in the current directory whose names contain at least one character that is not a digit (0-9)” However, if you ever need this, here are two approaches: . | Use ls + grep: . | ls *[!0-9]* | grep -v '[0-9]' | . | Use find: . | find ./ -not -name '*[0-9]*' | . | Find is preferred for scripts because ls is not suited for shell scripts. ls is intended to be a human friendly tool and the output is difficult to parse properly. | . | . ",
    "url": "/extra/wildcards/#the--square-brackets-wildcard",
    
    "relUrl": "/extra/wildcards/#the--square-brackets-wildcard"
  },"247": {
    "doc": "Wildcards",
    "title": "Brace Expansion",
    "content": "Brace expansion is not a wildcard but a feature of the bash shell that allows you to create strings without needing loops. The strings can be filenames, sequences, or patterns. Brace expansion is handled before file globing and variable expansion. Brace expansion is used in the following manner: . | Open brace ({) + pattern separated by commas with no spaces + closing brace (}). | . Examples: . | Create 3 html files . | touch {index,about,contact}.html | . | Create 10 files numbered 1 to 10 . | touch file{1..10}.txt | . | Create a directory structure in a single command: . | mkdir -vp website/{assets,scripts,extras} | . | Create an even more complex directory structure . | mkdir -vp website/{assets/{imgs,audio},scripts/{js,python},extras/{docs,helper}} | . | Create files in increments using A to Z in the file name . | touch file{A..Z}.txt | . | Remove the same 100 files created in the previous example: . | rm file{A..Z}.txt | . | . ",
    "url": "/extra/wildcards/#brace-expansion",
    
    "relUrl": "/extra/wildcards/#brace-expansion"
  },"248": {
    "doc": "Wildcards",
    "title": "Challenge Practice 1:",
    "content": ". | Inside the wildcard_extra_practice directory, create a new directory called: Office365. | Research a list of Microsoft Office 365 file extensions and use that knowledge to identify which files in the wildcard_extra_practice directory are Office 365 files. You should also research any file extension you do not recognized from the files in the wildcard_extra_practice directory. | Use a wildcard to move all the Office 365 files to the wildcard_extra_practice/Office365 directory | . Show Solution . ",
    "url": "/extra/wildcards/#challenge-practice-1",
    
    "relUrl": "/extra/wildcards/#challenge-practice-1"
  },"249": {
    "doc": "Wildcards",
    "title": "Challenge Practice 2:",
    "content": ". | Change your current working directory to ~/wildcard_extra_practice | List and then remove all the files that contain 2 numbers in their file name right before the file extension. Be very careful with this step. | Create a new directory called practice_docs. | Move all the html, odt, and pdf files to practice_docs | . Show Solution . ",
    "url": "/extra/wildcards/#challenge-practice-2",
    
    "relUrl": "/extra/wildcards/#challenge-practice-2"
  },"250": {
    "doc": "Wildcards",
    "title": "Challenge Practice 3:",
    "content": ". | List all the image files in the ~/wildcard_extra_practice directory. Ignore the images subirectory. Only the images in ~/wildcard_extra_practice must be listed. | Copy the images you listed in the previous step to the images subdirectory. | Inside the images subdirectory, create 1 directory for every file type. | Move each file type to its respective new subdirectory | . Show Solution . ",
    "url": "/extra/wildcards/#challenge-practice-3",
    
    "relUrl": "/extra/wildcards/#challenge-practice-3"
  },"251": {
    "doc": "Wildcards",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called “ExtraCredit” (One word no spaces in file names pleases!) | Inside “ExtraCredit”, create another directory called “extra6” | Open your cis106 directory/local repository in VS Code | Inside “extra6” create a markdown file called “extra6.md” | Add all the screenshots to “extra6.md” using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading 1: # Extra Credit 6: Wildcards | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 5\" | git push | . | In blackboard submit the following: . | The URL of extra6.md | The PDF file extra6.pdf | . | . ",
    "url": "/extra/wildcards/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/wildcards/#what-will-you-submit-for-extra-credit"
  },"252": {
    "doc": "Final Exam Study Guide",
    "title": "Final Exam Study Guide",
    "content": ". ",
    "url": "/final_exam/final_exam/",
    
    "relUrl": "/final_exam/final_exam/"
  },"253": {
    "doc": "Final Exam Study Guide",
    "title": "Special Note:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/final_exam/final_exam/#special-note",
    
    "relUrl": "/final_exam/final_exam/#special-note"
  },"254": {
    "doc": "Final Exam Study Guide",
    "title": "Recommendations",
    "content": ". | Arrive to the classroom 30 minutes before the exam starts (5:00 PM) . | This will allow you to test your virtual machine, perform any maintenance, test your internet connection, do a test pull and push, and troubleshoot any hardware problem. | . | Make sure your github repository is organized . | Since you are allowed to use your notes during your exam, it is to your benefit to have all your notes organized. | I recommend creating a single document with all of notes and converting it to pdf. This will make it easier to find information. | BE AWARE that you can only use your notes - NOT YOUR LABS - for the exam. So if I catch you looking at your labs, presentations, book, or the internet during the exam, this will constitute cheating and your exam will be terminated | . | Update Windows and Ubuntu the day before the final exam . | Do not update virtualbox | Create a snapshot of your virtual machine before updating. If anyting goes wrong, you will be able to recover. | . | If you plan on using one of my computers: . | Arrive 15 to 20 minutes early | You will need to clone your repository | You will need to make sure everything works for you | . | . WARNING Your lack of preparation does not constitute an emergency for me. There are no make up exams. You are either here for the exam or your are not! There is another class after our class. Which means that the exam starts at 5:40 and ends at 6:55 on the dot! You must save the last 10 minutes of the exam to prepare your submission. ",
    "url": "/final_exam/final_exam/#recommendations",
    
    "relUrl": "/final_exam/final_exam/#recommendations"
  },"255": {
    "doc": "Final Exam Study Guide",
    "title": "Commands to study",
    "content": ". | Make sure you understand them well. Then include 3 - 5 examples that you understand and can use without any challenge. | Don’t memorize. | awk | cat | cp | cut | grep | head | ls | man | mkdir | mv | tac | tail | touch | tr | tree | . ",
    "url": "/final_exam/final_exam/#commands-to-study",
    
    "relUrl": "/final_exam/final_exam/#commands-to-study"
  },"256": {
    "doc": "Final Exam Study Guide",
    "title": "Concepts to study",
    "content": "Working with Git, GitHub, and Markdown . | How to create a github repository | How to clone a github repository | How to use the git commands | How to write a markdown file that contains images and proper headings | How to convert a markdown file to pdf | . How to Practice? . | Create a repository in github. Give it any name you want. | Clone the repository in your virtual machine | Open the repository/folder/directory in vs code | Create a markdown file inside containing random text. Make sure you have headings, images, pagrapaths, bullet points etc… | Convert the file to html and pdf | Push everything to github | Do you see the files there? | Add a couple more html files by repeating the process. | Did you get lost? if so, you know what you need to study! | . Linux Specific Concents . | How to compress (zip) a directory/folder | The linux filesystem | Absolute path and relative path | When should you use absolute vs relative | Moving around the filesystem with absolute and relative (pwd,cd, ls, and tree) | How to work with multiple terminals open? | How to work with manual pages? | How to parse (search) for specific words in the manual page | How to redirect output (&gt;, &gt;&gt;, and |) | How to append the output of a command to a file | How and when to redirect the output of a command to another (pipes) | How to use echo and output redirection to create a new file that contains some text | How to use wildcards . | For copying and moving multiple files at the same time | . | How to use brace expansion . | For creating entire directory structures in a single command | . | . How to practice? . | Go through the presentations and try to do the practice without looking at the solutions. | Go over all the challenge questions. Do them again using only your notes as reference. That will allow you to know if you need to enhance them or if they are good enough for the final | Did you get lost? Where? Why? Get to the answer without using google or chatgpt. Annotate and add those annotations to your notes | Need more help? Take a look at the extra section of the website and the youtube channel | . ",
    "url": "/final_exam/final_exam/#concepts-to-study",
    
    "relUrl": "/final_exam/final_exam/#concepts-to-study"
  },"257": {
    "doc": "Final Exam Study Guide",
    "title": "Regarding shell scripting:",
    "content": ". | How to create and execute a basic script . | The Bash Shell Lecture - Page 28 | . | How to create user defined variables and environment variables . | The Linux Filesystem Lecture - Page 40 | . | How to use positional parameters . | Shell Scripting - Getting user input Lecture - page 3 - 6 | . | How to use command substitution to store the output of a command in a variable . | Shell Scripting - Getting user input Lecture - Page 7 | . | . ",
    "url": "/final_exam/final_exam/#regarding-shell-scripting",
    
    "relUrl": "/final_exam/final_exam/#regarding-shell-scripting"
  },"258": {
    "doc": "Final Exam Study Guide",
    "title": "How to practice shell scripting for your final exam.",
    "content": "Challenge yourself to write these scripts. Try to do them on your own simply using your notes and the presentation. Everytime you find yourself lost, take notes of the problem and the solution so that you can have it for reference. Script 1: Using Echo and environment variables . Write a shell script that will display the following output: . The challenge here is to: . | Use echo to display messages that include tabs and new lines | Use echo and environment variables together | In this screenshot I use HOME, USER, PWD, and OLDPWD | There is also a cd command in there | . Script 2: Using user defined variables and user input . NOTE For Spring 25 Students: This script (script 2) does not apply to you as the concept of user input was not covered. Please skip this script during your studies. Write a shell script that will ask the user several questions, store the responses in variables and then use those variables in a single echo command. The output should look like this: . The challenge here is to: . | Collect user information and store in a variable | Use the variables in an echo command to generate a multi line message | You have to use a single echo command | . Script 3: Using positional parameters . NOTE For Spring 25 Students: This script (script 3) does not apply to you as the concept of positional parameters was not covered. Please skip this script during your studies. Write a shell script that will take 3 positional parameters. The first parameter is the name of a new directory, the second and third are file names. Use the mkdir to create the directory, and then touch to create the 2 files in the new directory. DO NOT USE CD! Here is the output of the script: . The challenge here is to: . | Use positional parameters with echo, mkdir, touch and tree. | Remember to use quotes around your variables. For example tree \"$1\" | Use positional parameters and brace expansion to create the files | . Script 4: Extra! . Create a script that generates this output. Here are the special characters: . ┌ ┐ └ ┘ │ ─ . Create a script that generates this output: . Script 5: Using variables Part 2 . write a shell script that uses user defined variables and environment variables to generate the following output. The challenge here is to: . | Use user defined variables with mkdir, touch, tree,echo | Notice the empty lines in the screenshot. Try using the new line character instead of an empty echo command | . ",
    "url": "/final_exam/final_exam/#how-to-practice-shell-scripting-for-your-final-exam",
    
    "relUrl": "/final_exam/final_exam/#how-to-practice-shell-scripting-for-your-final-exam"
  },"259": {
    "doc": "ANSI Escape Sequences",
    "title": "ANSI Escape Sequences",
    "content": "| Escape Sequence | Effect | . | \\033[0m | Reset / Normal | . | \\033[1m | Bold / Increased intensity | . | \\033[2m | Faint / Decreased intensity (may not display) | . | \\033[3m | Italicized (not supported in some terminals) | . | \\033[4m | Underlined | . | \\033[5m | Blink (often disabled or not supported) | . | \\033[7m | Inverted / Reverse video | . | \\033[8m | Hidden (conceal text) | . | \\033[9m | Strikethrough text (not widely supported) | . | \\033[10m | Primary font (not widely used) | . | \\033[11m-19m | Alternate fonts 1-9 (rarely supported) | . | \\033[21m | Bold off (reset bold) | . | \\033[22m | Normal color (no bold, no underlined) | . | \\033[23m | Not italicized (reset italic) | . | \\033[24m | Not underlined (remove underline) | . | \\033[25m | Blink off (remove blink) | . | \\033[27m | Reverse off (reset reverse video) | . | \\033[28m | Reveal (unhide text) | . | \\033[29m | Reset strikethrough (remove strikethrough effect) | . | \\033[30m | Set text color to black | . | \\033[31m | Set text color to red | . | \\033[32m | Set text color to green | . | \\033[33m | Set text color to yellow | . | \\033[34m | Set text color to blue | . | \\033[35m | Set text color to magenta | . | \\033[36m | Set text color to cyan | . | \\033[37m | Set text color to white | . | \\033[38m | Set custom text color (ANSI 256 colors or RGB values) | . | \\033[39m | Reset text color to default | . | \\033[40m | Set background color to black | . | \\033[41m | Set background color to red | . | \\033[42m | Set background color to green | . | \\033[43m | Set background color to yellow | . | \\033[44m | Set background color to blue | . | \\033[45m | Set background color to magenta | . | \\033[46m | Set background color to cyan | . | \\033[47m | Set background color to white | . | \\033[48m | Set custom background color (ANSI 256 colors or RGB) | . | \\033[49m | Reset background color to default | . | \\033[50m | Fraktur (not widely supported) | . | \\033[51m | Framed (rarely supported) | . | \\033[52m | Encircled (rarely supported) | . All unsafe sequences are bold. Unsafe means that the particular sequence is not universally supported across terminal emulators. ",
    "url": "/bash/ANSI_escape_sequences/",
    
    "relUrl": "/bash/ANSI_escape_sequences/"
  },"260": {
    "doc": "ANSI Escape Sequences",
    "title": "What are ANSI Escape Sequences/Characters?",
    "content": "ANSI escape characters are sequences of characters used to control text formatting, color, and cursor movement in your terminal. They are used for text styling, color formatting, cursor control and screen movements. They are common in shell scripts. ",
    "url": "/bash/ANSI_escape_sequences/#what-are-ansi-escape-sequencescharacters",
    
    "relUrl": "/bash/ANSI_escape_sequences/#what-are-ansi-escape-sequencescharacters"
  },"261": {
    "doc": "ANSI Escape Sequences",
    "title": "Structure of ANSI Escape Sequences",
    "content": "Take the following Escape Sequence: \\033[31m This is used to set the text color to RED. ANSI Escape codes follow the following formula/patter: . ESC[&lt;parameters&gt;&lt;command&gt; . | ESC (\\033 or \\x1B): Starts the sequence | [ ... ]: The Control Sequence Introducer (CSI) | &lt;parameters&gt;: (optional) Numeric values separated by semicolons (;) to define styles or actions | &lt;command&gt;: A letter that specifies the action. | . ANSI Commands: . Notice that each of text formatting ends in a lowercase m. That is because m is the command for applying the color formatting. There are formats you should be aware exist too. | H: move the cursor to a specified position. Ex. \\033[10;10H moves the cursor to row 10 column 10 | J: Clears part of the screen. Ex: \\033[2J Will clear the screen | K: Clears part of a line. Ex. \\033[3D\\033[K clears from Cursor to End of Line. | . Be aware that H,J,K, may not be supported by your terminal emulator, bash version, or operating system all together. M is more widely supported but still there are many codes that are not. How can I use these codes in my scripts? . The easiest way is to assign them to variables and then use them as you would any other value. For example, . #!/bin/bash RESET=\"\\033[0m\" BOLD=\"\\033[1m\" RED=\"\\033[31m\" echo -e $BOLD$RED\"This text is red\"$RESET . Keep in mind that you must use the reset sequence when you are done formatting otherwise it will keep the formatting for the rest of the script. The example above will set the text color to RED and the font style to bold. You can also download and import some of the sequences in the table above and use the colors as variables. Here is the source file: ansi_sequences.sh. And here is how you can add it to your scripts . Note: Your must have curl instaled . I recommend this example for times when you will the script once. #!/bin/bash curl https://cis106.com/assets/scripts/ansi_escape_codes.sh -o ansi_codes source ansi_codes # Place the rest of your script here echo -e $BackgroundYellow echo -e \"┌───────────────────────────────────────┐\" echo -e \"│ Random Text Goes in this banner │\" echo -e \"└───────────────────────────────────────┘\" echo $Reset # End of script rm ansi_codes # This will remove the ansi_codes file. If you plan on using these codes frequently, here is a better snippet that checks if the file ansi_codes is in your current directory or not. If it is, it skips the curl command. #!/bin/bash [ ! -e ansi_codes ] &amp;&amp; [ ! -s ansi_codes ] &amp;&amp; curl -s https://cis106.com/assets/scripts/ansi_escape_codes.sh -o ansi_codes source ansi_codes . Example: . #!/bin/bash [ ! -e ansi_codes ] &amp;&amp; [ ! -s ansi_codes ] &amp;&amp; curl -s https://cis106.com/assets/scripts/ansi_escape_codes.sh -o ansi_codes source ansi_codes # Place the rest of your script here echo -e $BackgroundYellow\"┌───────────────────────────────────────┐\"$Reset echo -e $BackgroundYellow\"│\"$Blue\" Random Text Goes in this banner\"$Reset$BackgroundYellow\" │\"$Reset echo -e $BackgroundYellow\"└───────────────────────────────────────┘\"$Reset # End of script . ",
    "url": "/bash/ANSI_escape_sequences/#structure-of-ansi-escape-sequences",
    
    "relUrl": "/bash/ANSI_escape_sequences/#structure-of-ansi-escape-sequences"
  },"262": {
    "doc": "Arrays",
    "title": "Arrays",
    "content": ". | Arrays . | What is an array? | Declaring an array . | Method 1: Using Parenthesis | Method 2: Using declare command | . | Accessing elements of an array . | Examples | . | Modifying an array | Looping through an array . | Using for | Interesting example: | Using while | Using until | Interesting Example | . | Working with associative arrays . | Create an associative array: | Accessing values | . | Array operations | . | . ",
    "url": "/bash/arrays/",
    
    "relUrl": "/bash/arrays/"
  },"263": {
    "doc": "Arrays",
    "title": "What is an array?",
    "content": "An array in Bash is a data structure that can store multiple values in a single variable. There are two types of arrays in bash: . | Indexed arrays: this type uses numeric indenes starting at 0 | Associative Arrays: this type uses keys (like a dictionary) | . ",
    "url": "/bash/arrays/#what-is-an-array",
    
    "relUrl": "/bash/arrays/#what-is-an-array"
  },"264": {
    "doc": "Arrays",
    "title": "Declaring an array",
    "content": "Method 1: Using Parenthesis . The formula is simple: array name+=+(+elements separated by a space+). Example: . #!/bin/bash # Array declaration example users=(\"john\" \"Mary\" \"Peter\" \"Ivan\") . This method is used for creating indexed arrays. It cannot be used to create associative arrays. Method 2: Using declare command . The declare command is used to create and modify variables. It allows to control the scope of the variables as well. In the case of arrays, we can use to create indexed arrays or associative arrays. The syntax is: declare+options+array_name+=+value . Example: . #!/bin/bash # Indexed array declare -a users=(\"john\" \"peter\" \"joe\") # Accessing values echo ${users[0]}1 . #!/bin/bash declare -A user # Assign values user[\"name\"]=\"Alice\" user[\"age\"]=35 user[\"eyes\"]=\"brown\" user[\"city\"]=\"New York\" user[\"email\"]=\"alice_88@email.com\" user[\"username\"]=\"a_wa339\" # accessing values: echo -e ${user[\"name\"]} lives in ${user[\"city\"]}. She is ${user[\"age\"]} years old \\ her eyes color is ${user[\"eyes\"]}. Her email address is ${user[\"email\"]}. ",
    "url": "/bash/arrays/#declaring-an-array",
    
    "relUrl": "/bash/arrays/#declaring-an-array"
  },"265": {
    "doc": "Arrays",
    "title": "Accessing elements of an array",
    "content": "The formula to access the an element of an array is as follows: . | $+{+name_of_array+[+index+]+} | . Examples . #!/bin/bash users=(\"john\" \"peter\" \"mario\") echo ${users[0]} # outputs john echo ${users[*]} # outputs all elements echo ${users[@]} # outputs all elements echo ${#users[@]} # Array length echo ${users[-1]} # Last element . ",
    "url": "/bash/arrays/#accessing-elements-of-an-array",
    
    "relUrl": "/bash/arrays/#accessing-elements-of-an-array"
  },"266": {
    "doc": "Arrays",
    "title": "Modifying an array",
    "content": ". | To add an element to the end of an array: . | array_name+=(element) | Example: users+=(\"fred\") | . | To update a given element: . | array_name[index_here]=\"element\" | Example: users[0]=\"root\" | . | To remove an element: . | unset array_name[index_to_delete] | Example: unset users[-1] | . | To clear an entire array: . | unset array_name | Example: unset users | . | . #!/bin/bash users=(\"john\" \"peter\" \"mario\") echo -e \"Current size:\\t${#users[*]}\" echo -e \"Adding a new element: fred\" users+=(\"fred\") #adding element echo -e \"New size:\\t${#users[*]}\" echo -e \"All elements\\t${users[*]}\" echo -e \"Updating first element to root\" users[0]=\"root\" # updating first element echo \"All element: ${users[*]}\" echo \"Removing last element\" unset users[-1] # removing last element echo \"All elements: ${users[*]}\" echo \"Clearing array\" unset users echo \"All elements: ${users[*]}\" . ",
    "url": "/bash/arrays/#modifying-an-array",
    
    "relUrl": "/bash/arrays/#modifying-an-array"
  },"267": {
    "doc": "Arrays",
    "title": "Looping through an array",
    "content": "Using for . Example: . #!/bin/bash users=(\"john\" \"peter\" \"mario\") for user in \"${users[*]}\" do echo \"Current user: $user\" done # Example using indexes: for i in \"${!users[@]}\" do echo \"User $i =&gt; ${users[$i]}\" done . Interesting example: . Create a script that will get an array of all the users in a system then display each user name . #!/bin/bash users=($(awk -F\":\" '{print $1}' /etc/passwd | tr '\\n' \" \")) for user in \"${users[@]}\" do echo \"User: $user\" done . Using while . Example: . #!/bin/bash users=(\"john\" \"peter\" \"mario\") index=0 while [[ $index -lt ${#users[@]} ]] do echo \"User $index =&gt; ${users[$index]}\" ((index++)) done . | This loop runs until the index is less than the length of the array | . Using until . #!/bin/bash users=(\"john\" \"peter\" \"mario\") index=0 until [[ $index -ge ${#users[@]} ]] do echo \"User $index =&gt; ${users[$index]}\" ((index++)) done . | The until loop continues until the condition becomes true. The opposite of a while loop. | . Interesting Example . | You can use until and arrays to validate user input when the input is predictable. | For example, you need the user to answer in one of the following forms: y Y Yes YES No NO n | . #!/bin/bash valid=(\"y\" \"Y\" \"YES\" \"Yes\" \"yes\" \"n\" \"N\" \"no\" \"No\" \"NO\") input=\"\" until [[ \"${valid[@]}\" =~ \"$input\" ]] do read -p \"Continue? (y/n) \" input done echo \"The answer is correct: $input\" . ",
    "url": "/bash/arrays/#looping-through-an-array",
    
    "relUrl": "/bash/arrays/#looping-through-an-array"
  },"268": {
    "doc": "Arrays",
    "title": "Working with associative arrays",
    "content": "Create an associative array: . Associative arrays use key value pairs to store date. For instance, you can have an array of values that stores the user’s name and their corresponding ip address. Example: . #!/bin/bash declare -A users players=([bob]=\"192.168.1.16\" [mary]=\"192.168.1.17\" [joe]=\"192.168.1.18\") echo \"${players[bob]}\" . Accessing values . declare -A users users=([bob]=\"192.168.1.16\" [mary]=\"192.168.1.17\" [joe]=\"192.168.1.18\") echo \"${users[bob]}\" ## Looping through keys for key in \"${!users[@]}\" do echo \"$key's ip is: ${users[$key]}\" done . ",
    "url": "/bash/arrays/#working-with-associative-arrays",
    
    "relUrl": "/bash/arrays/#working-with-associative-arrays"
  },"269": {
    "doc": "Arrays",
    "title": "Array operations",
    "content": "#!/bin/bash users=($(awk -F\":\" '{print $1}' /etc/passwd | tr '\\n' \" \")) # Slicing echo \"${users[@]:1:2}\" # Start at index 1, take 2 elements # Sorting sortedUsers=($(printf \"%s\\n\" \"${users[@]}\" | sort)) echo \"${sortedUsers[@]}\" # Searching for a given element search_string=$(echo $USER) for item in \"${sortedUsers[@]}\" do if [ \"$item\" == \"$search_string\" ] then echo \"array contains $search_string\" if done ## passing an array to a function print_users(){ local array=(\"$@\") for item in \"${array[@]}\" do echo \"$item\" done } print_users \"${sorted_users[@]}\" ## Reading an array from a file mapfile -t my_array &lt; file.txt echo \"${my_array[@]}\" . ",
    "url": "/bash/arrays/#array-operations",
    
    "relUrl": "/bash/arrays/#array-operations"
  },"270": {
    "doc": "Bash Checks",
    "title": "Bash Checks",
    "content": " ",
    "url": "/bash/checks/",
    
    "relUrl": "/bash/checks/"
  },"271": {
    "doc": "Bash Checks",
    "title": "String Checks",
    "content": "| Check | Description | Returns True If | Example | . | [ -z \"$string\" ] | String is empty | The string has zero length | [ -z \"\" ] &amp;&amp; echo \"Empty\" | . | [ -n \"$string\" ] | String is not empty | The string has non-zero length | [ -n \"Hello\" ] &amp;&amp; echo \"Not Empty\" | . | [ \"$string1\" = \"$string2\" ] | Strings are equal | Both strings are identical | [ \"Hello\" = \"Hello\" ] &amp;&amp; echo \"Equal\" | . | [ \"$string1\" != \"$string2\" ] | Strings are not equal | Both strings are different | [ \"Hello\" != \"World\" ] &amp;&amp; echo \"Not Equal\" | . ",
    "url": "/bash/checks/#string-checks",
    
    "relUrl": "/bash/checks/#string-checks"
  },"272": {
    "doc": "Bash Checks",
    "title": "Number Checks",
    "content": "| Check | Description | Returns True If | Example | . | [ \"$num1\" -eq \"$num2\" ] | Numbers are equal | $num1 is equal to $num2 | [ 5 -eq 5 ] &amp;&amp; echo \"Equal\" | . | [ \"$num1\" -ne \"$num2\" ] | Numbers are not equal | $num1 is not equal to $num2 | [ 5 -ne 10 ] &amp;&amp; echo \"Not Equal\" | . | [ \"$num1\" -gt \"$num2\" ] | Number is greater than | $num1 is greater than $num2 | [ 10 -gt 5 ] &amp;&amp; echo \"Greater\" | . | [ \"$num1\" -lt \"$num2\" ] | Number is less than | $num1 is less than $num2 | [ 5 -lt 10 ] &amp;&amp; echo \"Less\" | . | [ \"$num1\" -ge \"$num2\" ] | Number is greater or equal | $num1 is greater than or equal to $num2 | [ 10 -ge 10 ] &amp;&amp; echo \"Greater/Equal\" | . | [ \"$num1\" -le \"$num2\" ] | Number is less or equal | $num1 is less than or equal to $num2 | [ 5 -le 10 ] &amp;&amp; echo \"Less/Equal\" | . ",
    "url": "/bash/checks/#number-checks",
    
    "relUrl": "/bash/checks/#number-checks"
  },"273": {
    "doc": "Bash Checks",
    "title": "File Checks",
    "content": "| Check | Description | Returns True If | Example | . | [ -e \"$file\" ] | File exists | The file exists | [ -e \"file.txt\" ] &amp;&amp; echo \"Exists\" | . | [ -d \"$file\" ] | File is a directory | The file is a directory | [ -d \"folder\" ] &amp;&amp; echo \"Directory\" | . | [ -r \"$file\" ] | File is readable | The file is readable | [ -r \"file.txt\" ] &amp;&amp; echo \"Readable\" | . | [ -w \"$file\" ] | File is writable | The file is writable | [ -w \"file.txt\" ] &amp;&amp; echo \"Writable\" | . | [ -x \"$file\" ] | File is executable | The file is executable | [ -x \"script.sh\" ] &amp;&amp; echo \"Executable\" | . | [ -s \"$file\" ] | File is not empty | The file is not empty | [ -s \"file.txt\" ] &amp;&amp; echo \"Not Empty\" | . | [ -L \"$file\" ] | File is a symbolic link | The file is a symbolic link | [ -L \"link\" ] &amp;&amp; echo \"Symbolic Link\" | . ",
    "url": "/bash/checks/#file-checks",
    
    "relUrl": "/bash/checks/#file-checks"
  },"274": {
    "doc": "Bash Comments",
    "title": "Using Comments in Bash",
    "content": "In Bash scripting, comments are used to annotate code, making it easier to understand and maintain. Bash supports single-line comments natively and provides workarounds for multi-line comments. ",
    "url": "/bash/comments/#using-comments-in-bash",
    
    "relUrl": "/bash/comments/#using-comments-in-bash"
  },"275": {
    "doc": "Bash Comments",
    "title": "Bash Comments",
    "content": " ",
    "url": "/bash/comments/",
    
    "relUrl": "/bash/comments/"
  },"276": {
    "doc": "Bash Comments",
    "title": "Single line",
    "content": "# This is a comment echo \"hello world\" . ",
    "url": "/bash/comments/#single-line",
    
    "relUrl": "/bash/comments/#single-line"
  },"277": {
    "doc": "Bash Comments",
    "title": "Single in line comment",
    "content": "echo \"hello world\" # prints hello world ls -lh \"$dir\"/* # long list all files inside $dir . ",
    "url": "/bash/comments/#single-in-line-comment",
    
    "relUrl": "/bash/comments/#single-in-line-comment"
  },"278": {
    "doc": "Bash Comments",
    "title": "Multi line comment style 1",
    "content": "# This is a multiline comment # and here is line 2 # Line 3 echo \"hello world\" . ",
    "url": "/bash/comments/#multi-line-comment-style-1",
    
    "relUrl": "/bash/comments/#multi-line-comment-style-1"
  },"279": {
    "doc": "Bash Comments",
    "title": "Multi line comment - Here document",
    "content": ": &lt;&lt; 'COMMENT' This is a multi-line comment. We can add as much text as we want between the comment tags and it will be ignored by the shell. COMMENT echo \"hello world\" . The key word does not need to be COMMENT. It can be any string. The static part is the :, &lt;&lt; and ' around the keyword. Here is another example: . : &lt;&lt; 'HERE' this is another multiline comment See?! another line and another line HERE echo \"hello world\" . ",
    "url": "/bash/comments/#multi-line-comment---here-document",
    
    "relUrl": "/bash/comments/#multi-line-comment---here-document"
  },"280": {
    "doc": "Control Statements",
    "title": "Control Statements",
    "content": "Control statements are used to control the flow of a script. In bash, we can use the following control statements: . | test command | if/else/elif | [] | [[]] | case | For/while/until loops | . In this guide, we will explore examples of each. ",
    "url": "/bash/controlflow/#control-statements",
    
    "relUrl": "/bash/controlflow/#control-statements"
  },"281": {
    "doc": "Control Statements",
    "title": "test command",
    "content": "The test command in used to evaluate expressions if a expression is true or false. Examples of when this command is used includes: . | Checking file attributes (e.g., existence, permissions, size). | Comparing strings (e.g., equality, non-emptiness). | Performing numeric comparisons | . There are two ways of using test: test+ condition and [ condition ] . To use test we need to rely on the command exit status. In bash every command has an exit status. Zero (0) means that the command executed successfully where anything else other than 0 means that the command did not execute successfully. Look at the table here for a list of all bash checks . Example: . A shell script that checks if a file exist. #!/bin/bash test -e \"$1\" &amp;&amp; echo \"file $1 exist\" || echo \"file $1 does not exist\" . ",
    "url": "/bash/controlflow/#test-command",
    
    "relUrl": "/bash/controlflow/#test-command"
  },"282": {
    "doc": "Control Statements",
    "title": "if/else/elif",
    "content": "If/else/elif statements are used to execute commands if a particular condition is true. We use if statements all the time for making decisions. For example: . if (it is raining outside) then bring an umbrella elif (it is sunny outside) bring a hat elif (it is snowing outside) wear a heavy clothes end if statement . if (hungry?) then eat else continue working end of if statement . In shell scripting, we say that something is true when it returns 0 as an exit status. False is any status code that is not 0. For example, run this command: ls downloads1. This will result in an error because we currently do not have a directory called downloads1. Now type: echo $? to display the status code of the last command that was run. Then run the command ls and repeat the echo command: echo $?. Do you see the difference? . IF statement basic fomula: . # if if (condition_command); then command1 command2 ... last_command fi # if/else if (condition_command); then command1 command2 ... last_command else command1 command2 ... last_command fi # if/elif if (condition_command); then command1 command2 ... last_command elif (condition_command); then command1 command2 ... last_command else command1 command2 ... last_command fi . The condition command can be: . | A command such as ls | Numerical comparison | String comparison | Bash checks | . If statements end with the fi keyword. This keyword is required! . Example of if statements . Basic if . #!/bin/bash if (ls); then echo \"ls command ran successfully\" fi . Notice that the output of ls is displayed in the screen and since the command executed successfully, it executed the echo command. if you do not want to see the output of the command in the condition block, the you can pipe the output ot /dev/null. Here is an example: . #!/bin/bash if (ls &amp;&gt; /dev/null); then echo -e \"\\nls command ran successfully\" fi . If with else . #!/bin/bash games=\"$HOME/games1\" if (ls \"$games\" 2&gt; /dev/null); then touch \"$games/gamelist.txt\" else mkdir \"$games\" touch \"$games/gamelist.txt\" ls $games fi . This is a basic script that lists the directory “games1” to see if the directory exits. If the directory exist, it will return 0 (true) and the touch command will be executed. If the ls command returns anything else other than 0 (false), then the else block will be executed, creating the directory and then the file gamelist.txt . There is a more efficient way of doing this. However, this example serves as a good illustration on how the if/else statements can be used. Using elif . For this example, refer to the doc: bash checks. #!/bin/bash # Check if a file, directory, or something else exists read -p \"Enter a path: \" path if [ -f \"$path\" ]; then echo \"It is a regular file.\" elif [ -d \"$path\" ]; then echo \"It is a directory.\" elif ls \"$path\" &amp;&gt; /dev/null; then echo \"It exists but is neither a file nor a directory.\" else echo \"The path does not exist.\" fi . Notice that here I am not using () but instead []. In the next session, we will discuss why. Basically, this script will simply check if the path given by the user is a regular file or a directory. If it is neither of those, then it will let the user know that the path exists but it is neither. If those 3 conditions fail, then it will default to tell the user that the given path does not exist. ",
    "url": "/bash/controlflow/#ifelseelif",
    
    "relUrl": "/bash/controlflow/#ifelseelif"
  },"283": {
    "doc": "Control Statements",
    "title": "[] VS [[]] VS ()",
    "content": "Whats the deal with the brackets and the parenthesis? and then there is also the double brackets! . () . We use the () to start a subshell. So when you write this: . if (ls &amp;&gt; /dev/null); then #command fi . You are executing ls in a subshell and then the exit status code of said subshell is what is evaluated to true/false. THIS IS NOT REQUIRED! in fact, this approach creates unnecessary overhead by starting a new shell inside our script. It is common for programmers that do not write bash often to prefer the parenthesis approach. However, unless you really want to open a subshell, you should instead write your if statements like this: . if ls &amp;&gt; /dev/null; then #command fi . [] . we use the single brackets when we want to do bash tests. Just like the test command. See bash checks doc for a list of all tests with examples. Here is the same example we saw earlier: . #!/bin/bash # Check if a file, directory, or something else exists read -p \"Enter a path: \" path if [ -f \"$path\" ]; then echo \"It is a regular file.\" elif [ -d \"$path\" ]; then echo \"It is a directory.\" elif ls \"$path\" &amp;&gt; /dev/null; then echo \"It exists but is neither a file nor a directory.\" else echo \"The path does not exist.\" fi . This can also be used for string and number comparisons as well. [[ ]] . If the single brackets do comparison and tests, what do we need the double brackets for? The single brackets are a command ( just like test is). However, the double brackets are not. Instead, they are a bash builtin keyword. The double brackets can do the following: . | Supports pattern matching (== with * wildcard) | Supports regular expressions (=~) | Allows logical operators (&amp;&amp;, ||) without escaping | Prevents word-splitting and unintended globbing. | . Table with key difference: . | Feature | [ ] (Single Brackets) | [[ ]] (Double Brackets) | . | POSIX Standard | ✅ Yes (works in all shells) | ❌ No (Bash/Ksh/Zsh only) | . | String Comparisons | Requires quoting variables | No need to quote variables | . | Wildcards (*) | ❌ No | ✅ Yes (== supports patterns) | . | Regex Matching (=~) | ❌ No | ✅ Yes | . | Logical Operators (&amp;&amp;, ||) | ❌ No (requires separate [ ] calls) | ✅ Yes (directly usable) | . | Safer with Empty Variables | ❌ No | ✅ Yes | . if you are planning to write portable scripts, avoid [[ ]] as much as possible because it is not POSIX compliant. What Does It Mean for a Shell to Be POSIX-Compliant? It means that it follows the standards of the Portable Operating System Interface (POSIX) specified by IEEE for maintaining compatibility between operating systems. For shells it means tht that it supports a defined set of features, commands, and behaviors that allow scripts to be portable. Bash is not exactly fully POSIX compliant but it can be. Bash has some unique syntax called Bashisms. The [[]] is an example of of those bash specific syntax. ",
    "url": "/bash/controlflow/#-vs--vs-",
    
    "relUrl": "/bash/controlflow/#-vs--vs-"
  },"284": {
    "doc": "Control Statements",
    "title": "case",
    "content": "The case statement allows you to execute different blocks of code bassed on the value of a variable or expression. It is akin to a switch statement in other programming languages. Basic Syntax of case . case variable in pattern1) code here ;; pattern2) code here ;; *) code here ;; esac . Form the snippet above: . | The ;; are required | the esac keyword ends the case statement | the * is akin to the else condition in an if/else block and it is required. This is the default case when the rest fails. | . Case statements are a good choice over if/else when the value of the variable is predictable. Example of case: . A script that displays a menu and runs the block depending on the users selection . #!/bin/bash echo -e \" Choose one of the following options: \\n \\ \\t1) List $HOME \\n \\ \\t2) List directories only in $HOME \\n \\ \\t3) List all config files in /etc \\n \\ \\t4) Exit\" read -p \"Enter a number from 1 - 3 \" num case \"$num\" in 1) echo \"User picked $num\" ls -A $HOME ;; 2) echo \"User picked $num\" ls -d $HOME/*/ ;; 3) echo \"User picked $num\" ls /etc/*.conf ;; *) exit ;; esac . ",
    "url": "/bash/controlflow/#case",
    
    "relUrl": "/bash/controlflow/#case"
  },"285": {
    "doc": "Control Statements",
    "title": "Loops",
    "content": "For . A for loop is control structure used for iterating over a list of items and executes commands for each item in the list. The basic syntax of a for loop is: . for variable in item1 item2 item3 ...; do command here done . Here is a basic example: . #!/bin/bash fruits=(\"apple\" \"banana\" \"papaya\") for fruit in ${fruits[@]}; do echo \"I love $fruit\" done: . Now lets see an example of a loop that iterates through a list of txt files in a given directory . ``` . While . Until . ",
    "url": "/bash/controlflow/#loops",
    
    "relUrl": "/bash/controlflow/#loops"
  },"286": {
    "doc": "Control Statements",
    "title": "Control Statements",
    "content": "Note: Work in progress . ",
    "url": "/bash/controlflow/",
    
    "relUrl": "/bash/controlflow/"
  },"287": {
    "doc": "Bash Functions",
    "title": "Bash Functions",
    "content": "A function is just a small reusable pease of code. It does something and return its result back to the program. It can also return nothing. ",
    "url": "/bash/functions/#bash-functions",
    
    "relUrl": "/bash/functions/#bash-functions"
  },"288": {
    "doc": "Bash Functions",
    "title": "1. Bash Basic function",
    "content": "# Option 1 function function_name() { # body of function here } # Option 2 function_name(){ # body of function here } # to call function: function_name . | Keep in Mind . | Bash functions do not return values. They can return: . | An exit status using return | A value using a variable (global or local) | value via STDOUT - This requests command substitution | . | . | . ",
    "url": "/bash/functions/#1-bash-basic-function",
    
    "relUrl": "/bash/functions/#1-bash-basic-function"
  },"289": {
    "doc": "Bash Functions",
    "title": "2. Return an exit status",
    "content": "# Checks if $1 exist. 0 = true, 1 = false potato(){ [ -f \"$1\" ] &amp;&amp; return 0 || return 1 } potato \"$1\" # We can then use the $? to create logic with the exit status code. [ $? -eq 0 ] &amp;&amp; echo \"$1 exist\" || echo \"$1 doesn't exist\" . ",
    "url": "/bash/functions/#2-return-an-exit-status",
    
    "relUrl": "/bash/functions/#2-return-an-exit-status"
  },"290": {
    "doc": "Bash Functions",
    "title": "3. Returning values with variables",
    "content": "# Using a global variable: potato(){ greeting=\"Good Morning, $1\" } potato \"Mary\" echo \"$greeting\" # Using local variable potato(){ local name=\"$1\" local age=\"$2\" local email=\"$3\" echo -e \"Hello $name\\nAt $age you will need a bigger boat.\\n\\tSent from $email\" } potato \"Mary\" \"43\" \"admin@mail.com\" . ",
    "url": "/bash/functions/#3-returning-values-with-variables",
    
    "relUrl": "/bash/functions/#3-returning-values-with-variables"
  },"291": {
    "doc": "Bash Functions",
    "title": "4. Returning value with command substitution",
    "content": "potato() { local greeting=\"Hello, $1!\" echo \"$greeting\" } result=$(potato \"Bobby\") echo \"$result\" . ",
    "url": "/bash/functions/#4-returning-value-with-command-substitution",
    
    "relUrl": "/bash/functions/#4-returning-value-with-command-substitution"
  },"292": {
    "doc": "Bash Functions",
    "title": "5. Can I return a status code and value at the same time?",
    "content": "Yes. Here is an example: . is_even(){ local numb=$1 if (( numb % 2 == 0 )) then echo \"even\" return 0 else echo \"not even\" return 1 fi } result=$(is_even $1) status_code=$? echo \"the $1 number is $result\" . Side Note: The example script above has a couple of gotchas. If you pass a letter instead of a number it tells you that it is even. How so?? Well, bash does arithmetic evaluation using ((...)) inside these parentheses everything is an integer. This means that every non-integer character is considered a 0 by bash. Notice that I said integer and not number. That is because bash does not support floating point numbers. You need an external utility (like bc) to handle floating point numbers. The next gotcha is the lack of $ in the numb variable. As you already know, in order to access the value of a variable, you need to preface it with a $, however, because the ((...)) are already expecting an integer, the $ becomes optional. The script below is a complete version that handles non integer input. #!/bin/bash is_even() { local numb=$1 # Ensure the input is a number if ! [[ \"$numb\" =~ ^-?[0-9]+$ ]]; then echo \"Error: Input is not an integer\" return 2 # Use a special return code for invalid input fi # Proceed with even/odd check if (( numb % 2 == 0 )); then echo \"even\" return 0 else echo \"not even\" return 1 fi } # Call the function with the user's input result=$(is_even \"$1\") status_code=$? # Check the return code if [ $status_code -eq 2 ]; then echo \"Invalid input: $1 is not an integer.\" else echo \"The $1 number is $result.\" fi . 5.1. Whats up with the arguments? . Just like your script, functions take arguments (positional parameters). These work the same way. Say that you run the script ./playground.sh john carla with the following code: . #!/bin/bash echo \"parameter/argument 1: $1\" echo \"parameter/argument 2: $2\" potato(){ echo \"In the function 1: $1\" echo \"In the function 2: $2\" } potato \"peter\" \"jane\" echo \"Passing the same parameters to the function:\" potato \"$1\" \"$2\" . The output will be: . parameter/argument 1: john parameter/argument 2: carla In the function 1: peter In the function 2: jane Passing the same parameters to the function: In the function 1: john In the function 2: carla . Notice that lines 1 and 2 have the arguments we passed to script but lines 3 and 4 have the arguments we passed to the function. You can passed the same arguments you gave to the script to the function too as you can see in lines 7 and 8 . ",
    "url": "/bash/functions/#5-can-i-return-a-status-code-and-value-at-the-same-time",
    
    "relUrl": "/bash/functions/#5-can-i-return-a-status-code-and-value-at-the-same-time"
  },"293": {
    "doc": "Bash Functions",
    "title": "6. Move advanced examples of functions",
    "content": "6.1. Returning the content of an array . #!/bin/bash all_ip_addresses() { local ips=(\"192.168.1.10\" \"192.168.1.12\" \"192.168.1.14\") echo \"${ips[@]}\" } array=($(all_ip_addresses)) for ip in ${array[@]} do ping -c 4 $ip done . 6.2. Returning an array with mapfile . #!/bin/bash potato() { local dir=\"$1\" local fname=\"$2\" find \"$dir\" -iname \"*$fname\" -type f -print0 } # Use process substitution to pass the function's output to mapfile mapfile -d '' search &lt; &lt;(potato \"$1\" \"$2\") # Access array elements echo \"First member: ${search[0]}\" echo \"Last member: ${search[-1]}\" echo \"Length: ${#search[@]}\" # Process each file for file in \"${search[@]}\"; do # Display file details in a formatted way ls -lhgG --time-style=+%D \"$file\" | grep -v \"total\" | column -t done . Side note: The print0 option of the find command command is used to handle files with special characters in the name (ex. spaces). print0 tells find to separate filenames with a null character (\\0) instead of a newline. 6.3. Using an associative array . #!/bin/bash # Function to get disk usage as an associative array get_disk_usage() { declare -A disk_info local df_output df_output=$(df -h / | tail -1) disk_info[total]=$(echo \"$df_output\" | awk '{print $2}') disk_info[used]=$(echo \"$df_output\" | awk '{print $3}') disk_info[available]=$(echo \"$df_output\" | awk '{print $4}') disk_info[usage_percent]=$(echo \"$df_output\" | awk '{print $5}') # Return the associative array echo \"$(declare -p disk_info)\" } # Call the function and capture the associative array eval \"$(get_disk_usage)\" # Access and display the values from the associative array echo \"Disk Usage Information for '/':\" echo -e \"Total Space:\\t${disk_info[total]}\" echo -e \"Used Space:\\t${disk_info[used]}\" echo -e \"Avail. Space:\\t${disk_info[available]}\" echo -e \"Usage %:\\t${disk_info[usage_percent]}\" . Side Note: declare -p disk_info outputs the array definition as a string that can be re-evaluated using eval. ",
    "url": "/bash/functions/#6-move-advanced-examples-of-functions",
    
    "relUrl": "/bash/functions/#6-move-advanced-examples-of-functions"
  },"294": {
    "doc": "Bash Functions",
    "title": "Bash Functions",
    "content": ". | . | Bash Basic function | . | . | Return an exit status | . | . | Returning values with variables | . | . | Returning value with command substitution | . | . | Can I return a status code and value at the same time? . | 5.1. Whats up with the arguments? | . | . | . | Move advanced examples of functions . | 6.1. Returning the content of an array | 6.2. Returning an array with mapfile | 6.3. Using an associative array | . | . | . ",
    "url": "/bash/functions/",
    
    "relUrl": "/bash/functions/"
  }
}

{"0": {
    "doc": "Welcome to the course",
    "title": "Welcome to CIS-106-Linux Fundamentals",
    "content": "Here you will find all the information for the course. ",
    "url": "/#welcome-to-cis-106-linux-fundamentals",
    
    "relUrl": "/#welcome-to-cis-106-linux-fundamentals"
  },"1": {
    "doc": "Welcome to the course",
    "title": "COURSE LEARNING OUTCOMES",
    "content": ". | Demonstrate fluency in Linux terminology. | Install Linux and identify features of various distributions. | Manage files in the Linux environment. | Administer user accounts and groups efficiently. | Use Linux Utilities to manage data. | Install software and third-party utilities. | Managing Resources in the Linux networking environment. | Understanding of virtualization with Virtualbox | Understanding of Markdown and proper documentation techniques | . ",
    "url": "/#course-learning-outcomes",
    
    "relUrl": "/#course-learning-outcomes"
  },"2": {
    "doc": "Welcome to the course",
    "title": "Technologies Learned/Used",
    "content": ". | Ubuntu: is the modern, open source operating system on Linux for the enterprise server, desktop, cloud, and IoT. | VirtualBox: is a powerful x86 and AMD64/Intel64 virtualization product for enterprise as well as home use. | Markdown: is a lightweight markup language for creating formatted text using a plain-text editor. | Slack: is an instant messaging program designed by Slack Technologies and owned by Salesforce. | VS Code: is a code editor redefined and optimized for building and debugging modern web and cloud applications. | . ",
    "url": "/#technologies-learnedused",
    
    "relUrl": "/#technologies-learnedused"
  },"3": {
    "doc": "Welcome to the course",
    "title": "Requirements",
    "content": ". | Access to a computer where Linux can be installed. The following are options: . | A virtual machine (Preferred) | A laptop/Desktop computer that you can wipe. | . | Access to Blackboard | A Github account | A Text editor. We will be using VS Code but you can use whatever you want | 2 Hours of study time | Capable of adjusting to fast paced course | For virtualization . | A decent PC that meets or exceeds these requirements: . | Quad-Core Processor or modern Dual-Core Processor 2.5 Ghz | 8 Gb of RAM | Windows 10/11 | 100 Gb of free space | . | . | Knowledge of the following . | Basic components of a personal computer . | Basic usage of a personal computer | Internet browsing | Reading emails | Chat Applications | Office Productivity Suites (MS Office, Google Docs, etc) | Install/Remove Software | Difference between web browser, the internet, and a search engine Not knowing this things does not mean you will fail the course. It means that you will have to spend extra time studying. | . | . | . ",
    "url": "/#requirements",
    
    "relUrl": "/#requirements"
  },"4": {
    "doc": "Welcome to the course",
    "title": "Advice",
    "content": ". | If you find that the content of the course is too much or that you have too many gaps in your knowledge, I suggest that you take this course after CIS 180 and CIS 116. | If you do not have a decent computer (one that can be used for virtualization) you will have a very poor experience in this course. For this reason, I have alocated a computer in the lab (H311) that you can use. You will need to contact me ahead of time so I can setup a user for you. | . ",
    "url": "/#advice",
    
    "relUrl": "/#advice"
  },"5": {
    "doc": "Welcome to the course",
    "title": "Resources",
    "content": ". | Books . | The Linux Command Line By William Shotts | Raspberry Pi Beginner’s Guide 4th Edition | Free Linux Magazine with good command line reference | Free book. wont be used but it is good to have | Raspberry Models Comparison | . | Github Markdown . | Github Markdown Syntax Cheat sheet | Github Markdown syntax official documentation | Git Cheat sheet | Linux cheat sheets | . | . ",
    "url": "/#resources",
    
    "relUrl": "/#resources"
  },"6": {
    "doc": "Welcome to the course",
    "title": "Welcome to the course",
    "content": ". ",
    "url": "/",
    
    "relUrl": "/"
  },"7": {
    "doc": "Module 1 What is Linux?",
    "title": "Module 1 What is Linux?",
    "content": " ",
    "url": "/modules/module1/",
    
    "relUrl": "/modules/module1/"
  },"8": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 1: Introduction to the course.",
    "content": ". | Presentations . | Introduction to the course | . | Video here | How to join our Slack Workspace video here | How to create a github account repository video here | Week Report One video here . | What is Git and Github? | Markdown Presentation | . | Lab 1 video here | . | . ",
    "url": "/modules/module1/#lecture-1-introduction-to-the-course",
    
    "relUrl": "/modules/module1/#lecture-1-introduction-to-the-course"
  },"9": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 2: Introduction to Linux",
    "content": ". | Presentations . | Introduction to Linux | The basics of Virtualization | Using VirtualBox | Installing Ubuntu 24.04 in virtualbox | . | . ",
    "url": "/modules/module1/#lecture-2-introduction-to-linux",
    
    "relUrl": "/modules/module1/#lecture-2-introduction-to-linux"
  },"10": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 3: The desktop environment",
    "content": ". | Presentations . | Exploring Desktop Environments | What is a Shell? | Managing Software | . | . ",
    "url": "/modules/module1/#lecture-3-the-desktop-environment",
    
    "relUrl": "/modules/module1/#lecture-3-the-desktop-environment"
  },"11": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Module 2 Using Ubuntu",
    "content": " ",
    "url": "/modules/module2/",
    
    "relUrl": "/modules/module2/"
  },"12": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 4: Managing Files and directories",
    "content": ". | The Linux filesystem . | Alternative Link | . | Managing files and directories . | Alternative link | . | Wildcards . | Alternative link | . | Shell Scripting - Getting user input . | Alternative link | . | . ",
    "url": "/modules/module2/#lecture-4-managing-files-and-directories",
    
    "relUrl": "/modules/module2/#lecture-4-managing-files-and-directories"
  },"13": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 5: Handling Text Files",
    "content": ". | Handling Text Files . | Alternative Link | . | The Basics of Vim . | Alternative Link | . | How to Use Nano on Linux / Mac | Shell Scripting - Control Statements . | Alternative | . | . ",
    "url": "/modules/module2/#lecture-5-handling-text-files",
    
    "relUrl": "/modules/module2/#lecture-5-handling-text-files"
  },"14": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 6: Permissions",
    "content": ". | File permissions . | Alternative Link | . | Managing data . | Alternative Link | . | Managing users . | Alternative Link | . | . ",
    "url": "/modules/module2/#lecture-6-permissions",
    
    "relUrl": "/modules/module2/#lecture-6-permissions"
  },"15": {
    "doc": "Module 3 Administration",
    "title": "Module 3 Administration",
    "content": " ",
    "url": "/modules/module3/",
    
    "relUrl": "/modules/module3/"
  },"16": {
    "doc": "Module 3 Administration",
    "title": "Lecture 7",
    "content": ". | Managing processes | Basic Networking protocols | . ",
    "url": "/modules/module3/#lecture-7",
    
    "relUrl": "/modules/module3/#lecture-7"
  },"17": {
    "doc": "Module 3 Administration",
    "title": "Lecture 8",
    "content": ". | Shell scripting | . ",
    "url": "/modules/module3/#lecture-8",
    
    "relUrl": "/modules/module3/#lecture-8"
  },"18": {
    "doc": "Module 3 Administration",
    "title": "Lecture 9",
    "content": ". | Scheduling Tasks | . ",
    "url": "/modules/module3/#lecture-9",
    
    "relUrl": "/modules/module3/#lecture-9"
  },"19": {
    "doc": "Week Report 1",
    "title": "Week Report 1",
    "content": "Video here . ",
    "url": "/week_report:/wr1",
    
    "relUrl": "/week_report:/wr1"
  },"20": {
    "doc": "Week Report 1",
    "title": "List of Tasks",
    "content": "For this week, complete the following tasks. | Install Slack in your phone and/or computer (I suggest both) | Complete Discussion Board 1 - Open Source. | Watch this video so that you are familiar of what git and github are | Watch this video so that you are familiar with VS Code’s interface | Complete Lab 1 - Learning Markdown | Complete Notes 1. The instructions are in Blackboard. Do this last please because there is no video for notes 1. | . ",
    "url": "/week_report:/wr1#list-of-tasks",
    
    "relUrl": "/week_report:/wr1#list-of-tasks"
  },"21": {
    "doc": "Week Report 1",
    "title": "What will you submit:",
    "content": "Step 1 Prepare your submission . | Create a folder in your documents directory called: weekReports | Inside weekReport, create a markdown file called wr1.md | Start VS Code and open the folder weekReports | In the file, wr1.md type the following: | . --- name: your name assignment: week report 1 course: cis106 semester: spring 23 --- # Week Report 1 Submission ## Slack Screenshot take a screenshot of slack and place it here ## Github Screenshot take a screenshot of your github account and place it here . | Once you have placed the screenshots in your markdown file, save the file and convert the file to pdf | Upload all the files inside the weekReports folder to github. | . Step 2 Submit . | In blackboard, in week report 1, submit the following: . | The URL to your github repository | The PDF file of your week report 1 | . | . ",
    "url": "/week_report:/wr1#what-will-you-submit",
    
    "relUrl": "/week_report:/wr1#what-will-you-submit"
  },"22": {
    "doc": "Week Report 1",
    "title": "How will you be graded:",
    "content": ". | Github Repository URL: 50pts | PDF File with the screenshots: 50pts | . ",
    "url": "/week_report:/wr1#how-will-you-be-graded",
    
    "relUrl": "/week_report:/wr1#how-will-you-be-graded"
  },"23": {
    "doc": "Week Report 2",
    "title": "Week Report 2",
    "content": " ",
    "url": "/week_report:/wr2",
    
    "relUrl": "/week_report:/wr2"
  },"24": {
    "doc": "Week Report 2",
    "title": "Video Here",
    "content": "Week Report 2 Spring 24 . ",
    "url": "/week_report:/wr2#video-here",
    
    "relUrl": "/week_report:/wr2#video-here"
  },"25": {
    "doc": "Week Report 2",
    "title": "Complete the following tasks",
    "content": ". | Complete lab 2 - Installing Ubuntu 24.04. | If you have not done so, complete week report 1, lab 1 and Discussion Board 1. You cannot complete Lab 2 if you have not catched up! | Complete Discussion Board 2 - The history of Linux. Note: you can do this later as the due date is the end of the semester. | Complete Notes 2. This and everything else from this point on must be completed inside Ubuntu Desktop 24.04 (your virtual machine). Windows/MacOS will no longer be used. Therefore you MUST complete lab 2 before attempting the report and the notes. | Complete this week’s Week Report. | . ",
    "url": "/week_report:/wr2#complete-the-following-tasks",
    
    "relUrl": "/week_report:/wr2#complete-the-following-tasks"
  },"26": {
    "doc": "Week Report 2",
    "title": "What will you include in your notes?",
    "content": "Note: folder and directory mean the same thing! . | Create a folder inside your CIS106 folder called notes | Inside the notes directory/folder create a new folder called notes1 and notes2 | Move the files that are related to notes1 to the notes1 directory/folder. | Open the cis106 directory/folder inside vs code. | Using vs code file manager, create a file inside the notes2 directory called notes2.md | In the file notes2.md, answer the following questions. Make sure to use proper markdown syntax to make your notes file look presentable. Use headings, paragraphs and bullet point formatting. This, at a minimun, should make your file look presentable. NO SCREENSHOTS! All the information to answer the questions can be found in the Lecture 2 presentation Introduction to Linux and The basics of virtualization | . Lecture 2 Introduction to Linux Notes (this is the tittle of the document - Heading 1 formatting please!) 1. What is an Operating System? 2. What is a kernel? 3. Which other parts aside from the kernel identfy an OS? 4. What is linux? 5. What is a linux distribution? 6. List at least 4 linux characteristics: 7. What is Ubuntu? 8. What is Debian? 9. List and define the different types of licensing agreements 10. What is Free Software? Define the 4 freedoms. 11. What is virtualization? 12. List 3 benefits of virtualization 13. What is a hypervisor? Include definitions of the 2 types 14. What is the difference between Guest OS and Host OS? 15. What is virtualbox? . ",
    "url": "/week_report:/wr2#what-will-you-include-in-your-notes",
    
    "relUrl": "/week_report:/wr2#what-will-you-include-in-your-notes"
  },"27": {
    "doc": "Week Report 2",
    "title": "What will you submit for your week report:",
    "content": "Note: Since you already completed lab2, the remaining of the work in this course will be completed inside the Ubuntu virtual machine. Windows/MacOS will not be used for the remaining of the course!!! PLEASE DO NOT EDIT OR UPLOAD FILES TO GITHUB VIA THE WEBSITE. You must use VS Code Terminal to commit and push to your repository. If you decide to ignore this. You are on your own. If you don’t understand, please ask! This report can only be completed after lab 2! . | Create a folder inside the weekReports folder called wr2. You probably did this already during lab 2. | Open the cis106 folder in VS Code | Inside the wr2 folder, create a file called wr2.md | Add a link to your notes and lab2 markdown files in github. | Add a screenshot of your Ubuntu Desktop with a terminal open or firefox in the cis106.com website | Convert the wr2.md file to pdf | Push all the changes to github | In blackboard, submit the URL to the wr2.md file and the pdf file wr2.pdf | . ",
    "url": "/week_report:/wr2#what-will-you-submit-for-your-week-report",
    
    "relUrl": "/week_report:/wr2#what-will-you-submit-for-your-week-report"
  },"28": {
    "doc": "Week Report 2",
    "title": "Special Note 1",
    "content": "Please take a snapshot of your virtual machine after you complete the report. The virtual machine is must be off before you take the snapshot. This process is show in the video . Special Note 2 . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . ",
    "url": "/week_report:/wr2#special-note-1",
    
    "relUrl": "/week_report:/wr2#special-note-1"
  },"29": {
    "doc": "Week Report 3",
    "title": "Week Report 3",
    "content": " ",
    "url": "/week_report:/wr3",
    
    "relUrl": "/week_report:/wr3"
  },"30": {
    "doc": "Week Report 3",
    "title": "Video here",
    "content": "Week Report 3 . Note: This cannot be completed if you have not completed lab 2. 1. Study/Read/Review: . | Review the following presentation: . | What is a Shell? | Managing Software | . | . 2. Add new cheat sheet . | Download the managing software cheat sheet (one is fine but I suggest the second one) and place it in the cheatSheet directory/folder. | . 3. Complete the lecture’s practice . | In the presentation: What is a shell?, you will find 7 practice exercises. | Complete each practice and take a screenshot of the terminal when you finish with each practice. | Place the screenshots in the week report 3 directory located in the following path: cis106/weekReports/wr3/ | If you do not have a directory/folder for wr3, make it! | Complete practice 1 and 3 in the presentation Managing Software and take a screenshot of the terminal. | . 4. Complete class notes: . | Create a markdown file that includes the following: . | Definition, usage, and examples of the following commands: . | echo | date | free | uname | history | man | apt | snap | flatpak This video contains an example from last semester. | . | . | . 5. Complete week report 3 . | Inside the wr3 directory/folder, create a markdown file called wr3.md | The wr3.md file must include the following: . | Heading 1: Week Report 3 | Heading 2: Completed work for week 3 | A bulleted list of the following URLs: . | Link to lab3.md (you have not created this file yet therefore you need to create this file and put some place holder text in it) | Link to notes3.md | . | Heading 2: Practice . | Heading 3:Practice 1 . | Screenshot of practice 1 | . | Heading 3:Practice 2 . | Screenshot of practice 2 | . | Heading 3:Practice 3 . | Screenshot of practice 3 | . | Heading 3:Practice 4 . | Screenshot of practice 4 | . | Heading 3:Practice 5 . | Screenshot of practice 5 | . | Heading 3:Practice 6 . | Screenshot of practice 6 | . | Heading 3:Practice 7 . | Screenshot of practice 7 | . | Heading 3:Practice 1 - Managing Software . | Screenshot of practice 1ms | . | Heading 3:Practice 3 - Managing Software . | Screenshot of practice 3ms | . | . | . | . 6. Complete lab 3 . | Video here | . ",
    "url": "/week_report:/wr3#video-here",
    
    "relUrl": "/week_report:/wr3#video-here"
  },"31": {
    "doc": "Week Report 3",
    "title": "What will you submit:",
    "content": ". | Convert wr3.md to pdf | Push everything to github: | In blackboard submit: . | URL to wr3.md in github | The pdf file wr3.pdf | . | . Special Note 2 . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/week_report:/wr3#what-will-you-submit",
    
    "relUrl": "/week_report:/wr3#what-will-you-submit"
  },"32": {
    "doc": "Week Report 4",
    "title": "Week Report 4",
    "content": ". | The Linux File System Presentation | Ls Command Cheat Sheet | Absolute Path and Relative Path Cheat sheet | Video here | . ",
    "url": "/week_report:/wr4",
    
    "relUrl": "/week_report:/wr4"
  },"33": {
    "doc": "Week Report 4",
    "title": "Complete the following tasks",
    "content": "1. Complete Week Report 4. Your report must contain the following: . | Create a file inside the weekReports directory that is located inside the cis106 directory. Name this file, wr4.md | You will complete the week report inside the wr4.md file. Your report must contain: . | Screenshots from each practice from the presentation The Linux File system: . | Take a screenshot of your terminal showing all the commands, or most of the commands, you used to complete each practice. | Place all your screenshots in your week report 4 file. | Make sure to label each practice using heading 2 or heading 3 markdown formatting. | . | . | . 2. Complete Notes 4 . All the information can be found here: . | Presentation | Article | . | Create a file in the clasNotes directory named notes2.md | The file must be properly formatted using bold, code formatting and headings | The file must contain the following: . | Each of the commands used for navigating the file system . | for each command include: Description, usage/formula, and examples (3 or more if available) | . | . | Definitions of the following terms: . | File system | pathname | Absolute path | Relative path | The difference between your home directory and the home directory | parent directory | child directory or subdirectory | Bash special characters | environment variables | user defined variables | Why do we need use $ with variables in bash shell scripting? | . | . 3. Complete lab 4 The linux File System . | Please do this after you complete the Week report and class notes! Trust me, it is better this way. | Instructions here | . 4. Complete discussion boards . | Work on your next discussion board | . Special Note: Git Commands Reminder . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/week_report:/wr4#complete-the-following-tasks",
    
    "relUrl": "/week_report:/wr4#complete-the-following-tasks"
  },"34": {
    "doc": "Week Report 5",
    "title": "Week Report 5",
    "content": ". | Presentation here | Video here | . ",
    "url": "/week_report:/wr5",
    
    "relUrl": "/week_report:/wr5"
  },"35": {
    "doc": "Week Report 5",
    "title": "Complete the following tasks",
    "content": "1. Notes 5 . Notes 5 must include . | The following commands: . | mkdir | touch | rm | rmdir | mv | cp | file | . | . For every command include the following: . | Usage, formula, and examples (at least 3) | . Please use this article here as and example of what proper markdown usage looks like. You should use: inline code formatting, headings, etc. Here is an illustrated example using ls. I will take points off for improper formatting Please! make sure to document good examples. All of these commands (except rmdir) will be used in your final exam. Remember, you can use your notes in your final exam therefore having proper examples with good explanations will help you tremendously . 2. Week report 5 . | Complete all the practice in the managing files and directories presentation. Take a screenshot of your terminal showing most if not all of the commands used in each practice. Make sure to label each screenshot using heading 2 or 3 (just like week report 4) | . 3. Complete lab 5 . | Presentation here | Video here | . 4. Start working on your final project deliverable 1 or deliverable 2 if you finished deliverable 1 . | Starting this week, you should dedicate at least 20 minutes per week to your final project. The project is lengthy and I do not recommend waiting for the last minute because something always go wrong. | . 5. Complete 1 of the discussion boards . | You should do at least 1 reply per week until you have completed the discussion boards. Normally, 10 minutes per week will allow you to finish them on time. | . What will you submit: . It should be obvious by now but just in case: . | Convert wr5.md to pdf | Push everything to github: | In blackboard submit: . | URL to wr5.md in GitHub | The pdf file wr5.pdf | . | . Special Note . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/week_report:/wr5#complete-the-following-tasks",
    
    "relUrl": "/week_report:/wr5#complete-the-following-tasks"
  },"36": {
    "doc": "Week Report 6",
    "title": "Week Report 6",
    "content": "video here . ",
    "url": "/week_report:/wr6",
    
    "relUrl": "/week_report:/wr6"
  },"37": {
    "doc": "Week Report 6",
    "title": "Complete the following tasks",
    "content": ". | Complete notes 6 | Complete Week Report 6 | Complete Lab 6 | Work on your final project | . ",
    "url": "/week_report:/wr6#complete-the-following-tasks",
    
    "relUrl": "/week_report:/wr6#complete-the-following-tasks"
  },"38": {
    "doc": "Week Report 6",
    "title": "Notes 6",
    "content": ". | Explain how to use each of the wildcards (*, ?, and []) | Explain how to use brace expansion ({}) | Include at least 3 examples of each | There is an article in the website that can help you here. | I suggest that you copy the table that explains each wildcard and has an example. It will be useful in your final exam. | . ",
    "url": "/week_report:/wr6#notes-6",
    
    "relUrl": "/week_report:/wr6#notes-6"
  },"39": {
    "doc": "Week Report 6",
    "title": "What will you submit for your week report:",
    "content": ". | Complete every practice in the wildcards presentation | Take a screenshot of your terminal showing most if not all of the commands used in each practice. | Make sure to label each screenshot using heading 2 or 3 (just like week report 5) | Convert the file to pdf | Push everything to Github | In Blackboard, submit the pdf file for week report 6 and the Github url of the wr6.md file | . Special Note . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/week_report:/wr6#what-will-you-submit-for-your-week-report",
    
    "relUrl": "/week_report:/wr6#what-will-you-submit-for-your-week-report"
  },"40": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "content": "This is the default lab 2. There are other versions of this lab: . | Lab 2 - Installing Ubuntu For M Series Macs | . This version of Lab 2 is for Windows users (Windows 11 or 10) or Macbooks with capable Intel CPU. The alternative Lab 2 is for M series Macbooks because Virtualbox does not run on M Series Mac. Because your computer is not my computer, there can be issues that I have no way of accounting for. Other versions of this lab can me made upon request. I can also meet with you or work over zoom if you are having any issues. All I ask is that you are mindful of my time and yours. Do not wait till the last minute!! . ",
    "url": "/labs/Lab2_new/",
    
    "relUrl": "/labs/Lab2_new/"
  },"41": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Video here",
    "content": "Lab 2 Installing Ubuntu 22.04 Windows Version . ",
    "url": "/labs/Lab2_new/#video-here",
    
    "relUrl": "/labs/Lab2_new/#video-here"
  },"42": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Table of Contents",
    "content": ". | Lab 2 - Installing Ubuntu For Windows Users And Intel Macs . | Video here | Table of Contents | Presentations: | Requirements | Step 1: Enable Virtualization . | REQUIRED SPECIFICATIONS: | . | Step 2: Create a Virtual Machine | Step 3: Install Ubuntu | Step 4: Optimizing Ubuntu for the class . | Update and upgrade | Install Essential packages: | Install the guest additions for virtualbox - Option 2 | . | Step 5: Setup Git | Step 6: Install VS Code Extensions | Step 7: Setting up Gnome Screenshot Tool | Time to submit this lab . | Special Note 1 | Special Note 2 | . | . | . ",
    "url": "/labs/Lab2_new/#table-of-contents",
    
    "relUrl": "/labs/Lab2_new/#table-of-contents"
  },"43": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Presentations:",
    "content": ". | The basics of Virtualization | Using VirtualBox | Installing Ubuntu 20.04 in VirtualBox | . ",
    "url": "/labs/Lab2_new/#presentations",
    
    "relUrl": "/labs/Lab2_new/#presentations"
  },"44": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Requirements",
    "content": ". | Please go over the presentations before you do this lab. It will give you an idea of what we are trying to do here. | Please go slow and take your time to do this lab. It is long but it is the core of this course. | If you do not have a computer that meets the recommended criteria, please reach out to me and stop doing this lab. | . NOTE! . | If your computer does not meet the required hardware, you will have a hard time completing all the work and the final project therefore be ready for some slow downs! | . ",
    "url": "/labs/Lab2_new/#requirements",
    
    "relUrl": "/labs/Lab2_new/#requirements"
  },"45": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 1:  Enable Virtualization",
    "content": "Before you can create virtual machines, you need to know if your computer can run virtual machines. There are a couple of steps you need to follow to find out the answer to this question: . | Find out what hardware your computer has: . | CPU and number of cores | Amount of RAM | Amount of Free Storage | . | If your computer does not meet the criteria below, stop this lab and get in contact with me. We may be able to find an alternative for you but this can only be done on a 1 on 1 basis. | . REQUIRED SPECIFICATIONS: . | CPU: Quad core CPU | RAM: 8GB or More | Free Storage: 60GB or more | . If you do not meet these requirements but your computer is close enough, you may be able to complete the course material. The downside is that your computer will be extremely slow. If your computer meets or exceeds the above capabilities, then you need to check if virtualization is enabled. Follow this guide to know if your computer has virtualization enabled and if it does not, use the same guide to learn how to enable it. You can also use Speccy to find out if your computer has virtualization enabled. If you are having troubles enabling virtualization, let me know immediately. DO NOT WAIT FOR THE LAST MINUTE! This part can take time! . ",
    "url": "/labs/Lab2_new/#step-1--enable-virtualization",
    
    "relUrl": "/labs/Lab2_new/#step-1--enable-virtualization"
  },"46": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 2:  Create a Virtual Machine",
    "content": "Before you can create virtual machines, you need to install VirtualBox and VirtualBox Extension Pack. To download Vbox and the extension pack go to: . | Virtualbox Download Page | Microsoft Visual C++ Redistributable | . Make sure to select the right installer for your operating system: . Make sure to install VirtualBox in your host computer. For Windows follow this video. For macOS follow this video. Once you have installed VirtualBox, create a virtual machine that meets these specifications: . | OS: Ubuntu 24.04 64Bits ISO URL | HDD: 50 GB | RAM: 4GB | Video: 128 MB | Audio Controller: Disabled (audio won’t be needed) | CPU: 2 Cores | Add this to description: | Hostname: cis106vm | User: student name (use your blackboard username or any other username of your choice) | Password: pccc | Shared Clipboard: Enabled - Bidirectional | Drag n’ Drop: Enabled - Bidirectional | . | virtual machine settings | . | | . ",
    "url": "/labs/Lab2_new/#step-2--create-a-virtual-machine",
    
    "relUrl": "/labs/Lab2_new/#step-2--create-a-virtual-machine"
  },"47": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 3: Install Ubuntu",
    "content": "Go over the presentation “Installing Ubuntu 24.04 in VirtualBox 7”. There, I have laid out every step with proper explanations. The presentation is using an earlier version of Virtualbox and Ubuntu but the differences are not very significant. I will do it in the video as well but it will benefit you to read the presentation. ",
    "url": "/labs/Lab2_new/#step-3-install-ubuntu",
    
    "relUrl": "/labs/Lab2_new/#step-3-install-ubuntu"
  },"48": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 4: Optimizing Ubuntu for the class",
    "content": "Update and upgrade . | Open the terminal application and type the following command: sudo apt update &amp;&amp; sudo apt upgrade -y | The terminal will prompt you to type your password. Nothing will be shown to the screen as you type. | This may take some time depending on your internet connection and the number of available updates. | . Install Essential packages: . | Install the curl command which will then use to download a couple of script files. sudo apt install curl -y | Use curl to download and run the following script: essentials.sh | . curl https://cis106.com/assets/scripts/essentials.sh -o essentials.sh chmod +x essentials.sh ./essentials.sh rm essentials.sh . | Install VS Code: | . curl https://cis106.com/assets/scripts/vscode.sh -o vscode.sh chmod +x vscode.sh ./vscode.sh rm vscode.sh . | Install Librewolf: | . curl https://cis106.com/assets/scripts/librewolf.sh -o libre.sh chmod +x libre.sh ./libre.sh rm libre.sh . | Install Ubuntu Restricted Extras | . sudo apt install ubuntu-restricted-extras ubuntu-restricted-addons -y . When you see the screen below, use the tab key to select OK, the space key instead of enter, the arrow keys to select yes and the space bar again to agree to the terms and conditions: . Install the guest additions for virtualbox - Option 2 . | Insert the guess additions cd | Open the cd in the file manager from the Favorites bar | Right click on an empty area of the directory and click on open terminal | Run these commands: | . sudo apt install build-essential linux-headers-$(uname -r) -y sudo ./VBoxLinux . | Reboot the vm. You can use the command sudo reboot now | Now your virtual machine can use the full screen and share the clipboard with your host machine | . ",
    "url": "/labs/Lab2_new/#step-4-optimizing-ubuntu-for-the-class",
    
    "relUrl": "/labs/Lab2_new/#step-4-optimizing-ubuntu-for-the-class"
  },"49": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 5: Setup Git",
    "content": ". | Sign in to your Github account. | Open a terminal window and run the following commands: | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | Setup SSH authentication | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboard in the step prior. Type yes (the whole word) and press enter and you are done | Test you ssh connection by using this command: ssh -T git@github.com | Clone your github repository. Use these commands: cd; git clone git@github.com:yourGithub-User-Name-Here/your-Repository-Name-Here | . . ",
    "url": "/labs/Lab2_new/#step-5-setup-git",
    
    "relUrl": "/labs/Lab2_new/#step-5-setup-git"
  },"50": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 6: Install VS Code Extensions",
    "content": ". | Install the following extensions: . | Markdown All in One by Yu Zhang | Markdown PDF by yzane | Markdown Preview Enhanced by Yiyi Wang | PDF Preview by Analytic Signal Limited | Code Spell Checker by Street Side Software | . | . ",
    "url": "/labs/Lab2_new/#step-6-install-vs-code-extensions",
    
    "relUrl": "/labs/Lab2_new/#step-6-install-vs-code-extensions"
  },"51": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 7: Setting up Gnome Screenshot Tool",
    "content": "Note: The default screenshot application does not work for us. However, gnome-screenshot gives us what we need. In the past, we used to use flameshot, however, it is still not supported under Wayland therefore we will move away from Flameshot for the time being. To setup Gnome-Screenshot, follow these steps: . | Install gnome screenshot: use the following command sudo apt install gnome-screenshot -y | Open the keyboard settings in Ubuntu. | Settings -&gt; Keyboard -&gt; View Customize shortcuts -&gt; Custom Shortcuts -&gt; Click the + icon to add a new shortcut | In the dialog box add the following: . | Name: gnome-screenshot | Command: gnome-screenshot -i | . | Click the set screenshot button and press the print screen key in your keyboard or any other keyboard combination of your choosing. | Click the replace button. | Press the print screen key to test. Did it work? Chances are it did not. | For some weird reason this does not work the first time we do it, therefore, repeat the process and make sure to spell the command correctly. See the gif for reference! | . | . | . ",
    "url": "/labs/Lab2_new/#step-7-setting-up-gnome-screenshot-tool",
    
    "relUrl": "/labs/Lab2_new/#step-7-setting-up-gnome-screenshot-tool"
  },"52": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Time to submit this lab",
    "content": ". | First, lets organize the repository . | Open the file manager | Create the following folders: labs, weekReports,finalExam,cheatSheets,notes | move all the files related to lab 1 to the labs folder | Inside the lab folder create 2 folders: lab1 and lab2. From this point on, every lab will have its own folder and so will every week report. | Move all the lab 1 files to the lab1 folder | Repeat the process for the week report 1 | . | Open the cis106 folder in VS Code | Inside the lab2 folder, create a file named lab2.md | Add the following markdown to the file: | . # Lab 2 Submission ## Virtual Machine settings ![cpufetch](cpufetch.png) ![script](script.png) . | Open a terminal and run the following command: cpufetch | pv -qL 200 or simply cpufetch | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot cpufetch.png | Clear the terminal with the command: clear and run the following command: curl -s https://cis106.com/assets/scripts/lab2_system_info.sh | bash | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot script.png | Save and convert the file lab2.md file to pdf | Open the vs code terminal and enter the following commands to commit and push your changes to github: | . git pull git add . git commit -m 'lab2 finished' git push . | In blackboard submit the following: . | The URL to the lab2.md file in github | The lab2.pdf file | . | . Special Note 1 . This is a canonical lab for your learning. You will be making more virtual machines in the future. I suggest you create more virtual machines and then delete them. For example, find out what are the minimum requirements for installing windows 10 and then make a windows 10 virtual machine. Also, install other linux distributions as well. You do not need to keep these vms just use this lab to practice. Remember, when deleting virtual machines, make sure to select delete all files instead of just removing the vms. This will make sure that you recover your hard drive space. Special Note 2 . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/Lab2_new/#time-to-submit-this-lab",
    
    "relUrl": "/labs/Lab2_new/#time-to-submit-this-lab"
  },"53": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Lab 1 - Learning Markdown",
    "content": "Video here . ",
    "url": "/labs/lab1/",
    
    "relUrl": "/labs/lab1/"
  },"54": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 1: VS CODE",
    "content": ". | Install VS Code | If you find the VS Code interface complicated or too unfamiliar, watch this video before you continue with the lab. | . ",
    "url": "/labs/lab1/#question-1-vs-code",
    
    "relUrl": "/labs/lab1/#question-1-vs-code"
  },"55": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 2: Github Account",
    "content": ". | Create a github account using your PCCC email address. Make sure to save your github username, email, and password somewhere safe (like a password manager). You will need it a lot! If you already have a github account, you are allowed to use it. | Create a public repository called cis106 LOWERCASE PLEASE! . | Here is a video on how to create a github account and repository. | . | Do not close the github page, you will need it later. | . ",
    "url": "/labs/lab1/#question-2-github-account",
    
    "relUrl": "/labs/lab1/#question-2-github-account"
  },"56": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 3: Learning Markdown",
    "content": ". | In your Documents folder, create a folder called lab1 LOWERCASE PLEASE! | Enable file extensions in Windows explorer. | Read the presentation ‘What is Markdown’ | During this presentation you will complete several practice exercises. Make sure to place all the files inside the lab1 folder. | You will need some exercise files that are reference in the presentation. Use this URL to download the zip file that contains the files. Uncompress/decompress the zip file in the lab1 folder. This is not the same as opening the zip file. You will need to copy or move the files to the lab1 folder. | Download the markdown cheat sheet before you start the challenge question. The cheat sheet can be found in the presentation | . | The goal of this lab is to learn and practice markdown. | Please follow along in the video as I will be completing the practice there. | Once you complete the practice, do the challenge question | . ",
    "url": "/labs/lab1/#question-3-learning-markdown",
    
    "relUrl": "/labs/lab1/#question-3-learning-markdown"
  },"57": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 4: Challenge Question",
    "content": "Scenario: Your friend, John Doe, has asked you to make a 1 page resume for him. He has given you all his information in a text file and a picture for you to use. Since you have recently learned about markdown, you want to write his resume in markdown and then give him the PDF. | Inside the lab1 folder, create a folder called: challenegeQuestion One word, no space, camel case PLEASE! | Using markdown, create a 1 page resume for John Doe. Name the file resume.md and place it inside the challengeQuestion | Everything you need to create the markdown file was provided with the lab1.zip file you downloaded earlier. | Once the markdown file is created, convert the file to pdf. | This is how the PDF file should look like when you are done. PS. The Preview may not look like the finish product however the image and table must render correctly! | . ",
    "url": "/labs/lab1/#question-4-challenge-question",
    
    "relUrl": "/labs/lab1/#question-4-challenge-question"
  },"58": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "What will you upload to Github:",
    "content": "The entire lab1 folder. Every single file must be in your github repository! . I do this in the video so there should be no excuses. ",
    "url": "/labs/lab1/#what-will-you-upload-to-github",
    
    "relUrl": "/labs/lab1/#what-will-you-upload-to-github"
  },"59": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Submission",
    "content": "In blackboard, submit the following: . | The PDF file of ubuntu.pdf. This is the file your converted when you finished all the practice in this lab. | The MD file ubuntu.md | The md file resume.md. This is john doe’s resume. | The pdf file resume.pdf. This is john doe’s resume in pdf format. | The URL to your github repository . | . ",
    "url": "/labs/lab1/#submission",
    
    "relUrl": "/labs/lab1/#submission"
  },"60": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Here is how I will grade you:",
    "content": ". | I will go to your github repository, I will check that you complete all the practice from the video that is 25 points. Having the ubuntu.md file complete is proof of this | I will check that you completed the challenge question that is 50 points. Having the resume.md file properly formatted is proof of this. | If I cannot find the files in Github, you will not be awarded a passing grade for this lab. | I will check that you uploaded all the files I asked for in blackboard. This is 25 Points. | . Late submissions will be penalized 30 points. See blackboard for due date . If you need more practice in markdown, see the Extra Section of the page. There you will find an extra practice for this lab. We can review your work on a 1:1 meeting at the time of your choosing as long as I have availability via Zoom. ",
    "url": "/labs/lab1/#here-is-how-i-will-grade-you",
    
    "relUrl": "/labs/lab1/#here-is-how-i-will-grade-you"
  },"61": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "content": " ",
    "url": "/labs/lab2_m_sereires_mac/",
    
    "relUrl": "/labs/lab2_m_sereires_mac/"
  },"62": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Video Here",
    "content": "Lab 2 Installing Ubuntu M Series Macs (M1/M2 CPUS) . | Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks . | Video Here | Note | Step 1: Download Hypervisor | Step 2: Create the virtual machine | Step 3: Install Ubuntu Server | Step 4: Update the system and install a desktop environment | Step 5: Install essential software | Step 6: Setting up Gnome Screenshot Tool | Step 7: Setup VS Code | Step 8: Setup Git and Github | Time to submit this lab | Known issues: | Special Note | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#video-here",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#video-here"
  },"63": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Note",
    "content": "This Lab is exclusive for students using M1/M2 Series Macbooks/Mac Mini. This lab assumes the following about your computer: . | CPU: M1 or M2 | Ram: 16 GB | OS: Mac OS Sonnoma Latest version | . This lab assumes the following about you: . | You can follow instructions | You have basic understanding of your computer’s hardware | . ",
    "url": "/labs/lab2_m_sereires_mac/#note",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#note"
  },"64": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 1: Download Hypervisor",
    "content": "Download the following applications: . | UTM Hypervisor for M series Macs | Ubuntu Server For ARM ISO file | . | Install UTM. | Do not touch/open/mount the Ubuntu ISO file. | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-1-download-hypervisor",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-1-download-hypervisor"
  },"65": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 2: Create the virtual machine",
    "content": "Create a virtual machine for Ubuntu Server . | Launch UTM. Select “Create a New Virtual Machine” | Here you will have 2 options. | Emulate: This is for x86_64. This option is slower but it will give you the same version of Ubuntu that the Windows users virtualize in Virtualbox. We will not be using this option on Mac. | Virtualize: this is for ARM64 operating system like the Ubuntu Server ISO we downloaded earlier. Most of the software we are going to use is available for ARM so there should not be much difference in the Labs for you | . | Select “Virtualize” | Select “Linux” for the Operating System options | In the “Boot ISO Image” section, click on the browser button and select the Ubuntu Server ISO you downloaded earlier. | In the “Hardware” configuration window, select the following: . | RAM: 4096 MB | CPU Cores: 2 | Note: *We won’t be using OpenGL hardware acceleration for now, but if you start having graphics issues, enable this feature and see if it helps. This is an experimental feature so for now let’s keep it safe. * | . | In the “Storage” section, set the disk size to 50Gb. That is just enough for our class. If you want to give it more storage, you can. | In the “Shared Directory” section, keep the defaults as is. We will not be needing a shared directory. But if you want to have a shared directory between then Host (mac) and Guest(Ubuntu), go ahead and play around with it. I leave this up to you. There are tons of guides on how to do this. | In the “Summary” Section, set the Name to Ubuntu Desktop . | The Virtual Machine settings window will open. | Add the following in the notes: . | Hostname: cis106 | username: your blackboard username - or a preferred username | password: pccc (we are going to keep things simple to help troubleshooting) | . | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-2-create-the-virtual-machine",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-2-create-the-virtual-machine"
  },"66": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 3: Install Ubuntu Server",
    "content": ". | Start the VM by pressing the Play button | If you see a message screen that reads “Display Output is not active” ignore it. The VM is just starting | Follow the steps to install Ubuntu server as laid out in the guides: How to install Ubuntu Server 24.04 | . Notes: 1. We will install the Server Edition of Ubuntu. The server does not have a graphical installer but it is easy anyways. 2. Later we will install a graphical desktop environment . | Once the OS has been installed, reboot the VM. If the VM seems to be hanging, manually reboot it. Before the disk boots the installer again, turn off the VM. | Remove the Ubuntu Server ISO file from the virtual DVD Drive. | Turn on the Virtual Machine and sign in. Use your username and password you set during the installation process | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-3-install-ubuntu-server",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-3-install-ubuntu-server"
  },"67": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 4: Update the system and install a desktop environment",
    "content": "Run these commands one at the time: . sudo apt update sudo apt upgrade -y sudo apt install ubuntu-desktop -y sudo reboot now . Note: We will be using Gnome but you are welcome to use any other desktop environment. This will install Ubuntu’s spin of the Gnome Desktop environment. A lot of packages will be installed, so this step will take time . Now that you have a desktop environment, let’s configure the rest of the system: . | Do not enable Ubuntu Pro | Ignore any error reporting. We will disable this anyway | Some users have reported issues with full screen so if you are having issues, just don’t use full screen. | Open a terminal window. Type this command to disable animations: gsettings set org.gnome.desktop.interface enable-animations false | Remove the error reporting software and other applications we won’t need: sudo apt purge apport aisleriot gnome-mahjongg gnome-sudoku | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-4-update-the-system-and-install-a-desktop-environment",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-4-update-the-system-and-install-a-desktop-environment"
  },"68": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 5: Install essential software",
    "content": ". | Install the curl command which will then use to download a couple of script files. sudo apt install curl -y | Use curl to download and run the following script: essentials.sh | . curl https://cis106.com/assets/scripts/essentials.sh -o essentials.sh chmod +x essentials.sh ./essentials.sh rm essentials.sh . | Install VS Code: | . curl https://cis106.com/assets/scripts/vscode.sh -o vscode.sh chmod +x vscode.sh ./vscode.sh rm vscode.sh . | Install Ubuntu Restricted Extras | . sudo apt install ubuntu-restricted-extras ubuntu-restricted-addons -y . When you see the screen below, use the tab key to select OK, the space key instead of enter, the arrow keys to select yes and the space bar again to agree to the terms and conditions: . ",
    "url": "/labs/lab2_m_sereires_mac/#step-5-install-essential-software",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-5-install-essential-software"
  },"69": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 6: Setting up Gnome Screenshot Tool",
    "content": "Note: The default screenshot application does not work for us. However, gnome-screenshot gives us what we need. In the past, we used to use flameshot, however, it is still not supported under Wayland therefore we will move away from Flameshot for the time being. To setup Gnome-Screenshot, follow these steps: . | Install gnome screenshot: use the following command sudo apt install gnome-screenshot -y | Open the keyboard settings in Ubuntu. | Settings -&gt; Keyboard -&gt; View Customize shortcuts -&gt; Custom Shortcuts -&gt; Click the + icon to add a new shortcut | In the dialog box add the following: . | Name: gnome-screenshot | Command: gnome-screenshot -i | . | Click the set screenshot button and press the print screen key in your keyboard or any other keyboard combination of your choosing. | Click the replace button. | Press the print screen key to test. Did it work? Chances are it did not. | For some weird reason this does not work the first time we do it, therefore, repeat the process and make sure to spell the command correctly. See the gif for reference! | . | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-6-setting-up-gnome-screenshot-tool",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-6-setting-up-gnome-screenshot-tool"
  },"70": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 7: Setup VS Code",
    "content": "Install the following extensions: . | Markdown All in One by Yu Zhang | Markdown by starkwang | Markdown PDF by yzane | Markdown Preview Enhanced by Yiyi Wang | PDF Preview by Analytic Signal Limited | Code Spell Checker by Street Side Software | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-7-setup-vs-code",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-7-setup-vs-code"
  },"71": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 8: Setup Git and Github",
    "content": ". | Sign in to your Github account. | Open a terminal window and run the following commands: | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | Setup SSH authentication | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboard in the step prior. Type yes (the whole word) and press enter and you are done | Test you ssh connection by using this command: ssh -T git@github.com | Clone your github repository. Use these commands: cd; git clone git@github.com:yourGithub-User-Name-Here/your-Repository-Name-Here | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-8-setup-git-and-github",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-8-setup-git-and-github"
  },"72": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Time to submit this lab",
    "content": ". | First, lets organize the repository . | Open the file manager | Create the following folders: labs, weekReports,finalExam,cheatSheets,notes | move all the files related to lab 1 to the labs folder | Inside the lab folder create 2 folders: lab1 and lab2. From this point on, every lab will have its own folder and so will every week report. | Move all the lab 1 files to the lab1 folder | Repeat the process for the week report 1 | . | Open the cis106 folder in VS Code | Inside the lab2 folder, create a file named lab2.md | Add the following markdown to the file: | . # Lab 2 Submission ## Virtual Machine settings ![cpufetch](cpufetch.png) ![script](script.png) . | Open a terminal and run the following command: cpufetch | pv -qL 200 or simply cpufetch | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot cpufetch.png | Clear the terminal with the command: clear and run the following command: curl -s https://cis106.com/assets/scripts/lab2_system_info.sh | bash | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot script.png | Save and convert the file lab2.md file to pdf | Open the vs code terminal and enter the following commands to commit and push your changes to github: | . git pull git add . git commit -m 'lab2 finished' git push . | In blackboard submit the following: . | The URL to the lab2.md file in github | The lab2.pdf file | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#time-to-submit-this-lab",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#time-to-submit-this-lab"
  },"73": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Known issues:",
    "content": ". | Markdown PDF converter does not work: . | Solution: Install Chromium-browser: sudo apt install chromium-browser | Open the extensions settings: . | Navigate to the executable path and type: /snap/bin/chromium | If the machine freezes at this step, reboot and force close the Virtual Machine and UTM. | . | . | Ghosting when typing in the VS Code integrated Terminal: . | Workaround: . | Open a regular terminal | Navigate to the cis106 directory: cd cis106 | Run the git commands from there: . | git pull | git add . | git commit -m \"changes\" | git push | . | . | Note: I have not found a real solution for this yet. | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#known-issues",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#known-issues"
  },"74": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Special Note",
    "content": "You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab2_m_sereires_mac/#special-note",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#special-note"
  },"75": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Lab 3 - The Bash Shell",
    "content": " ",
    "url": "/labs/lab3/",
    
    "relUrl": "/labs/lab3/"
  },"76": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Video here",
    "content": "VIDEO . ",
    "url": "/labs/lab3/#video-here",
    
    "relUrl": "/labs/lab3/#video-here"
  },"77": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Pre Work:",
    "content": ". | Open the file manager and navigate to the labs folder/directory inside the cis106 repository (~/cis106/labs/) | Create a folder/directory called lab3 | Open VS Code and open the cis106 directory/folder inside VS Code | Create a file called lab3.md inside the lab3 folder/directory | Add the following markdown, save the file, close vs code, and start your lab | . --- Student: your name semester: Spring 24 Assignment: Lab 3 --- # Lab 3 Submission ## Question 2 ![q2](q2.1.png) ## Question 3 ![q3](q3.png) ## Challenge Question ![q4](q4.png) ## Script Source code: [lab3](lab3-script.sh) . ",
    "url": "/labs/lab3/#pre-work",
    
    "relUrl": "/labs/lab3/#pre-work"
  },"78": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Question 1: Using Ubuntu’s Desktop Environment (GNOME)",
    "content": "Appearance . | Download a wallpaper that you like. You can use this website for downloading wallpapers: wallheaven.cc | Create a directory/folder in the Pictures directory called wallpapers | Save the file in this newly created directory. Make sure to change the name to something more descriptive of the image. | Right-click on the desktop and change the wallpaper to the one you downloaded recently. | Add the following applications to the favorites bar: . | VS Code | Tilix | . | Customize the favorites bar to your liking . | Change its position | Remove any application you do not use regularly | Do you like the panel mode or the dock mode? | How about the icon size? | . | . Custom Font . | Download one of the following fonts from this website: . | Hack | FiraCode | Meslo | Source Code Pro | Terminus | Monoid | Noto | Iosevka Note: you can use this website to preview the font. Choose one you like and download it. | . | . | Install the font . | Create a hidden folder/directory in your home directory called .fonts (In Linux, hidden folders start with a period therefore to create a hidden folder all you need to do is start its name with a period) | Enable hidden folder view in the file manager by pressing CTRL + H. You should notice that a lot of more hidden folders appear. | Decompress the font.zip file you downloaded earlier and move all the .ttf files to the .fonts directory. | Open a terminal and type the command fc-cache -fv. This command will scan your system for new fonts. | . | Close the terminal. Open the file manager and press CTRL + H again so we can hide the hidden folders/directories again. You don’t want to mistakenly delete those later! | Open the terminal and type the following command: echo \"hello world\" | . This question does no require screenshot . ",
    "url": "/labs/lab3/#question-1-using-ubuntus-desktop-environment-gnome",
    
    "relUrl": "/labs/lab3/#question-1-using-ubuntus-desktop-environment-gnome"
  },"79": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Question 2: Working with BASH in the terminal emulator",
    "content": "Note: I use tilix but you are welcome to use any other terminal emulator. | Open Tilix and then click on the hamburger menu (≡) and then on preference. Ignore the error message | Click on appearance. Enable “Use a wide handle for splitters” | Split the terminal in 2 horizontally. Open the man page of the echo command in one of the terminals. | Resize the terminal window so that you have enough space to work on both. | Using the man page of echo figure out how to do the following: . | Display a line of text without the new line | Display a line of text that includes a horizontal tab | Display 2 lines of text in a single echo command | Display 2 lines of text in a single echo command, with the second line starting with a tab | Display 2 lines of text in a single echo command that starts with a tab | . | . Take a screenshot of the terminal showing all the commands that you used and the man page open. Save your screenshot as q2.1.png . ",
    "url": "/labs/lab3/#question-2-working-with-bash-in-the-terminal-emulator",
    
    "relUrl": "/labs/lab3/#question-2-working-with-bash-in-the-terminal-emulator"
  },"80": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Question 3: Write a basic shell script",
    "content": ". | Open the text editor app (Gnome Text) | Click on the gear icon (⚙) then . | Enable “Show line numbers” | Enable “Show right margin” | disable “Check spelling” | In Spaces Per Tab, set it to “4” | . | Click on the hamburger menu (≡) and then properties . | Pick a a theme that you like | Enable custom font and pick the font you downloaded earlier. Adjust the font size to your liking. | Enable highlight current line | . | Type the following line: #!/bin/bash (double-check your spelling) | Save the file as: lab3-script1.sh in the lab3 folder/directory inside cis106/labs/ | . | Add the following lines, then save the script. | . echo \"This is a shell script,\" echo -n \"This script will print the current date\" date echo \"This is the machine's name:\" uname -n echo \"This is the current user:\" echo $USER echo \"This is the current date\" date +\"%A, %B %d %R %Z\" . | Add the following comments at the top after the shell declaration/shebang #!/bin/bash | . # Author: your name # Date: current date in format mm/dd/yy # Description: This is a basic script that # uses environment variables and the date command . | Save the script and close the text editor | Open a terminal and type the following commands to execute the script: bash ~/cis106/labs/lab3/lab3-script.sh | . Take a screenshot of the terminal showing the output of the script. Double-check your spelling and follow every step correctly if you get any error messages. ",
    "url": "/labs/lab3/#question-3-write-a-basic-shell-script",
    
    "relUrl": "/labs/lab3/#question-3-write-a-basic-shell-script"
  },"81": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Question 4: Challenge Question",
    "content": "Write a shell script that displays the following output: . Tips: . | You will need to read the man page of the echo, uname, and date, df, free and figlet commands. | You can use the cheat command | Save the script in the same directory/folder as you saved the question 3 script ~/cis106/labs/lab3/ | Name the script challenge_lab3.sh | The command to run the script is bash ~/cis106/labs/lab3/challenge_lab3.sh if this does not work, it is because you saved the script in the wrong folder. Retrace your steps to troubleshoot. | You must complete this question alone. I cannot provide assistance here. Everything you need to complete this challenge has been covered in this lab and in the presentations. While I cannot provide you with assistance answering the question, I can provide extra explanations or clarifications. | . NOTE: This script must use the echo, uname, and date, df, free and figlet command. Any other solution that does not involve these commands will not be accepted and you will receive 0 for this question. No exceptions! . ",
    "url": "/labs/lab3/#question-4-challenge-question",
    
    "relUrl": "/labs/lab3/#question-4-challenge-question"
  },"82": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "What will you submit:",
    "content": ". | Place and properly label (using headings) all the screenshots you took. See the markdown I gave you at the beginning of this document | Convert the file to pdf | Push everything to github | In Blackboard, submit the pdf file lab3.pdf | . Note: I will read your script from github. If the script is not there, you will not receive credit. ",
    "url": "/labs/lab3/#what-will-you-submit",
    
    "relUrl": "/labs/lab3/#what-will-you-submit"
  },"83": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "How I will grade you:",
    "content": ". | I will navigate to your GitHub repository and read your script. | I will download your script and run it on my machine. | If your script runs and I get the same output as the screenshot, you will get full credit for the challenge question. Otherwise, partial credit will be awarded. | Every question in this lab is worth 25 points. | . ",
    "url": "/labs/lab3/#how-i-will-grade-you",
    
    "relUrl": "/labs/lab3/#how-i-will-grade-you"
  },"84": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Special Note",
    "content": "You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab3/#special-note",
    
    "relUrl": "/labs/lab3/#special-note"
  },"85": {
    "doc": "Lab 4 - The Linux Filesystem",
    "title": "Lab 4 - The Linux Filesystem",
    "content": ". | Presentations: . | How to navigate the filesystem | Video here | . | . Note: Your final exam will include questions similar to 4 and 5. I will answer questions 4 and 5 during class after the due date for this lab has expired. ",
    "url": "/labs/lab4/",
    
    "relUrl": "/labs/lab4/"
  },"86": {
    "doc": "Lab 4 - The Linux Filesystem",
    "title": "Question 1 | Moving around the file system",
    "content": "| Command | Description | . | pwd | Print the absolute path of the current working directory. | . | cd | Change the shell current working directory. | . | ls | list files inside a given directory | . Before you start this lab, complete all the practice in the presentation. This will allow you to understand these commands better. This is part of your Week report so make sure to take screenshots. Using pwd and cd with absolute path (remember to use the bash autocompletion feature) . | Start a terminal. What is your present working directory? | Change your present working directory to /usr/share/themes | What is your present working directory now? | Change your present working directory to the root of the filesystem (/) | Change your present working directory to /snap/firefox if for whatever reason you don’t have this directory then use: /home/your-user-name-here/Downloads/ Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 1-5. | . Using pwd and cd with a relative path (remember to use the bash autocompletion feature) . | Clear your terminal window. Change the working directory to YOUR home directory. | Change the working directory to the Downloads directory. | Go back 2 directories. | Where are you now? | Change the working directory to the Documents/ directory. Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 6-10. | . ",
    "url": "/labs/lab4/#question-1--moving-around-the-file-system",
    
    "relUrl": "/labs/lab4/#question-1--moving-around-the-file-system"
  },"87": {
    "doc": "Lab 4 - The Linux Filesystem",
    "title": "Question 2 | The ls command",
    "content": "Download this compressed zip file: lab4files.zip Decompress the zip file in your home directory. | Change your present working directory to /usr/share/. Using absolute path, list all the files inside the lab4files directory. | Change your present working directory to ~/lab4files. Long list all the files inside your current working directory with human readable file sizes. | Long list all the files inside lab4files with human readable file size, and sorted by file size. | Long list all the files inside lab4files with human readable file size, sorted by file size, without the user nor the group name, and showing their inode number. | List all the files inside lab4files sorted by file extension and in reverse order. | . Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 1-5. Multiple screenshots may be **required** . ",
    "url": "/labs/lab4/#question-2--the-ls-command",
    
    "relUrl": "/labs/lab4/#question-2--the-ls-command"
  },"88": {
    "doc": "Lab 4 - The Linux Filesystem",
    "title": "Question 3 | Shell scripting",
    "content": "Use this image as a visual aid during this question . If you want your Gedit (Text Editor) to look like mine. Take a moment to follow this guide. Description: . John wants to create a script to practice cd, ls, pwd, and variables. The script will output the following: . Solution . | The complete source code can be found here . | Use the screenshot and write a script that can produce the same output. | Modify the script to use variables where needed. | . | . Take a screenshot of the terminal and the text editor showing the source code. ",
    "url": "/labs/lab4/#question-3--shell-scripting",
    
    "relUrl": "/labs/lab4/#question-3--shell-scripting"
  },"89": {
    "doc": "Lab 4 - The Linux Filesystem",
    "title": "Question 4 | Challenge write a script",
    "content": "Write a script that will produce the following output: . Tips: . | You will need environment variables and user defined variables. | Use the env command to display a list of all environment variables | The ls command is using a time-style. Use the man page and this guide to figure out the right option. Time style is not the only option in used here. | . Take a screenshot of the terminal after executing the script . ",
    "url": "/labs/lab4/#question-4--challenge-write-a-script",
    
    "relUrl": "/labs/lab4/#question-4--challenge-write-a-script"
  },"90": {
    "doc": "Lab 4 - The Linux Filesystem",
    "title": "What will you Submit:",
    "content": ". | Place all the screenshots and answers to your questions in a the lab4.md file. | Convert your markdown file to pdf | Push the changes to Github . | git pull; git add .; git commit -m 'lab3 completed'; git push | . | Submit the URL of Lab4.md and the pdf file | Delete all the snapshopts and take a new one. Name it “Lab 4 complete” | . ",
    "url": "/labs/lab4/#what-will-you-submit",
    
    "relUrl": "/labs/lab4/#what-will-you-submit"
  },"91": {
    "doc": "Lab 4 - The Linux Filesystem",
    "title": "How I will grade you:",
    "content": ". | Every question is worth: 25 pts | I will go to your github repository and read/download your script. If it produces the required output and matches the screenshot, you will get full credit for the challenge question. | . ",
    "url": "/labs/lab4/#how-i-will-grade-you",
    
    "relUrl": "/labs/lab4/#how-i-will-grade-you"
  },"92": {
    "doc": "Lab 4 - The Linux Filesystem",
    "title": "Extra practice (not mandatory but recommended)",
    "content": "The tree and exa command (Optional Question. No submission required) . | Using absolute path and having /etc as your present working directory. Display a tree of the directory lab4files. | Change your present working directory to your Downloads directory. Display a tree of the directory lab4files with the full path prefix for each file, the file permissions, and the file size in human readable format. | Display a tree of the directory lab4files sorted by last modified time and showing the file owner and group. | Install exa then list all the options of the exa command. | Using exa, long list all the files inside lab4files | Long list lab4files showing the header that indicates what each column means. | Long list lab4files without the file owner nor group including the header and the date the file was created. | . Solution: . | cd /etc | tree ~/lab4files/ | cd ~/Downloads | tree -fph ~/lab4files/ | tree -tgu ~/lab4files | sudo apt install exa -y | exa --help | exa -l ~/lab4files/ | exa -lh ~/lab4files/ | exa -lhU --no-permissions --no-user ~/lab4files/ | . Special Note . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab4/#extra-practice-not-mandatory-but-recommended",
    
    "relUrl": "/labs/lab4/#extra-practice-not-mandatory-but-recommended"
  },"93": {
    "doc": "Lab 5 - Managing Files and directories",
    "title": "Lab 5 - Managing Files and directories",
    "content": ". | Presentation here | Video here | . ",
    "url": "/labs/lab5/",
    
    "relUrl": "/labs/lab5/"
  },"94": {
    "doc": "Lab 5 - Managing Files and directories",
    "title": "Question 1.1: Creating Files and Directories - Part 1",
    "content": ". | Create the following directory structure. Here are the rules: . | YOU ARE NOT ALLOWED TO USE CD! | You can create more than 1 directory at the same time | You can only use relative path for all the directory and file names | All the commands must be run from your home directory ($HOME) | . | . lab5/ └── q1.1 └── games ├── action │   └── action_games.txt ├── fps │   └── fps_list.txt └── rpg └── mods.py 5 directories, 3 files . | To complete this question, follow these instructions: | . | Create a Directory in YOUR home directory ($HOME) labeled: lab5. | Inside lab5 create the directory q1.1 and the subdirectory games. Inside games, create the subdirectory action. You must use the -p option of the mkdir command. Then, inside games, create the remaining 2 subdirectories. -p is not necessary here anymore because the parents directory already exist. | Inside each respective directory, create the text files: action_games.txt,fps_list.txt, and mods.py | Use the tree command to list the lab5 directory. Alternatively, you can use ls -R for a recursive list of the lab5 directory. | . Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer this question. Multiple screenshots are allowed . Question 1.2: Creating Files and Directories - Part 2 . To the previous directory structure, add the missing directories and files. Here are the rules: . | YOU ARE NOT ALLOWED TO USE CD aside from step 1 | You can create more than 1 directory at the same time | You can only use absolute path for all the directory and file names | All the commands must be run from your home directory (/etc) | . /home/adrian/lab5/ ├── q1 │   └── games │   ├── action │   │   └── action_games.txt │   ├── fps │   │   └── fps_list.txt │   └── rpg │   └── mods.py └── q1.2 ├── hmw │   └── linux.txt └── notes └── math.pdf 8 directories, 5 files . | To complete this question, follow these instructions: | . | Change your current working directory to /etc. The remaining of this questions will be completed from this directory. | Create the directories and subdirectories: q1.2, hmw and notes. Remember to use -p when necessary. | Create the files linux.txt and math.pdf in their respective directories. | Use the tree command to list the lab5 directory. Alternatively, you can use ls -R for a recursive list of the lab5 directory. | . Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer this question. Multiple screenshots are allowed . Show Solution . ",
    "url": "/labs/lab5/#question-11-creating-files-and-directories---part-1",
    
    "relUrl": "/labs/lab5/#question-11-creating-files-and-directories---part-1"
  },"95": {
    "doc": "Lab 5 - Managing Files and directories",
    "title": "Question 2: Removing Files and Directories",
    "content": ". | Change your current working directory to: /srv/ | Remove the files: math.pdf and linux.txt located in the q1.2 directory. | Change your current working directory to $HOME | Remove the directories q1.1 and q1.2. Use relative path. Remember the -r option of the rm command | . Show Solution . Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 1-4. Multiple screenshots are allowed . ",
    "url": "/labs/lab5/#question-2-removing-files-and-directories",
    
    "relUrl": "/labs/lab5/#question-2-removing-files-and-directories"
  },"96": {
    "doc": "Lab 5 - Managing Files and directories",
    "title": "Question 3: Moving Files and Directories",
    "content": ". | Change the current working directory to $HOME and remove the lab5 directory. | Run the following command: wget https://cis106.com/assets/lab5/lab5.zip &amp;&amp; unzip lab5.zip &amp;&amp; rm lab5.zip You will notice that you have a new lab5 directory in $HOME. Split your terminal in 2 or open a new terminal window. List the lab5 directory sorted by file extensions and in a single column. This will make it easy to work. | In $HOME, create the following directories: lab5-img, lab5-audio, lab5-video, lab5-doc | Move all the files inside the lab5 directory to their respective new directories in $HOME. | Inside the lab5 directory, you will find a directory called wallpapersLab5. Move this directory to your Pictures directory and rename it to NewWallpapers. You must achieve this in a single command. | List the directories: lab5-img, lab5-audio, lab5-video, lab5-doc and NewWallpapers in a single command using absolute path for each directory path. | Remove lab5, lab5-img, lab5-audio, lab5-video, lab5-doc and NewWallpapers | List $HOME. Use this command to list directories only: ls -d1 ~/*/ | . Show Solution . Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 1-8. Multiple screenshots are allowed . ",
    "url": "/labs/lab5/#question-3-moving-files-and-directories",
    
    "relUrl": "/labs/lab5/#question-3-moving-files-and-directories"
  },"97": {
    "doc": "Lab 5 - Managing Files and directories",
    "title": "Question 4: Copying Files and Directories",
    "content": ". | Rules for this question: . | You are not allowed to use CD | You have to use absolute path | . | . | Go to Pexels.com. Filter the results by Horizontal images. Download at least 3 wallpapers. | Split your terminal in 2. In one side, list the wallpapers you downloaded. | In your ~/Pictures directory, create a new directory called lab5wallpapers | Copy the newly downloaded wallpapers to the directory lab5wallpapers | Copy the lab5wallpapers directory to the Downloads directory | . Show Solution . Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 1-5. Multiple screenshots are allowed . ",
    "url": "/labs/lab5/#question-4-copying-files-and-directories",
    
    "relUrl": "/labs/lab5/#question-4-copying-files-and-directories"
  },"98": {
    "doc": "Lab 5 - Managing Files and directories",
    "title": "Challenge Question:",
    "content": "Problem Description: Joe is working on a web development assignment. The goal is to create a slide show that can show different images when the user clicks the next and previous button. He has sent you the code that makes the website. Your job is to test it to make sure it works. To download the site use this command: . cd $HOME &amp;&amp; wget https://cis106.com/assets/lab5/website-lab5.zip &amp;&amp; unzip website-lab5.zip &amp;&amp; rm website-lab5.zip . This will create the following directory: ~/website-lab5. That contains index.html. There is no need to edit this file. If you open the site, you will notice that the site is just a black screen. That is because the directory website-lab5 is missing 3 image files that you need to test it. Here are the steps to complete this challenge: . | Use the given command in the problem description to download the directory and file. (website-lab5/index.html) | Download 3 images from Pexels.com. Make sure the images are horizontal and the file format is jpg | Rename and move the images using the following naming convention. You have to rename and move using 1 command. This part should take 3 commands because there are only 3 files. | old_name1.jpg -&gt; img1.jpg | old_name2.jpg -&gt; img2.jpg | old_name3.jpg -&gt; img3.jpg | . | List the website-lab5 directory. It should look like this: . | Open the index.html file in firefox and take a screenshot. Test the slideshow by clicking the next and previous buttons. The images you downloaded should be shown there. | . Take a screenshot of the commands you used to answer this question and of firefox showing the index.html file open. ",
    "url": "/labs/lab5/#challenge-question",
    
    "relUrl": "/labs/lab5/#challenge-question"
  },"99": {
    "doc": "Lab 5 - Managing Files and directories",
    "title": "What will you Submit:",
    "content": ". | Place all the screenshots and answers to your questions in a the lab5.md file. Label each question submission correctly using headings. | Convert your markdown file to pdf | Push the changes to Github: git pull; git add .; git commit -m \"lab5 complete; git push\" | Submit the URL of Lab5.md and the pdf file | If you are using virtualbox, this will be a good time to take a snapshot. | . ",
    "url": "/labs/lab5/#what-will-you-submit",
    
    "relUrl": "/labs/lab5/#what-will-you-submit"
  },"100": {
    "doc": "Lab 5 - Managing Files and directories",
    "title": "How will you be graded:",
    "content": ". | You will lose points if you do not include the full screenshot of firefox. I need to see the complete firefox window showing the URL. | You will lose points if you use more than 3 mv commands to get the job done. | The value of each question is: 20pts | . Special Note . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab5/#how-will-you-be-graded",
    
    "relUrl": "/labs/lab5/#how-will-you-be-graded"
  },"101": {
    "doc": "Lab 6 - Wildcards",
    "title": "Lab 6 - Wildcards",
    "content": " ",
    "url": "/labs/lab6/",
    
    "relUrl": "/labs/lab6/"
  },"102": {
    "doc": "Lab 6 - Wildcards",
    "title": "A Brief description of the wildcards.",
    "content": ". Cheat Sheet here . Video here . Note: Wildcards are all about pattern matching. They can be confusing but once you get a hold of them, you will never forget them. The table above gives you a summary of each wildcard. The goal of this lab is to give you enough practice for you to master wildcards in their basics form. Wildcards are very powerful because they can be combined to match pretty much any pattern that you can think of. ",
    "url": "/labs/lab6/#a-brief-description-of-the-wildcards",
    
    "relUrl": "/labs/lab6/#a-brief-description-of-the-wildcards"
  },"103": {
    "doc": "Lab 6 - Wildcards",
    "title": "IMPORTANT!!! READ ME!!!!!",
    "content": "Before working on this lab, run this command: curl https://cis106.com/assets/lab6/lab6.sh | bash This will create a directory called lab6 in your home directory. ",
    "url": "/labs/lab6/#important-read-me",
    
    "relUrl": "/labs/lab6/#important-read-me"
  },"104": {
    "doc": "Lab 6 - Wildcards",
    "title": "Question 1 | Using the * Wildcard",
    "content": "In your home directory, you should have a directory called lab6, if you don’t have it, make sure to run the curl command in the READ ME part of this lab. | List all the log files located in the lab6/q1 directory. | Create a directory called log-files inside the lab6 directory. Move all the log files to the log-files directory. | Long list all the configuration files in the lab6/q1 directory. sorted by file size. Modify the ls command with the proper options so that the output looks like this: (Notice the date). Then create the directory lab6/config-files and move all the config files in lab6/q1. -rw-r--r-- 1 7.5K 08/19/21 /etc/pnm2ppa.conf . You can see a full list of control characters for the date here . | . Show Solution . Take a screenshot of your terminal showing all the commands that you used to complete this question. ",
    "url": "/labs/lab6/#question-1--using-the--wildcard",
    
    "relUrl": "/labs/lab6/#question-1--using-the--wildcard"
  },"105": {
    "doc": "Lab 6 - Wildcards",
    "title": "Question 2 | Using the ? and [] wildcard",
    "content": ". | Create the directory: hidden-files inside the lab6 directory. | List only the hidden files inside lab6/q2 directory then copy them to the hidden-files directory. | List all the files with a 2 letter file extension in the lab6/q2 directory then remove them. | List and then remove all the files with a 4 letter file extension in the lab6/q2 directory that start with letter T and end with letter x | List all the files, inside the lab6/q2 directory, that start with letter l (lowercase L) or letter r, have one vowel after letter l or letter r, and and a number before the file extension. | Create a directory called random inside the lab6 directory. | Use the wildcard in step 5 to move the files to the random directory | . Show Solution . Take a screenshot of your terminal showing all the commands that you used to complete this question. ",
    "url": "/labs/lab6/#question-2--using-the--and--wildcard",
    
    "relUrl": "/labs/lab6/#question-2--using-the--and--wildcard"
  },"106": {
    "doc": "Lab 6 - Wildcards",
    "title": "Question 3 | Using brace expansion.",
    "content": "The curly braces are not a wildcard but they are equally useful. The curly braces allow you to generate arbitrary strings to use with commands. Problem 1: In the lab6 directory, create the following directory structure. Display a tree of the directory. Take a screenshot: . wallpapers/ └── cars ├── 1080p ├── 2k └── 4k . Problem 2: Clear your terminal. in the lab6 directory, create the following directory structure. Display a tree of the directory. Take a screenshot: . assets/ ├── imgs │   ├── large │   └── small └── video ├── large └── small . Problem 3: Clear your terminal. in the lab6 directory, create the following directory structure. You need to create the pdf files as well. Remember mkdir creates directories while touch creates files. Display a tree of the directory. Take a screenshot: . docs/ └── books ├── history │   ├── fall │   │   └── book.pdf (this is a file not a directory) │   └── spring │   └── book.pdf (this is a file not a directory) └── math ├── 2024 │   └── book.pdf (this is a file not a directory) └── 2025 └── book.pdf (this is a file not a directory) . Problem 4: Brace expansion comes handy in other scenarios too. Here are some examples: . | From the root of the filesystem, create 3 files in the ~/lab6/q3 directory called: program.py, people.csv, data.xls. | From the root of the filesystem, remove the files: _file0.old _file1.old, _file2.old located in ~/lab6/q3 | . Show Solution . Take a screenshot of your terminal showing all the commands that you used to complete this question. ",
    "url": "/labs/lab6/#question-3--using-brace-expansion",
    
    "relUrl": "/labs/lab6/#question-3--using-brace-expansion"
  },"107": {
    "doc": "Lab 6 - Wildcards",
    "title": "Challenge Question",
    "content": "Run this curl command: curl https://cis106.com/assets/lab6/lab6cq.sh | bash . This will create a directory in your home directory called: challenge-Lab6 This directory has a bunch of files. Organize these file so that each file type has its own directory. Each file type must be moved to its respective directory. When you are done, the challenge-Lab6 directory should look like this: . Note: The directory tree you see here is just an example, you may or may not have the same files. challenge-lab6/ ├── audio │   ├── aac │   │   └── all-aac-files-here │   └── mp3 │   └── all-mp3-files-here ├── docs │   ├── docx │   │   └── all-docs-files-here │   ├── pdf │   │   └── all-pdf-files-here │   └── xls │   └── all-xls-files-here └── images ├── jpg │   └── all-jpg-files-here └── png └── all-png-files-here . Note: The directory tree you see here is just an example, you may or may not have the same files. Here is what you are not allowed to do: . | Create a directory for every file type. It defeats the purpose of the question. There are a lot of file types but you should be able to logically categorize them. | Move the files 1 by 1. It defeats the purpose of learning how to use wildcards. | Create the directories 1 by 1. It defeats the purpose of learning brace expansions. | . Tips . | List the directory sorted by file extension. | Write down all the different file types and come up with a categorization | There should be a directory for every category. | Create the directory tree using brace expansion. By this point you should know how many and which directories you will need. There should not be a single directory with only 1 file. | . Take a screenshot of your terminal showing all the commands that you used to complete this question. ",
    "url": "/labs/lab6/#challenge-question",
    
    "relUrl": "/labs/lab6/#challenge-question"
  },"108": {
    "doc": "Lab 6 - Wildcards",
    "title": "What will you Submit:",
    "content": ". | Place all the screenshots and answers to your questions in a the lab6.md file. | Convert your markdown file to pdf | Push the changes to Github: git pull; git add .; git commit -m \"lab5 complete; git push\" | Submit the URL of lab6.md and the pdf file | Take a snapshot of your system and delete the previous snapshot. | . Special Note . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab6/#what-will-you-submit",
    
    "relUrl": "/labs/lab6/#what-will-you-submit"
  },"109": {
    "doc": "Markdown Cheat Sheet",
    "title": "Markdown Cheat Sheet",
    "content": "File here: https://devhints.io/markdown . ",
    "url": "/docs/MarkdownCheatSheet/",
    
    "relUrl": "/docs/MarkdownCheatSheet/"
  },"110": {
    "doc": "Setup SSH Guide",
    "title": "Setup SSH Guide",
    "content": " ",
    "url": "/guides/SetupSSHUbuntuServer/",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/"
  },"111": {
    "doc": "Setup SSH Guide",
    "title": "Installation",
    "content": ". | Make sure that your server and your client computer are in the same network. The easiest way to do this is to make sure that the network addapter in the viertual machine is set to bridge instead of nat. To do this go, open the virtual machine settings and in the network section change the adapter to Bridge. | . | However, your network may prevent you from doing this. Some IDS and smart routers may prevent you from getting an IP. In this case, you need to use port forwarding in your virtual machine. Here is a guide on how to do it. Portforwarding Example . | Make sure that the ssh server program is installed in the server virtual machine sudo apt install openssh-server -y . | Make sure that the ssh client program is installed in the client machine. This is the computer that you will be using to manage your server. sudo apt install openssh-server -y . | Enable and start ssh in the server: sudo systemctl enable ssh; sudo systemctl start ssh . | Test the connection by loging in to the server from the client. First, use the ip or hostname command to find out the ip address of the server. | On the server type, hostname -I this will give you the ip address of your server. | On the client type: ssh username@server-ip-address . | If you are using port forwarding, your command will be: | . ssh -p 2222 username@127.0.0.1 . | Read and answer the questions and you will connect sucessfully. | . ",
    "url": "/guides/SetupSSHUbuntuServer/#installation",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/#installation"
  },"112": {
    "doc": "Setup SSH Guide",
    "title": "Setup private and public key authentication with or without password:",
    "content": ". | On the server, configure the firewall to accept ssh connections. sudo ufw allow ssh sudo ufw enable sudo ufw status . | Now we need to generate an ssh key in our client computer. If you are using your ubuntu machine from the course, then you already have one. If you are not, then you must create the ssh keys: | In your client machine type: ssh-keygen . | Now you can type this command to copy your ssh key to the server ssh-copy-id -i .ssh/id_rsa.pub webmaster@server-ip-address . | if you are using port forwarding, use this command instead: ssh-copy-id -i .ssh/id_rsa.pub -p 2222 webmaster@127.0.0.1 . | . if you use port forwarding your command will be: . ssh-copy-id -p 2222 username@127.0.0.1 . | Now you can connect to your server without having to remember the password. | . ",
    "url": "/guides/SetupSSHUbuntuServer/#setup-private-and-public-key-authentication-with-or-without-password",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/#setup-private-and-public-key-authentication-with-or-without-password"
  },"113": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "How to Setup Git and Github in Ubuntu 20.04",
    "content": " ",
    "url": "/guides/Ubuntu%20Github%20Setup/",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/"
  },"114": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Assumptions:",
    "content": "I assume the following: . | You have a computer running Ubuntu and VS Code is installed in it. | You have a basic understanding of the Linux Command Line and your Terminal Emulator | You have a Github Account | . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#assumptions",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#assumptions"
  },"115": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Install and setup git",
    "content": "Install command: sudo apt install git -y . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#install-and-setup-git",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#install-and-setup-git"
  },"116": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Setup Git",
    "content": ". | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#setup-git",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#setup-git"
  },"117": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Setup SSH authentication",
    "content": ". | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. See examle here: . | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboad in the step prior. Type yes (the whole word) and press enter and you are done . | Test you ssh connection by using this command: ssh -T git@github.com You will see the following outcome: . | . If you do not see an error message or a different message than the one shown prior, then your SSH connection is correct. Now you can push and clone using SSH. ",
    "url": "/guides/Ubuntu%20Github%20Setup/#setup-ssh-authentication",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#setup-ssh-authentication"
  },"118": {
    "doc": "Customize Gedit",
    "title": "Customize Gedit",
    "content": " ",
    "url": "/guides/custimizeGedit/",
    
    "relUrl": "/guides/custimizeGedit/"
  },"119": {
    "doc": "Customize Gedit",
    "title": "Video:",
    "content": ". | Here | . ",
    "url": "/guides/custimizeGedit/#video",
    
    "relUrl": "/guides/custimizeGedit/#video"
  },"120": {
    "doc": "Customize Gedit",
    "title": "Synopsis",
    "content": "Make Gedit feel and look more like an IDE than a text editor . ",
    "url": "/guides/custimizeGedit/#synopsis",
    
    "relUrl": "/guides/custimizeGedit/#synopsis"
  },"121": {
    "doc": "Customize Gedit",
    "title": "What is Gedit",
    "content": "Gedit is a text editor designed for the GNOME desktop environment. It was GNOME’s default text editor and part of the GNOME Core Applications until GNOME version 42 in March 2022, which changed the default text editor to GNOME Text Editor. ",
    "url": "/guides/custimizeGedit/#what-is-gedit",
    
    "relUrl": "/guides/custimizeGedit/#what-is-gedit"
  },"122": {
    "doc": "Customize Gedit",
    "title": "How to install Gedit",
    "content": "If you are using Gnome, gedit is installed by default. This is the default text editor for Gnome. To install gedit: sudo apt install gedit gedit-plugins -y If you are using gnome, install the plugins package otherwise the plugins won’t be available. Gnome Text Editor and gedit are essentially the same app. ",
    "url": "/guides/custimizeGedit/#how-to-install-gedit",
    
    "relUrl": "/guides/custimizeGedit/#how-to-install-gedit"
  },"123": {
    "doc": "Customize Gedit",
    "title": "Installing and using plugins",
    "content": ". | Open gedit (text editor) and go to preferences &gt; Plugins | Enable the following plugins: . | Bracket Autocompletion: will auto close brackets, parenthesis, and quotes | Code Comment: will allow us to do multi line commenting. (CTRL + M and CTRL + Shift + M) | Embedded terminal: Will give us a quick terminal at the bottom of the gedit window. | File Browser Panel: Will give us a file manager to the left of the window. | Multi Edit: will give us multi line editing. | Open Links: will allow us to open URLs | Quick highlight: Will automatically highlight all instances of the highlighted word | Quick open: with CTRL + Alt + o ,opens a menu to open recently edited files | Session Saver: saves the session so when you close gedit and open it again, it opens on the last session | Text Size: will us to increase or decrease the size of the text using CTRL + and CTRL - | Word completion: Will enable autocomplete of common words in the script | . | . ",
    "url": "/guides/custimizeGedit/#installing-and-using-plugins",
    
    "relUrl": "/guides/custimizeGedit/#installing-and-using-plugins"
  },"124": {
    "doc": "Customize Gedit",
    "title": "Enabling functionality",
    "content": ". | In the view tab of the preferences window enable the following: . | Display line numbers | Display right margin at column 80 | Display overview map | In the editor tab: . | Set the tab width to 4 spaces | Autosave the file every 5 minutes | . | . | . | In the Font and color: . | Download the font Firacode Nerd Font Mono | Install the font . | Extract the archive in a the directory .fonts located in YOUR home directory. If the directory is not there, press CTRL + H to enable hidden files. If the directory is not there still, create it. | Open a terminal and type the command: fc-cache -f -v to refresh the font cache. | Go back to gedit Font &amp; Colors tab inside preferences. | Change the font to FiraMono Nerd Font Mono Regular (if you cant find the font, close gedit and open it again) | . | . | . | Changing the theme . | Optional (change the font size to a size you are more comfortable with) | Optional (change the color scheme to something you prefer or matches our preference). I like the dracula theme which you can download from here | Here are other themes you can download too! | You will need to place these themes in: $HOME/.local/share/gedit/styles/ | Themes are xml files so you need to extract the xz file in that directory. | . | In the view options of the hamburger menu, enable: . | Side Panel | Bottom Panel | . | . ",
    "url": "/guides/custimizeGedit/#enabling-functionality",
    
    "relUrl": "/guides/custimizeGedit/#enabling-functionality"
  },"125": {
    "doc": "Customize Gedit",
    "title": "Testing Gedit",
    "content": "Here is the source code: . Bash . #!/bin/bash main (){ echo \"Hello world\" } main . HTML . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;style&gt; button { background-color: #04AA6D; border: none; color: white; padding: 15px 32px; font-size: 25px; } &lt;/style&gt; &lt;body&gt; &lt;button onclick=\"say();\" id=\"btn\" type=\"button\"&gt;Say hello!&lt;/button&gt; &lt;h1 id=\"msg\"&gt;&lt;/h1&gt; &lt;/body&gt; &lt;script&gt; function say(){ document.getElementById(\"msg\").innerHTML = \"Hello world!\"; } &lt;/script&gt; &lt;/html&gt; . Python . #!/usr/bin/python3 def hello(): print(\"hello World\") hello() . C++ . #include &lt;iostream&gt; using std::cout; int main() { cout &lt;&lt; \"Hello World!\\n\"; return 0; } // g++ hello.cpp &amp;&amp; ./a.out to compile and run . Rust . fn main() { println!(\"Hello World!\"); } // Must have rust installed: // curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh // rustc hello.rs &amp;&amp; ./hello to compile and run . ",
    "url": "/guides/custimizeGedit/#testing-gedit",
    
    "relUrl": "/guides/custimizeGedit/#testing-gedit"
  },"126": {
    "doc": "FORMAT control characters",
    "title": "FORMAT control characters supported by the GNU/date command",
    "content": "| %FORMAT String | Description | . | %% | a literal % | . | %a | locale’s abbreviated weekday name (e.g., Sun) | . | %A | locale’s full weekday name (e.g., Sunday) | . | %b | locale’s abbreviated month name (e.g., Jan) | . | %B | locale’s full month name (e.g., January) | . | %c | locale’s date and time (e.g., Thu Mar 3 23:05:25 2005) | . | %C | century; like %Y, except omit last two digits (e.g., 21) | . | %d | day of month (e.g, 01) | . | %D | date; same as %m/%d/%y | . | %e | day of month, space padded; same as %_d | . | %F | full date; same as %Y-%m-%d | . | %g | last two digits of year of ISO week number (see %G) | . | %G | year of ISO week number (see %V); normally useful only with %V | . | %h | same as %b | . | %H | hour (00..23) | . | %I | hour (01..12) | . | %j | day of year (001..366) | . | %k | hour ( 0..23) | . | %l | hour ( 1..12) | . | %m | month (01..12) | . | %M | minute (00..59) | . | %n | a newline | . | %N | nanoseconds (000000000..999999999) | . | %p | locale’s equivalent of either AM or PM; blank if not known | . | %P | like %p, but lower case | . | %r | locale’s 12-hour clock time (e.g., 11:11:04 PM) | . | %R | 24-hour hour and minute; same as %H:%M | . | %s | seconds since 1970-01-01 00:00:00 UTC | . | %S | second (00..60) | . | %t | a tab | . | %T | time; same as %H:%M:%S | . | %u | day of week (1..7); 1 is Monday | . | %U | week number of year, with Sunday as first day of week (00..53) | . | %V | ISO week number, with Monday as first day of week (01..53) | . | %w | day of week (0..6); 0 is Sunday | . | %W | week number of year, with Monday as first day of week (00..53) | . | %x | locale’s date representation (e.g., 12/31/99) | . | %X | locale’s time representation (e.g., 23:13:48) | . | %y | last two digits of year (00..99) | . | %Y | year | . | %z | +hhmm numeric timezone (e.g., -0400) | . | %:z | +hh:mm numeric timezone (e.g., -04:00) | . | %::z | +hh:mm:ss numeric time zone (e.g., -04:00:00) | . | %:::z | numeric time zone with : to necessary precision (e.g., -04, +05:30) | . | %Z | alphabetic time zone abbreviation (e.g., EDT) | . ",
    "url": "/guides/format-control-char-date-command/#format-control-characters-supported-by-the-gnudate-command",
    
    "relUrl": "/guides/format-control-char-date-command/#format-control-characters-supported-by-the-gnudate-command"
  },"127": {
    "doc": "FORMAT control characters",
    "title": "Example:",
    "content": ". | ls -l --time-style=+%Z / | . ",
    "url": "/guides/format-control-char-date-command/#example",
    
    "relUrl": "/guides/format-control-char-date-command/#example"
  },"128": {
    "doc": "FORMAT control characters",
    "title": "FORMAT control characters",
    "content": " ",
    "url": "/guides/format-control-char-date-command/",
    
    "relUrl": "/guides/format-control-char-date-command/"
  },"129": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Install Ubuntu Server 20.04 In VirtualBox",
    "content": " ",
    "url": "/guides/install-ubuntu-server-20.04/#install-ubuntu-server-2004-in-virtualbox",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#install-ubuntu-server-2004-in-virtualbox"
  },"130": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 1",
    "content": ". | Download Ubuntu Server 24.04 iso file. | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-1",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-1"
  },"131": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 2",
    "content": ". | Create a virtual machine that meets Ubuntu Server 24.04 Minimun requirements.. | The minimum system requirements are: . | CPU: 1 core | RAM: 1 gigabyte or more | Disk: a minimum of 30 gigabytes | . | . | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-2",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-2"
  },"132": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 3",
    "content": ". | Turn on Virtual Machine | Start the installer. | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-3",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-3"
  },"133": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "content": " ",
    "url": "/guides/install-ubuntu-server-20.04/",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/"
  },"134": {
    "doc": "Kvm + Virtmanager",
    "title": "Kvm + Virtmanager",
    "content": "Note: This guide was tested on Ubuntu 22.04 and 24.04 Source: How to Install KVM on Ubuntu 20.04 This is a work in progress . ",
    "url": "/guides/install_virtmanager/",
    
    "relUrl": "/guides/install_virtmanager/"
  },"135": {
    "doc": "Kvm + Virtmanager",
    "title": "Step 1",
    "content": ". | Check if virtualization is supported using the commands: egrep -c '(vmx|svm)' /proc/cpuinfoThis command should return any number greater than 0 | Install cpu checker: sudo apt update &amp;&amp; sudo apt install cpu-checker | Check if your system supports KVM sudo kvm-ok This should return the following output: INFO: /dev/kvm exists KVM acceleration can be used . | . ",
    "url": "/guides/install_virtmanager/#step-1",
    
    "relUrl": "/guides/install_virtmanager/#step-1"
  },"136": {
    "doc": "Kvm + Virtmanager",
    "title": "Step 2",
    "content": ". | Install KVM and other dependencies: sudo apt install -y qemu qemu-kvm libvirt-daemon libvirt-clients bridge-utils virt-manager | Enable the virtualization daemon: sudo systemctl status libvirtd | Check if the kvm modules are running: lsmod | grep -i kvm | This should return the following output (similar): kvm_amd 208896 0 kvm 1417216 1 kvm_amd ccp 155648 4 kvm_amd . | Add your user to the necessary groups. This will allow qemu to use iso files: sudo usermod -aG libvirt-qemu $USER and sudo usermod -aG libvirt $USER | You can make virtual machines with virt-manager now. The process is similar to Virtualbox. | If you get an error message in virt-manager that reads: QEMU/KVM - Not Connected, reboot. | . ",
    "url": "/guides/install_virtmanager/#step-2",
    
    "relUrl": "/guides/install_virtmanager/#step-2"
  },"137": {
    "doc": "Kvm + Virtmanager",
    "title": "Pending on this guide:",
    "content": ". | Add steps to create virtual machines graphically and via the command line | Add steps to export virtual machines | Add steps to create snapshopts and install spice tools | . ",
    "url": "/guides/install_virtmanager/#pending-on-this-guide",
    
    "relUrl": "/guides/install_virtmanager/#pending-on-this-guide"
  },"138": {
    "doc": "Install Jekyll",
    "title": "How to install Jekyll in Ubuntu",
    "content": ". | Note: This is a daft. | Main guide | tutorial | . ",
    "url": "/guides/jekyll/#how-to-install-jekyll-in-ubuntu",
    
    "relUrl": "/guides/jekyll/#how-to-install-jekyll-in-ubuntu"
  },"139": {
    "doc": "Install Jekyll",
    "title": "Dependencies:",
    "content": "sudo apt-get install ruby-full build-essential zlib1g-dev . ",
    "url": "/guides/jekyll/#dependencies",
    
    "relUrl": "/guides/jekyll/#dependencies"
  },"140": {
    "doc": "Install Jekyll",
    "title": "Gem Installation directory",
    "content": "echo 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrc echo 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrc source ~/.bashrc . ",
    "url": "/guides/jekyll/#gem-installation-directory",
    
    "relUrl": "/guides/jekyll/#gem-installation-directory"
  },"141": {
    "doc": "Install Jekyll",
    "title": "Install jekyll",
    "content": "gem install jekyll bundler . ",
    "url": "/guides/jekyll/#install-jekyll",
    
    "relUrl": "/guides/jekyll/#install-jekyll"
  },"142": {
    "doc": "Install Jekyll",
    "title": "Create a jekyll site",
    "content": "To generate a new site, use the command: jekyll new name-of-site. This will generate a directoryw with the name of the site in the current directory. ",
    "url": "/guides/jekyll/#create-a-jekyll-site",
    
    "relUrl": "/guides/jekyll/#create-a-jekyll-site"
  },"143": {
    "doc": "Install Jekyll",
    "title": "Install Jekyll",
    "content": " ",
    "url": "/guides/jekyll/",
    
    "relUrl": "/guides/jekyll/"
  },"144": {
    "doc": "Install NodeJS",
    "title": "How to install NodeJS and NPM in Ubuntu",
    "content": ". | Sources: . | Digital Ocean | NVM Cheat Sheet | NPX Cheat Sheet | NPM Cheat sheet | NPM VS NPX | React cheat sheet | JS Cheat Sheet | . | . This was tested on Ubuntu 22.04 and 24.04 . ",
    "url": "/guides/nodejs/#how-to-install-nodejs-and-npm-in-ubuntu",
    
    "relUrl": "/guides/nodejs/#how-to-install-nodejs-and-npm-in-ubuntu"
  },"145": {
    "doc": "Install NodeJS",
    "title": "Installation",
    "content": "The Digital Ocean article discusses multiple ways of getting this done. I prefer using node version manager because it allows me to have more than 1 version. | Run this command: | . curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh . | If it does not return an error repeat the command and pipe it to bash | . curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash &amp;&amp; source $HOME/.bashrc . | Now check which versions of node are avaialable: | . nvm list-remote . | Basic nvm commands: | . ",
    "url": "/guides/nodejs/#installation",
    
    "relUrl": "/guides/nodejs/#installation"
  },"146": {
    "doc": "Install NodeJS",
    "title": "Basic Syntax of Node Version Manager",
    "content": "| Command | Description | . | nvm ls-remote | Lists all available versions of Node | . | nvm ls | Lists all locally installed versions | . | nvm install node | Installs the newest release of Node | . | nvm install &lt;version&gt; | Installs the given release of Node | . | nvm use &lt;version&gt; | Switches and uses the given Node release | . | nvm which &lt;version&gt; | Shows path to the given Node version | . | nvm current | Shows what is the currently used Node version | . | nvm alias default &lt;version&gt; | Sets the default Node version to the given version | . | nvm unalias &lt;alias_name&gt; | Deletes the alias named | . | nvm --help | Shows NVM help documents. | . | nvm exec &lt;version&gt; node app.js | Run Node app.js with the PATH pointing to given node version | . | nvm set-colors cgYmW | Set text colors to cyan, green, bold yellow, magenta, and white | . | nvm run &lt;version&gt; app.js | Run app.js using given Node version | . | nvm install-latest-npm | Update your version of npm if you use Node installed through nvm | . | nvm root &lt;path&gt; | Set the directory where nvm should store different versions of node.js. | . | nvm proxy [url] | Set a proxy to use for downloads. Leave [url] blank to see the current proxy. Set [url] to “none” to remove the proxy. | . | nvm -v | Check if nvm is installed | . | nvm uninstall &lt;version&gt; | Un-Install a specific version | . | nvm ls | Show versions available locally | . | nvm uninstall --lts | Uninstall the latest long term support version | . ",
    "url": "/guides/nodejs/#basic-syntax-of-node-version-manager",
    
    "relUrl": "/guides/nodejs/#basic-syntax-of-node-version-manager"
  },"147": {
    "doc": "Install NodeJS",
    "title": "NPM VS NPX",
    "content": "NPM . | The npm stands for Node Package Manager and it is the default package manager for Node.js. | It is written entirely in JavaScript, developed by Isaac Z. Schlueter. | NPM manages all the packages and modules for node.js and consists of command-line client npm. Cheat cheat . | . | Command | Description | . | npm i | Alias for npm install | . | npm install | Install everything in package.json | . | npm install --production | Install everything in package.json, except devDependecies | . | npm install lodash | Install a package | . | npm install --save-dev lodash | Install as devDependency | . | npm install --save-exact lodash | Install with exact | . | npm list | Lists the installed versions of all dependencies in this software | . | npm list -g --depth 0 | Lists the installed versions of all globally installed packages | . | npm view | Lists the latest versions of all dependencies in this software | . | npm outdated | Lists only the dependencies in this software which are outdated | . | npm update | Update production packages | . | npm update --dev | Update dev packages | . | npm update -g | Update global packages | . | npm update lodash | Update a package | . | npm rm lodash | Remove package production packages | . | npm i sax | NPM package | . | npm i sax@latest | Specify tag latest | . | npm i sax@3.0.0 | Specify version 3.0.0 | . | npm i sax@\"&gt;=1 &lt;2.0\" | Specify version range | . | npm i @org/sax | Scoped NPM package | . | npm i user/repo | GitHub | . | npm i user/repo#master | GitHub | . | npm i github:user/repo | GitHub | . | npm i gitlab:user/repo | GitLab | . | npm i /path/to/repo | Absolute path | . | npm i ./archive.tgz | Tarball | . | npm i https://site.com/archive.tgz | Tarball via HTTP | . | npm version 1.2.3 | Bump the package version to 1.2.3 | . | npm version major | Bump the major package version by 1 (1.2.3 → 2.0.0) | . | npm version minor | Bump the minor package version by 1 (1.2.3 → 1.3.0) | . | npm version patch | Bump the patch package version by 1 (1.2.3 → 1.2.4) | . | npm owner add USERNAME PACKAGENAME | Add someone as an owner | . | npm deprecate PACKAGE@\"&lt; 0.2.0\" \"critical bug fixed in v0.2.0\" | Adds warning to those that install a package of old versions | . | npm update [-g] PACKAGE | update all packages, or selected packages | . | npm outdated [PACKAGE] | Check for outdated packages | . NPX: . | The npx stands for Node Package Execute and it comes with the npm, when you installed npm above 5.2.0 version then automatically npx will installed. | It is an npm package runner that can execute any package that you want from the npm registry without even installing that package. | The npx is useful during a single time use package. If you have installed npm below 5.2.0 then npx is not installed in your system. | . Cheat cheat . | Command | description | . | npx server &lt;folder-name&gt; | Create local server | . | npx pretty-quick | Format using prettier | . | npx envinfo | Show system info | . | npx envinfo --preset &lt;package-name&gt; | To show system info and show specific npm packages info | . | npx json-server &lt;json-file-link&gt; | Run a json server with .json file | . | npx sort-package-json | Sort package.json file | . | npx npm-upgrade | Check for node module updates and update them interactively | . | npx gvi &lt;package-name&gt; | Get the package version information | . | npx set-default-browser &lt;browser-name&gt; | Set any browser as default browser via cli | . | npx npkill | Delete node_modules | . | npx fx &lt;file.json&gt; | View JSON from terminal | . ",
    "url": "/guides/nodejs/#npm-vs-npx",
    
    "relUrl": "/guides/nodejs/#npm-vs-npx"
  },"148": {
    "doc": "Install NodeJS",
    "title": "Testing",
    "content": " ",
    "url": "/guides/nodejs/#testing",
    
    "relUrl": "/guides/nodejs/#testing"
  },"149": {
    "doc": "Install NodeJS",
    "title": "Install NodeJS",
    "content": " ",
    "url": "/guides/nodejs/",
    
    "relUrl": "/guides/nodejs/"
  },"150": {
    "doc": "Final Project Description",
    "title": "Final Project Description",
    "content": " ",
    "url": "/project/Final_Project_description/",
    
    "relUrl": "/project/Final_Project_description/"
  },"151": {
    "doc": "Final Project Description",
    "title": "Description",
    "content": "The goal of this project is to host a simple website (1-page site) in a web server. You will be installing Ubuntu Server in a virtual machine and managing the server from another computer. That computer can be your Host Machine (Windows) or the Ubuntu Desktop virtual machine that we use in the course. The project will give you basic/initial exposure to the following technologies: . | Virtualization (VirtualBox) | Ubuntu Server | Apache | SSH | HTML | Markdown | VS Code | . The project is divided into 3 deliverables. It is done this way, so you can work slowly through the semester as you gain more knowledge working with Ubuntu Desktop. This also allows you to earn a grade as the semester progresses because the final grade is divided equally among the 3 deliverables. The final project is 20% of your final grade, however, this can change, therefore do not skip any deliverable! . Each deliverable will be submitted as a Markdown document in your GitHub Repository. You will also be required to submit a PDF version of each deliverable, just in case something happens to your GitHub Repository. No late submission will be accepted. This project is due on Dec 21st. ",
    "url": "/project/Final_Project_description/#description",
    
    "relUrl": "/project/Final_Project_description/#description"
  },"152": {
    "doc": "Final Project Description",
    "title": "Requirements",
    "content": ". | A virtual machine/PC where you can install Ubuntu Server. A Virtual machine will be preferred since everything in the tutorials will be done in a virtual machine. | . This is the main tutorial we will follow: . | How To Install the Apache Web Server on Ubuntu 22.04 | . Here are some sources you can use to investigate: . | What is a Web Server | What is SSH | What is Ubuntu Server | Open Source Web Servers | . ",
    "url": "/project/Final_Project_description/#requirements",
    
    "relUrl": "/project/Final_Project_description/#requirements"
  },"153": {
    "doc": "Final Project Description",
    "title": "Deliverable 1: Project’s Requirements",
    "content": "Old Video with more details is available here Newer and shorter video is available here Image resize tool **Example of how the deliverable should look like here . For deliverable 1, we are going to accomplish the following tasks: . | Read the tutorial. Write down every concept you don’t understand and research them. | Answer The following questions: . | What is a web server? Hardware and software side | What are some different web server applications? | What is virtualization? | What is virtualbox? | What is a virtual machine? | What is Ubuntu Server? | What is a firewall? | What is SSH? | . | . To demonstrate the completion of deliverable 1, the student needs to submit a markdown and pdf file where all the questions are answered. Here you can find an example of how the document should look like. ",
    "url": "/project/Final_Project_description/#deliverable-1-projects-requirements",
    
    "relUrl": "/project/Final_Project_description/#deliverable-1-projects-requirements"
  },"154": {
    "doc": "Final Project Description",
    "title": "Deliverable 2 Installing Ubuntu Server And Apache",
    "content": "*Video:Deliverable 2 Latest Video 0-100! . Resources: . | Apache Commands You Should know | IP Command With Examples | UFW Essentials | How To Troubleshoot Common Apache Errors | . Follow this guide to install Ubuntu Server and Apache. After completing the installation, answer the following questions. You must type your answer and take screenshots of the commands and their output. | What are the server hardware specifications (virtual machine settings)? Take a screenshot - don’t type it! | What is Ubuntu server log in screen? Take screenshot - do not type it! | What is the IP address of your Ubuntu Server Virtual Machine? | How do you enable the Ubuntu Firewall? | How do you check if the Ubuntu Firewall is running? | How do you disable the Ubuntu Firewall? | How do you add Apache to the Firewall? | What is the command you used to install Apache? | What is the command you use to check if Apache is running? | What is the command you use to stop Apache? | What is the command you use to restart Apache? | What is the command used to test Apache configuration? | What is the command used to check the installed version of Apache? Reviewing logs is an essential part of system administration; read the tutorial “How To Troubleshoot Common Apache Errors”. After you have finished reading the tutorial, answer the following questions: . | What are the most common commands to troubleshoot Apache errors? Provide a brief description of each command. | Which are Apache Log Files, and what are they used for? Provide examples and screenshots. | . To demonstrate the completion of deliverable 2, the student must submit a markdown and pdf file where all the questions are answered. Here you can find an example of how the document should look like. ",
    "url": "/project/Final_Project_description/#deliverable-2-installing-ubuntu-server-and-apache",
    
    "relUrl": "/project/Final_Project_description/#deliverable-2-installing-ubuntu-server-and-apache"
  },"155": {
    "doc": "Final Project Description",
    "title": "Deliverable 3 Hosting a simple website",
    "content": "Video:Deliverable 3 Latest Video 0-100! . For this deliverable, you have 2 options; Pick one! . Option 1: Resume . | Create a simple resume of yourself. Here is an example of the kind of information to include: . | http://resume-template.joelglovier.com/ | . | You do not need to include a photo of yourself, instead use a stock photo . | You can find stock photos here: https://www.pexels.com/ | . | Once you have created your markdown file, convert the file to HTML. | Compress all the files into a single archive so that they are easier to move. | Send the files to the server. | Once you have transferred the archive to the server, decompress the archive and move the files to their respective folder so that they can be served by the web server. | Open your website in the browser of your host computer or Ubuntu desktop computer and take a screenshot of the browser. | To demonstrate the completion of this deliverable, submit the following: . | The URL to the GitHub repository in the final project folder where I can find all the files you used for creating the site including the markdown file, HTML file and the images. | The screenshot of your website running | . | . Option 2: A simple site . | Create a markdown file that contains instructions on how to set up a Web Server in Ubuntu Server. Include screenshots where you find them necessary. Make sure to explain each command that is necessary. Your Deliverable must contain the following: . | Introduction (Keep it simple) | Basic terminology that the reader must know | Step-by-step instructions | Step 1: Installing VirtualBox | Step 2: Installing Ubuntu Server | Step 3: Installing Apache | Step 4: Setting up the firewall | . | After creating the markdown file, convert the markdown file to PDF. | Rename the PDF to index.html | Compress all the files, including images, in an archive and transfer the file to your web server | Decompress the archive in your web server and move all the files to their proper destination. | Open your site in the host computer or Ubuntu desktop computer and take a screenshot. | To demonstrate the completion of this deliverable, submit the following: . | The URL to the GitHub repository in the final project folder where I can find all the files you used for creating the site including the markdown file, HTML file and the images. | The screenshot of your website running | . | . ",
    "url": "/project/Final_Project_description/#deliverable-3-hosting-a-simple-website",
    
    "relUrl": "/project/Final_Project_description/#deliverable-3-hosting-a-simple-website"
  },"156": {
    "doc": "Final Project Deliverable 1",
    "title": "Final Project Deliverable 1",
    "content": "Old Video with more details is available here Newer and shorter video is available here Image resize tool **Example of how the deliverable should look like here . For deliverable 1, we are going to accomplish the following tasks: . | Read the tutorial. Write down every concept you don’t understand and research them. | Answer The following questions: . | What is a web server? Hardware and software side | What are some different web server applications? | What is virtualization? | What is virtualbox? | What is a virtual machine? | What is Ubuntu Server? | What is a firewall? | What is SSH? | . | . To demonstrate the completion of deliverable 1, the student needs to submit a markdown and pdf file where all the questions are answered. Here you can find an example of how the document should look like. ",
    "url": "/project/Final_project_deliverable1/",
    
    "relUrl": "/project/Final_project_deliverable1/"
  },"157": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Final Project Deliverable 2 Port Forwarding",
    "content": " ",
    "url": "/project/Final_project_deliverable2_port_forwarding/",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/"
  },"158": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 1 Virtual Machine",
    "content": "Create a virtual machine that meets the following specifications: . | CPU: 1 Core | RAM: 1 GB | HDD: 10 GB | . These are the recommended system requirements for Ubuntu Server 22.04. ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-1-virtual-machine",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-1-virtual-machine"
  },"159": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 2 Install Ubuntu Server",
    "content": "Step 1 . Step 2 . Step 3 . Select Update to the new installer. This will update the Ubuntu installer and proceed with the installation. Step 4 . This step will automatically select the language layout of your keyboard. If for whatever reason it is different than what your physical keyboard has, then manually adjust it. Step 5 . Choose the default Ubuntu Server installation. We will need some of the repositories in the default installation. Step 6 . Since we are installing Ubuntu in a virtual machine that at the moment is configured to have a NAT network interface card, as long as your host PC has internet connection, you should automatically get an IP address. If you don’t, something is wrong with your VM, Host Machine, or Internet Connection. Note: If you are doing this project in the school’s network, be aware that the school’s routers are configured to block Bridged Ethernet adapters. Step 7 . Leave this part empty as we are not using a proxy. Step 8 . We will use the default mirror so there is no need to change this . Step 9 . This step is to format our disk. Here we will select the entire disk. To move around here use either the arrow keys or the tab key. Step 10 . This step is just to let you know the changes that will be made to the server’s virtual hard drive. Step 11 . Here you will enter the information about your computer. Write this information down because you will needed it later. Step 12 . It is a good idea to install ssh now as we will use it later on. Do not import SSH keys. We will do that manually later. Step 13 . Do not select these services. We won’t be using them. Step 14 . This is the installation process. Once it is done it will start updating the system. Once the update is done, it will ask you to reboot. Step 15 . Step 16 . Here Just press enter. Virtualbox will unmount the installation disk for you . ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-2-install-ubuntu-server",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-2-install-ubuntu-server"
  },"160": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 3 Install Apache",
    "content": "First, login to the server. You will need to type your username and password. Here is an example: Notice that the password is hidden while typing just like when you are typing it in the terminal emulator. Be aware that during the upgrade, Ubuntu will ask you to restart some services. Apache is available in Ubuntu’s default repositories. However, before we can start installing new packages, let’s update the system: . sudo apt update; sudo apt upgrade -y . To install Apache use: . sudo apt install apache2 -y . Be aware that here you will also need to restart some services here. ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-3-install-apache",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-3-install-apache"
  },"161": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 4 Setup SSH",
    "content": "Before Setup . Before we can setup SSH, we need to enable the firewall. Use this command: . sudo ufw enable . Now lets configure ufw to allow Apache and SSH traffic: . sudo ufw allow 'Apache' sudo ufw allow 'OpenSSH' . Now check the status of the firewall: . sudo ufw status . Now lets check the status of Apache and SSH to make sure they are running: . systemctl status apache2 --no-pager systemctl status ssh --no-pager . Both commands should return active (running) if they do not, restart the services with the command: . sudo systemctl restart apache2 ssh . Setup Port forwarding . | Turn off the server virtual machine if it is on. | Go to the network virtual machine configuration for the server. There add port forwarding to the NAT configuration. You will need to forward port 22 to 2222 and port 80 t0 8080. Here is a screenshot: | Turn on the server. Make sure that the ssh server program is installed in the server virtual machine: sudo apt install openssh-server -y . | Enable and start ssh in the server: sudo systemctl enable ssh; sudo systemctl start ssh . | Test the connection by logging in to the server from the client. In this case, your client is your Host computer terminal application (in Windows, it is the CMD or powershell) | . ssh -p 2222 username_of_the_server@127.0.0.1 . | Read and answer the questions and you will connect sucessfully. | . ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-4-setup-ssh",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-4-setup-ssh"
  },"162": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 5 Setup virtual hosts",
    "content": "Virtual host allows us to serve more than one website in a single web server. By default, Apache has one server block enabled. This server block is served from the directory: /var/www/html. For a single website, all the files are placed within this directory. When we setup virtual hosts, each site has its own directory. The recommendation is to leave the default html directory and for each site a new directory inside /var/www. In this project, we will have one virtual site called myresume. You are welcome to use a different name just remember to adjust every command where the word myresume is reference for your preferred website domain name. Follow These Steps . | Create the directory for myresume as follows: sudo mkdir /var/www/myresume | Modify the ownership of myresume so that it is now owned by your user instead of root sudo chown -R $USER:$USER /var/www/myresume | Now let’s change the file permission so that the owner can read, write, and execute the files while granting only read and execute permissions to groups and others: sudo chmod -R 755 /var/www/myresume | Now lets create a simple html document to be served from our new virtual host. Create a document with the nano text editor called index.html in the /var/www/myresume/ directory: sudo nano /var/www/myresume/index.html. | Once the new document opens, type the following text: | . &lt;html&gt; &lt;head&gt; &lt;title&gt;My Resume Website&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;This is a sample document!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | . NOTE: If you don’t want to use Nano, you can also do this in a single command . sudo echo \"&lt;html&gt;&lt;head&gt;&lt;title&gt;My Resume Website&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is a sample document!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\" &gt; /var/www/myresume.index.html . | Now we need to create a virtual host file so that this new content can be served. The default configuration is located in /etc/apache2/sites-available/000-default.conf However, we do not need to touch this file, we can instead create a new one as it is best practice. To create a new config file, we are going to use nano again: sudo nano /etc/apache2/sites-available/myresume.conf | Add the following text to the domain config file: | . &lt;VirtualHost *:80&gt; ServerAdmin webmaster@localhost ServerName myresume ServerAlias www.myresume DocumentRoot /var/www/myresume ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &lt;/VirtualHost&gt; . | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | Now enable the site with the following command: sudo a2ensite myresume.conf | Now lets disable the default domain:sudo a2dissite 000-default.conf | Before we can refresh the configuration, we need to add a configuration line to the apache2.conf file. Open the file in nano:sudo nano /etc/apache2/apache2.conf | Add the following line at the end of the file:ServerName 127.0.0.1 | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | Now you can test the configuration for errors:sudo apache2ctl configtest | The output of the command should look like this: | . Syntax OK . | If there are no errors, restart Apache to apply the changes:sudo systemctl restart apache2 | Now, if you open a web browser in your host computer and go the URL: http://localhost:8080/ your index.html document should load. | . ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-5-setup-virtual-hosts",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-5-setup-virtual-hosts"
  },"163": {
    "doc": "Final Project Deliverable 2",
    "title": "Final Project Deliverable 2",
    "content": "Video:Deliverable 2 Latest Video 0-100! . ",
    "url": "/project/Final_project_deliverable2_web_server/",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/"
  },"164": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 1 Virtual Machine",
    "content": "Create a virtual machine that meets the following specifications: . | CPU: 1 Core | RAM: 1 GB | HDD: 10 GB | . These are the recommended system requirements for Ubuntu Server 22.04. ",
    "url": "/project/Final_project_deliverable2_web_server/#part-1-virtual-machine",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-1-virtual-machine"
  },"165": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 2 Install Ubuntu Server",
    "content": "Step 1 . Step 2 . Step 3 . Select Update to the new installer. This will update the Ubuntu installer and proceed with the installation. Step 4 . This step will automatically select the language layout of your keyboard. If for whatever reason it is different than what your physical keyboard has, then manually adjust it. Step 5 . Choose the default Ubuntu Server installation. We will need some of the repositories in the default installation. Step 6 . Since we are installing Ubuntu in a virtual machine that at the moment is configured to have a NAT network interface card, as long as your host PC has internet connection, you should automatically get an IP address. If you don’t, something is wrong with your VM, Host Machine, or Internet Connection. Note: If you are doing this project in the school’s network, be aware that the school’s routers are configured to block Bridged Ethernet adapters. Step 7 . Leave this part empty as we are not using a proxy. Step 8 . We will use the default mirror so there is no need to change this . Step 9 . This step is to format our disk. Here we will select the entire disk. To move around here use either the arrow keys or the tab key. Step 10 . This step is just to let you know the changes that will be made to the server’s virtual hard drive. Step 11 . Here you will enter the information about your computer. Write this information down because you will needed it later. Step 12 . It is a good idea to install ssh now as we will use it later on. Do not import SSH keys. We will do that manually later. Step 13 . Do not select these services. We won’t be using them. Step 14 . This is the installation process. Once it is done it will start updating the system. Once the update is done, it will ask you to reboot. Step 15 . Step 16 . Here Just press enter. Virtualbox will unmount the installation disk for you . ",
    "url": "/project/Final_project_deliverable2_web_server/#part-2-install-ubuntu-server",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-2-install-ubuntu-server"
  },"166": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 3 Install Apache",
    "content": "First, login to the server. You will need to type your username and password. Here is an example: Notice that the password is hidden while typing just like when you are typing it in the terminal emulator. Be aware that during the upgrade, Ubuntu will ask you to restart some services. Apache is available in Ubuntu’s default repositories. However, before we can start installing new packages, let’s update the system: . sudo apt update; sudo apt upgrade -y . To install Apache use: . sudo apt install apache2 -y . Be aware that here you will also need to restart some services here. ",
    "url": "/project/Final_project_deliverable2_web_server/#part-3-install-apache",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-3-install-apache"
  },"167": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 4 Setup SSH",
    "content": "Before Setup . Before we can setup SSH, we need to enable the firewall. Use this command: . sudo ufw enable . Now lets configure ufw to allow Apache and SSH traffic: . sudo ufw allow 'Apache' sudo ufw allow 'OpenSSH' . Now check the status of the firewall: . sudo ufw status . Now lets check the status of Apache and SSH to make sure they are running: . systemctl status apache2 --no-pager systemctl status ssh --no-pager . Both commands should return active (running) if they do not, restart the services with the command: . sudo systemctl restart apache2 ssh . Change the Network Adapter . Follow these steps: . | Turn off the server virtual machine using this command: sudo shutdown now | Change the server network adapter configuration from NAT to Bridge. However, there is a chance that using a bridge adapter won’t work for you. Some IDS (Instruction Detection Systems) and smart routers may prevent you from getting an Ip Address if your Network Adapter is bridge. In this case, you need to use port forwarding in your virtual machine. Here is an example: . | . Connect with SSH . Follow these steps: . | Make sure SSH is installed in both the client and the server: sudo apt install openssh -y | In the server, the SSH service must be already running, if it is not running, use this command to enable it and start it: sudo systemctl enable ssh; sudo systemctl start ssh | You will need to get the IP address of the server. Use this command to get the IP address: hostname -I. Additionally, you can setup a static IP address in your server. Here is a guide on how to do it. If you are doing this project in your laptop, I advise to stay away from setting up static IP addresses. | On the client computer use this command: | If you are using port forwarding, your command would be:ssh -p 2222 username@127.0.0.1 | . Setup private and public key authentication with or without password (optional) . | On the server, configure the firewall to accept ssh connections. sudo ufw allow ssh sudo ufw enable sudo ufw status . | Now we need to generate an ssh key in our client computer: In your client machine type:ssh-keygen Now you can type this command to copy your ssh key to the server:ssh-copy-id -i .ssh/id_rsa.pub webmaster@server-ip-address . | if you use port forwarding your command will be:ssh-copy-id -p 2222 username@127.0.0.1 | Now you can connect to your server without having to remember the password. | . ",
    "url": "/project/Final_project_deliverable2_web_server/#part-4-setup-ssh",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-4-setup-ssh"
  },"168": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 5 Setup virtual hosts",
    "content": "Virtual host allows us to serve more than one website in a single web server. By default, Apache has one server block enabled. This server block is served from the directory: /var/www/html. For a single website, all the files are placed within this directory. When we setup virtual hosts, each site has its own directory. The recommendation is to leave the default html directory and for each site a new directory inside /var/www. In this project, we will have one virtual site called mywebsite. You are welcome to use a different name just remember to adjust every command where the word mywebsite is reference for your preferred website domain name. Follow These Steps . | Create the directory for mywebsite as follows: sudo mkdir /var/www/mywebsite | Modify the ownership of mywebsite so that it is now owned by your user instead of root sudo chown -R $USER:$USER /var/www/mywebsite | Now let’s change the file permission so that the owner can read, write, and execute the files while granting only read and execute permissions to groups and others: sudo chmod -R 755 /var/www/mywebsite | Now lets create a simple html document to be served from our new virtual host. Create a document with the nano text editor called index.html in the /var/www/mywebsite/ directory: sudo nano /var/www/mywebsite/index.html. | Once the new document opens, type the following text: | . &lt;html&gt; &lt;head&gt; &lt;title&gt;My First Website&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;This is a sample document!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | . NOTE: If you don’t want to use Nano, you can also do this in a single command . sudo curl https://cis106.com/assets/basic.html -o /var/www/mywebsite/index.html . | Now we need to create a virtual host file so that this new content can be served. The default configuration is located in /etc/apache2/sites-available/000-default.conf However, we do not need to touch this file, we can instead create a new one as it is best practice. To create a new config file, we are going to use nano again: sudo nano /etc/apache2/sites-available/mywebsite.conf | Add the following text to the domain config file: | . &lt;VirtualHost *:80&gt; ServerAdmin webmaster@localhost ServerName mywebsite ServerAlias www.mywebsite DocumentRoot /var/www/mywebsite ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &lt;/VirtualHost&gt; . | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | Now enable the site with the following command: sudo a2ensite mywebsite.conf | Now lets disable the default domain:sudo a2dissite 000-default.conf | Before we can refresh the configuration, we need to add a configuration line to the apache2.conf file. Open the file in nano:sudo nano /etc/apache2/apache2.conf | Add the following line at the end of the file:ServerName 127.0.0.1 | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | Now you can test the configuration for errors:sudo apache2ctl configtest | The output of the command should look like this: | . Syntax OK . | If there are no errors, restart Apache to apply the changes:sudo systemctl restart apache2 | Now, if you open a web browser in your host computer and go the URL: http://ip.address.of.your.server/ your index.html document should load. | . ",
    "url": "/project/Final_project_deliverable2_web_server/#part-5-setup-virtual-hosts",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-5-setup-virtual-hosts"
  },"169": {
    "doc": "Final Project Deliverable 3",
    "title": "Final Project Deliverable 3",
    "content": "Video:Deliverable 3 Latest Video 0-100! . For this deliverable, you have 2 options; Pick one! . Option 1: Resume . | Create a simple resume of yourself. Here is an example of the kind of information to include: . | http://resume-template.joelglovier.com/ | . | You do not need to include a photo of yourself, instead use a stock photo . | You can find stock photos here: https://www.pexels.com/ | . | Once you have created your markdown file, convert the file to HTML. | Compress all the files into a single archive so that they are easier to move. | Send the files to the server. | Once you have transferred the archive to the server, decompress the archive and move the files to their respective folder so that they can be served by the web server. | Open your website in the browser of your host computer or Ubuntu desktop computer and take a screenshot of the browser. | To demonstrate the completion of this deliverable, submit the following: . | The URL to the GitHub repository in the final project folder where I can find all the files you used for creating the site including the markdown file, HTML file and the images. | The screenshot of your website running | . | . Option 2: A simple site . | Create a markdown file that contains instructions on how to set up a Web Server in Ubuntu Server. Include screenshots where you find them necessary. Make sure to explain each command that is necessary. Your Deliverable must contain the following: . | Introduction (Keep it simple) | Basic terminology that the reader must know | Step-by-step instructions | Step 1: Installing VirtualBox | Step 2: Installing Ubuntu Server | Step 3: Installing Apache | Step 4: Setting up the firewall | . | After creating the markdown file, convert the markdown file to html. | Rename the html file to index.html | Compress all the files, including images, in an archive and transfer the file to your web server | Decompress the archive in your web server and move all the files to their proper destination. | Open your site in the host computer or Ubuntu desktop computer and take a screenshot. | To demonstrate the completion of this deliverable, submit the following: . | The URL to the GitHub repository in the final project folder where I can find all the files you used for creating the site including the markdown file, HTML file and the images. | The screenshot of your website running | . | . ",
    "url": "/project/Final_project_deliverable3/",
    
    "relUrl": "/project/Final_project_deliverable3/"
  },"170": {
    "doc": "Cd ../ vs cd -",
    "title": "Cd ../ vs cd -",
    "content": " ",
    "url": "/extra/cd_parent_vs_cd_previous/",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/"
  },"171": {
    "doc": "Cd ../ vs cd -",
    "title": "Concepts",
    "content": ". | Environment variable: is a dynamic-named value typically used to configure the behavior of programs and applications, provide information about the system environment, or store temporary data. | $PWD: Stores the absolute path of the current working directory | $OLDPWD: Stores the absolute path of the previous current working directory | . | Parent directory: refers to the directory that contains another directory or file. It’s the directory that is one level higher in the directory tree hierarchy. | Current directory: refers to the directory in which you are currently working or the directory that your shell session is currently “in.” | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#concepts",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#concepts"
  },"172": {
    "doc": "Cd ../ vs cd -",
    "title": "cd ..",
    "content": "We user cd ../ when we want to navigate the the directory above the current directory. Say that your current working directory is /home/student/Downloads/Games/Doom/ and you want to go to /home/student/Downloads/Games. In this instance the cd ../ command will take you there. The 2 dots indicate the parent directory of the current working directory. You can use it to navigate to more than 1 parent directory for example, if we want to go to /home/student, we would use cd ../../../ . Notice that in this instance we only moved up in the directory tree. ",
    "url": "/extra/cd_parent_vs_cd_previous/#cd-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#cd-"
  },"173": {
    "doc": "Cd ../ vs cd -",
    "title": "cd -",
    "content": "cd - is used to move between 2 directories. These are the current directory and the previous current directory. Linux has 2 environment variables to keep track of this information; $OLDPWD and $PWD. Every time you use the cd command these 2 variables get updated to reflect the current information. So if your current working directory is /home/student/Downloads/Games/Doom and you use cd to change to /usr/share/themes then the current value of those variables would be: . | OLDPWD=home/student/Downloads/Games/Doom | PWD=/usr/share/themes | . Now, if you use the cd - command, then bash will change directories to the value in $OLDPWD and update the variables accordingly. So the values now are: . | OLDPWD=/usr/share/themes | PWD=home/student/Downloads/Games/Doom | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#cd--",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#cd--"
  },"174": {
    "doc": "Cd ../ vs cd -",
    "title": "When should I use cd -?",
    "content": "Well that depends on your workflow and what you are doing at the moment. Since we can switch between 2 directories without typing the path, this comes handy in the following essenarios: . | If you are working in two directories and need to switch between them frequently, and the path is long and you don’t want to type all of that. | If you are editing files in different directories using a command-line | If you are working in a temporary directory you can switch back and forward between the temp directory and the current directory | If you are writing script that requires you to move from 2 directories, cd - allows you to do that without storing the paths in variables. | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd--",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd--"
  },"175": {
    "doc": "Cd ../ vs cd -",
    "title": "When should I use cd ../?",
    "content": "All the time honestly! typing .. is quicker than typing a path backwards. So whenever you need to switch back to the parent directory, use this instead! . ",
    "url": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd-"
  },"176": {
    "doc": "Cd ../ vs cd -",
    "title": "Then what’s up with .. and .?",
    "content": "A single dot (.), represents the current directory where the 2 dots, as mentioned earlier represents the parent directory. This means that: . | ls . and ls do the same thing because by default ls will list the current directory. | cd . will do nothing because it will try to change directory to the current directory. And you cannot go into a room that you are already in! | . However, there are legit uses for the single dot (.) For example, when you want to copy a file from one directory the current directory: . | cp ~/Pictures/Wallpapers/wall.png ./ | . Or when writing paths to files in the current directory in markdown: . | ![wall](./wall.png) | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#then-whats-up-with--and-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#then-whats-up-with--and-"
  },"177": {
    "doc": "Markdown Extra Practice",
    "title": "Markdown Extra Practice",
    "content": "If you wish to practice more markdown, try to recreate the following documents in markdown: . ",
    "url": "/extra/lab1_md_extra_practice/",
    
    "relUrl": "/extra/lab1_md_extra_practice/"
  },"178": {
    "doc": "Markdown Extra Practice",
    "title": "Document 1",
    "content": "Create a markdown document from this page, that contains the following: . | Several sections of paragraphs | ordered and unordered lists | A couple of images . | The Linux mascot | Linux distributions logos | Desktop environment screenshots | . | At least 1 table. | . Try to make the document look as professional as possible . ",
    "url": "/extra/lab1_md_extra_practice/#document-1",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-1"
  },"179": {
    "doc": "Markdown Extra Practice",
    "title": "Document 2",
    "content": "To practice note taking and code formatting, use this introduction to python website and create a 1 page document that shows how to get started with python. You just simply include the following: Learn the Basics . | Hello, World! | Variables and Types | Lists | Basic Operators | String Formatting | Basic String Operations | Conditions | Loops | . ",
    "url": "/extra/lab1_md_extra_practice/#document-2",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-2"
  },"180": {
    "doc": "Markdown Extra Practice",
    "title": "Document 3",
    "content": "To practice tables, use the following images and create a pdf file that contains all of these tables: . Table 1 . You can download the images from here . ",
    "url": "/extra/lab1_md_extra_practice/#document-3",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-3"
  },"181": {
    "doc": "Learning Git",
    "title": "Learning Git",
    "content": ". | Presentation here | Cheat Sheet here | . ",
    "url": "/extra/learning-git/",
    
    "relUrl": "/extra/learning-git/"
  },"182": {
    "doc": "Learning Git",
    "title": "Setup Git",
    "content": ". | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | . ",
    "url": "/extra/learning-git/#setup-git",
    
    "relUrl": "/extra/learning-git/#setup-git"
  },"183": {
    "doc": "Learning Git",
    "title": "Setup SSH authentication",
    "content": ". | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. See examle here: . | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboad in the step prior. Type yes (the whole word) and press enter and you are done . | Test you ssh connection by using this command: ssh -T git@github.com You will see the following outcome: . | . If you do not see an error message or a different message than the one shown prior, then your SSH connection is correct. Now you can push and clone using SSH. ",
    "url": "/extra/learning-git/#setup-ssh-authentication",
    
    "relUrl": "/extra/learning-git/#setup-ssh-authentication"
  },"184": {
    "doc": "Mkdir, touch, and rm",
    "title": "Mkdir, touch, and rm",
    "content": ". | . | Commands reference table | . | . | MKDIR . | 2.1. Description | 2.2. Formula/usage | 2.3. Examples | 2.4. Practice | . | 2.4.1. Description | 2.4.2. Solution | . | . | . | TOUCH . | 3.1. Description | 3.2. Formula/usage | 3.3. Examples | 3.4. Practice | . | 3.4.1. Description | 3.4.2. Solution | . | . | . | RM . | 4.1. Description | 4.2. Formula/usage | 4.3. Examples | 4.4. Practice | . | . | . | MV . | 5.1. Description | 5.2. Formula/usage | . | 5.2.1. Moving | 5.2.2. Renaming * 5.3. Examples * 5.4. Practice | . | . | . | CP . | 6.1. Description | 6.2. Formula/usage | 6.3. Examples | 6.4. Practice | . | . | . ",
    "url": "/extra/mkdir_touch_rm/",
    
    "relUrl": "/extra/mkdir_touch_rm/"
  },"185": {
    "doc": "Mkdir, touch, and rm",
    "title": "1. Commands reference table",
    "content": "These are the most basic commands to manage files and directories. | Command | Definition | Formula | Example | . | mkdir | makes directories | mkdir + option + new directory(ies) name | mkdir ~/Downloads/games | . | touch | makes files | touch + option + new file(s) name | touch ~/Downloads/games/list.txt | . | rm | removes files | rm + option + files to delete | rm ~/Downloads/games/list.txt | . | mv | moves files &amp; directories | mv + option + source path + destination path | mv ~/Downloads/games ~/Documents/ | . | mv | rename files &amp; directories | mv + option + old name + new name | mv ~/Documents/games/old.txt ~/Documents/games/mylist.txt | . | cp | copies files &amp; directories | cp + option + sources path + destination | cp -r ~/Downloads/oldGames/ ~/Games/ | . ",
    "url": "/extra/mkdir_touch_rm/#1-commands-reference-table",
    
    "relUrl": "/extra/mkdir_touch_rm/#1-commands-reference-table"
  },"186": {
    "doc": "Mkdir, touch, and rm",
    "title": "2. MKDIR",
    "content": "2.1. Description . | Used for create directories. Mkdir can make 1 or multiple directories by separating each directory name with a space. | . 2.2. Formula/usage . mkdir + option + directory names . Where directory name can be: . | Just the name of the directory if you want to create them in the current working directory | Absolute or relative path if you want to create the directory in a different location | . 2.3. Examples . | Using relative path: Create a directory in your current working directory called games . | mkdir games | . | Using relative path: Create 3 directories inside the games directories called: action, adventure,fps . | mkdir games/action games/adventure games/fps | . | Using absolute path: Create a directory in the action directory called wonderboy . | mkdir ~/games/action/wonderboy | . | Using absolute path: Create 2 directories, one in fps and another in adventure. Call them cod and uncharted . | mkdir ~/games/fps/cod ~/games/adventure/uncharted | . | Create a parent and subdirectory at the same time . | mkdir -p ~/Documents/school/english/homework | . | Create a directory and display a message confirming the directory creation (verbose output) . | mkdir -pv ~/Downloads/games | mkdir -pv ~/Downloads/games/action games/fps/doom practice | . | . 2.4. Practice . 2.4.1. Description . You have just been assigned the task of organizing a new project called “ProjectPhoenix” on your company’s server. For this project, you need to set up a directory structure that will hold various types of documents. The structure should look like this: . ProjectDelta/ ├── planning/ │  ├── meetings/ │ └── drafts/ ├── development/ │ ├── code/ │ └── documentation/ └── testing/ ├── unit_tests/ └── integration_tests/ . 2.4.2. Solution . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#2-mkdir",
    
    "relUrl": "/extra/mkdir_touch_rm/#2-mkdir"
  },"187": {
    "doc": "Mkdir, touch, and rm",
    "title": "3. TOUCH",
    "content": "3.1. Description . touch is used to create an empty file or to update the timestamp of an existing file. If the specified file does not exist, touch will create it. If the file exists, touch will update its access and modification times to the current time. 3.2. Formula/usage . | touch + option + file(s) name | . Where file name can be: . | Just the name of the files if you want to create them in the current working directory | Absolute or relative path if you want to create the directory in a different location | . 3.3. Examples . | Create multiple files in the current working working directory . | touch notes.txt program.py page.html | . | Create multiple files in different directories using absolute path . | touch ~/games/action/wonderboy/run.txt ~/games/adventure/uncharted/todo.md | . | Create multiple files in different directories using relative path . | touch games/action/run.sh games/fps/readme.md | . | . 3.4. Practice . 3.4.1. Description . In th previous practice, you created a directory structure. Add the following files to each directory: . ProjectDelta/ ├── development │   ├── code │   │   ├── app.js │   │   ├── index.html │   │   └── styles.css │   └── documentation │   └── readme.md ├── planning │   ├── drafts │   │   └── notes.md │   └── meetings │   └── schedule.docx └── testing ├── integration_tests │   └── instructions.md └── unit_tests └── test.js 10 directories, 8 files . 3.4.2. Solution . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#3-touch",
    
    "relUrl": "/extra/mkdir_touch_rm/#3-touch"
  },"188": {
    "doc": "Mkdir, touch, and rm",
    "title": "4. RM",
    "content": "4.1. Description . The rm command is used to remove files and directories. It is a powerful command that can permanently delete files, so it should be used with caution. By default, rm removes files, but with certain options, it can also delete directories and their contents. In Linux, only empty directories can be removed. When you try to remove non-empty directories the following error is shown: “rm: cannot remove 'directory_name/': Is a directory”. Even when using the rmdir command, trying to remove a non empty directory results in the following error: “rmdir: failed to remove 'directory_name/': Directory not empty”. To remove directories use the -r option. See examples. 4.2. Formula/usage . | rm + option + directories or files to remove | . Where file/directory name can be: . | Just the name of the files/directories if they are located in the current working directory | Absolute or relative path if they are located in a different location | . Common Options: . | -f: Force removal without prompting for confirmation. | -r or -R: Recursively remove directories and their contents. | -i: Prompt before each removal. | -v: Verbose mode, showing the files as they are removed. | . 4.3. Examples . | Remove files using absolute path . | rm ~/games/action/run.sh ~/games/adventure/uncharted/todo.md | . | Remove files using relative path . | rm games/fps/readme.md games/notes.txt games/page.html | . | Remove files and directories but prompt for confirmation before removing and display removal message when done . | rm -vir games/program.py ~/ProjectDelta | . | Remove a non empty directory forcing the removal . | rm -rf games/ | . | . 4.4. Practice . You have a folder named “OutdatedProjects” in your home directory. This folder contains old project files that you no longer need, including subdirectories with their own files. You want to clean up your home directory by completely removing the “OutdatedProjects” folder and all of its contents. The directory structure looks like this: . /home/user/OutdatedProjects/ ├── projectA/ │ └── old_data.txt ├── projectB/ │ └── old_report.txt ├── projectC/ │ └── notes.txt └── archived_files.txt . Use the rm command to delete the entire “OutdatedProjects” directory, including all of its subdirectories and files, using an absolute path. Before you can run the rm command, you will need to create the directories. Run this command that will run a script to generate the directories and files for you. curl https://cis106.com/assets/extra/rm_practice.sh | bash . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#4-rm",
    
    "relUrl": "/extra/mkdir_touch_rm/#4-rm"
  },"189": {
    "doc": "Mkdir, touch, and rm",
    "title": "5. MV",
    "content": "5.1. Description . The mv command is used for moving and renaming files and directories. Keep the following points in mind about the mv command: . | mv cannot rename more than 1 file at the time | mv can move and rename a file at the same time | mv will set the last argument as the destination or file new name | Common options of the mv command: . | -i: Prompt before overwriting an existing file. | -u: Move only when the source file is newer than the destination file or when the destination file is missing. | -v: Verbose mode, showing the files as they are moved or renamed. | . | . 5.2. Formula/usage . 5.2.1. Moving . | mv + option + files/directories to move + destination directory 5.2.2. Renaming . | mv + option + old name + new name | . 5.3. Examples . | Move multiple files using a combination of absolute path and relative path . | mv -v ~/games/ schoolProject/ Documents/school/hmw.txt ~/Downloads/new_folder/ . | In this example: . | ~/games, schoolProject/, and, Documents/school/hmw.txt are moved to ~/Downloads/new_folder/ | -v enables verbose output. | . | . | . | Rename a directory . | mv -v ~/Downloads/new_folder ~/Downloads/projectAvalon/ | . | Rename a file . | mv -v ~/Downloads/projectAvalon/hmw.txt ~/Downloads/projectAvalon/submission.txt | . | Move and rename a file in a single command . | mv -v ~/Downloads/projectAvalon/submission.txt ~/Documents/cis107_document.txt | . | Move and rename a directory in a single command . | mv -v ~/Downloads/projectAvalon/ ~/Documents/Avalon | . | . 5.4. Practice . You are working on a web development project named “AlphaProject”. You have been give all the files for this project. Your task is to organize the folder. You have to use the mv command for renaming and moving. You are not allowed to create new directories. To get all the necessary files, run this command, which will run a script to generate the directory “AlphaProject” including all the necessary files. curl https://cis106.com/assets/extras/mv_practice.sh | bash . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#5-mv",
    
    "relUrl": "/extra/mkdir_touch_rm/#5-mv"
  },"190": {
    "doc": "Mkdir, touch, and rm",
    "title": "6. CP",
    "content": "6.1. Description . The cp command is used to copy files and directories. Cp requires -r option to copy directories. You can copy and rename a directory or file in a single command too. However, this only works when trying to copy a single file or directory. This is like making a backup sort-of-speak. Common Options: . | -r or -R: Recursively copy directories and their contents. | -i: Prompt before overwriting an existing file. | -u: Copy only when the source file is newer than the destination file or when the destination file is missing. | -v: Verbose mode, showing the files as they are copied. | -a: Copy files and directories, preserving attributes like timestamps and permissions. | . 6.2. Formula/usage . | cp + option + source files/directories + destination directory | . 6.3. Examples . | Copy several files using a combination of absolute and relative path. | cp -r ~/projectOrion/ ~/Downloads/games.txt Videos/example.mp4 Pictures/bg.png ~/bookProject/ . | Note: Here we have to use -r because there is a directory in the sources to copy (~/projectOrion) | . | . | Copy a directory with verbose output . | cp -rv ~/projectOrion/ ~/Documents/ | . | . 6.4. Practice . Copy the directory of the previous practice. Copy the directory to the Documents directory. The name of the copy is: AlphaProjectBackup . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#6-cp",
    
    "relUrl": "/extra/mkdir_touch_rm/#6-cp"
  },"191": {
    "doc": "VM Test Activity",
    "title": "VM Test Activity",
    "content": " ",
    "url": "/extra/testingvms/",
    
    "relUrl": "/extra/testingvms/"
  },"192": {
    "doc": "VM Test Activity",
    "title": "Goal",
    "content": ". | All the activities in this lab should be executed reliably with minimal slow downs with a virtual machine that meets the following criteria: . | CPU: 2 Cores | RAM: 4 GB | HDD: 50 GB | . ",
    "url": "/extra/testingvms/#goal",
    
    "relUrl": "/extra/testingvms/#goal"
  },"193": {
    "doc": "VM Test Activity",
    "title": "Applications installed:",
    "content": ". | Code Editor: VS Code | Text Editor: Geany | Web Browser: Firefox, Librewolf, Chromium | . ",
    "url": "/extra/testingvms/#applications-installed",
    
    "relUrl": "/extra/testingvms/#applications-installed"
  },"194": {
    "doc": "VM Test Activity",
    "title": "Test 1: Creating Markdown Documents",
    "content": ". | Download or clone this github repository: https://github.com/ra559/markdown-test | Open the directory in vs code | Create a markdown file called: husky.md | Use the text in the husky.txt file to create the husky.md file. | The document should contain as much markdown format as possible. | Convert the document to pdf | Convert the document to html | Preview the pdf file in vs code | Preview the html file using live server | . were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-1-creating-markdown-documents",
    
    "relUrl": "/extra/testingvms/#test-1-creating-markdown-documents"
  },"195": {
    "doc": "VM Test Activity",
    "title": "Test 2: Basic Website",
    "content": ". | Open the markdown-test directory from the previous test in vs code | Add some css and bootstrap to the html | Add some javascript | Preview the website with live preview | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-2-basic-website",
    
    "relUrl": "/extra/testingvms/#test-2-basic-website"
  },"196": {
    "doc": "VM Test Activity",
    "title": "Test 3: Basic Jekyll Site",
    "content": ". | Use this guide to install Jekyll | Use this guide to create your jekyll site. | Add some entries to your site | Constantly server your site with --trace enabled. | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-3-basic-jekyll-site",
    
    "relUrl": "/extra/testingvms/#test-3-basic-jekyll-site"
  },"197": {
    "doc": "VM Test Activity",
    "title": "Test 3: Terminal + Vs Code + Web Browser",
    "content": ". | Use this Linux FS guide to practice some commands. | Create a markdown file and take screenshots. | Add the screenshots to the markdown file and convert the file to pdf | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-3-terminal--vs-code--web-browser",
    
    "relUrl": "/extra/testingvms/#test-3-terminal--vs-code--web-browser"
  },"198": {
    "doc": "The Linux FS",
    "title": "The Linux FS",
    "content": "All The videos here . ",
    "url": "/extra/thelinuxfs/",
    
    "relUrl": "/extra/thelinuxfs/"
  },"199": {
    "doc": "The Linux FS",
    "title": "Other Review Videos:",
    "content": ". | REVIEW 4: The LS command and Practice | Linux Tutorials The ls command GeeksforGeeks | How to Use The ls Command on the Linux Command Line | . ",
    "url": "/extra/thelinuxfs/#other-review-videos",
    
    "relUrl": "/extra/thelinuxfs/#other-review-videos"
  },"200": {
    "doc": "The Linux FS",
    "title": "Basic Concepts",
    "content": ". | The root directory: The first directory in the filesystem that contains the entire filesystem represented by “/”. | Current working directory: Also known as the present working directory. It is the directory where you are currently working in. You are always working from a directory. | Parent Directory: a dirtectory containing one or more directories and files. | Child directory: a better name for this is a subdirectory or subfolder. This is a directory inside another directory. See image for visual reference. | . | YOUR HOME DIRECTORY: This is your user’s personal directory where all your files are located. Every user has it’s own home directory just like in a apartment complex they all residents have their own apartment while sharing the common areas. You have total ownership of your home directory but outside of the home directory only the root user can make changes. An example absolute path, assuming that user name is maria53, would be /home/maria53 | The home Directory: This is the parent directory of all the home directories. This is where all the users’ home directory are. The absolute path of this directory is /home. Noticed that it starts at the root. | The root user: This is the administrator account of your system. To perform administrative tasks or to manage directories and files outside of your home directory, you must obtain root privileges using the sudo command at the beginning of the command. | Path name: Also known as file path. This is the location of a given file in your computer. A path name can be absolute path or relative path. | Absolute Path: The location of a file starting at the root of the file system. For example, /home/maria53/Downloads/list.txt is the absolute path of the file list.txt. The advantage of absolute paths is that they can be used at any point of the file system regardless of your current directory. Any command that is given an absolute path will be able to find the file because it will start at the beginning of the filesystem. The disadvantage is that a command can be long to type if the file path is long. | Relative Path: The location of a file starting from a child directory of the current working directory or from the current directory itself. The advantage of using relative path is that typing commands is faster. The disadvantage of relative paths is that they cannot work from anywhere in the filesystem. In order for a relative path to work, a file must be reachable from the current directory onwards. Another disadvantage of relative paths is that they require a better mental understanding of the linux filesystem in the sense that you must keep a mental image of the directory tree that you are working with. An example of a relative path would be Downloads/list.txt assuming that the current working directory is /home/maria53 Special characters: . Special characters are function like commands that tell the shell to perform a specific action without having to type the complete command. These special characters make working on the command line more efficiently. Here is short list to keep in mind. | . (single period): represents the current directory. | .. (2 consecutive periods): represents the parent directory. | ~ (tilde character): expands the current users home directory. It is like a variable that the shell uses to store the absolute path of the user’s home directory. This ~/Downloads is the same as typing /home/maria53/Downlods | / (one forward slash): as mentioned earlier, this is the root directory and the shortest path in the system. This is the beginning of the directory tree. There is nothing before it and everything after it. | - (hyphen-minus): is used to move to the previous current working directory. | # (hash or number sign): This is used for single line comments in shell scripting. | ! (single exclamation mark): used for repeating a command from the history. For example !5 will repeat the 5th command in the command history. To view the entire command history type history. | !! (2 consecutive exclamaton marks): are used for repeating the previous command. For example, !! will repeat the previous command while, sudo !! will repeat the previous command but will add sudo at the beginning of the command. This is useful for times when we forget to type sudo when performing administrative tasks. | . Bash Environment Variables . | What is a variable? . | In programming, a variable is place to store data. A variable is like a box with a label. For example, if you a lot of pens in your desk and you place them in a box a label it pens, now the box store your pens. In programming a variable can be used to store temporary or permanent information that you will continuously reuse in your program. For example, username='maria53' the variable name now stores the value maria. When evener the programs need to access the maria’s username, it can do it by referencing the variable username. | . | What is an environment variable? . | Environment variables store values of a user’s environment and can be used in commands in the shell. These values can be unique to the user’s environment which makes them ideal when writhing commands that you want to use regales of which user is using the computer. To see a list of your environment variables type env. To use the value stored in an environment variable you must prepend the variable name with a $. Here are some useful environment variables: | $USER = stores the current’s user username | $HOME = stores the absolute path of current’s user home directory | $PWD = stores the absolute path of the present working directory. | $OLDPWD = stores the absolute path of the previous current working directory | . | . Bash Tips: . | Tab Completion: autocomplete a command/pathname by pressing the tab key | Arrow keys: allows you to move, edit, and repeat commands | Ctrl + a: go to the start of the command line | Ctrl + e: go to the end of the command line . | Shortcut list | . | . ",
    "url": "/extra/thelinuxfs/#basic-concepts",
    
    "relUrl": "/extra/thelinuxfs/#basic-concepts"
  },"201": {
    "doc": "The Linux FS",
    "title": "Commands to navigate the linux filesystem",
    "content": "To navigate the linux filesystem, you only need to master 3 commands: cd, pwd and ls. While there are other useful commands, those can be considered complimentary and you should learn them after you have mastered those 3. PWD . | Usage . | Displays the absolute path of the current working directory. | . | Formula . | pwd | . | Examples . | Print the absolute path of current working directory . | pwd | . | . | . CD . | Usage . | Changes the current working directory. In other words, it moves you from one directory to another. By default, it will always send you to your home directory. | . | Formula . | cd + destination absolute path or relative path | . | Examples . | Go (change your current directory) to your home directory (there is more than 1 way of doing this): . | cd (without any arguments, cd will take you home) | cd ~ (using the ~ special character. as ~ will expand to the absolute path of the user’s home directory) | cd $HOME (using the $HOME environment variable) | cd /home/$USER/Downloads (using $USER environment variable in the path) | . | Go to a specified directory with absolute path: . | cd /usr/share/themes | . | Go to a specified directory with relative path assuming your current working directory is /home . | cd maria53/Downloads/ | . | Go to the previous working directory. This is useful when you are working with 2 directories located far in the directory tree . | cd - | . | Go to the previous directory in the directory tree. One directory above. | cd ../ | . | Go to 2 directories above the directory tree . | cd ../../ | . | . | . Practice CD command: . Try to complete these tasks without looking at the solution. Use the image below as a reference: . | Using absolute path, go to the directory “/user/share/themes/Adwaita” | Go back to your home directory. | Go back to the “/user/share/themes/Adwaita” using the - special character. | Go to the root of the filesystem using the “..” special character. | Go to your “Downloads” directory 1 directory at the time. Display/Print your present working directory once you have reached the “Downloads” directory. | Go back to your home directory and then to the “Pictures” directory. | . Show Solution . LS . | Usage . | ls is used for listing files and directories. By default it will list the current directory when no directory is specified. Listing means to see what is inside a directory. | . | Formula . | ls + option + directory to list | . | Examples . | See all the options of the ls command (extracted from the man page): . | ls --help | . | List the current directory: . | ls | . | List all the files including hidden files in current directory: . | ls -A | . | List all the files inside a given directory: . | ls -A /usr/share/fonts/X11 (absolute path) | ls -A Documents/ (relative path assuming that the $PWD is $HOME) | . | Long list a directory . | ls -lA ~/Pictures | . | List a directory recursively . | ls -R Documents/ | . | Long list a directory only . | ls -ld Documents/ | . | List a directory sorted by last modified . | ls -t Documents/ | . | List a directory sorted by file size . | ls -S Documents/ | . | Long list a directory excluding group and owner information, with human readable file size and sorted in reverse order. | ls -lhgGr Documents/ | . | . | . Output of LS -L explained: . Practice LS command: . Try to complete these tasks without looking at the solution. | Use this command to download some example files: curl https://raw.githubusercontent.com/ra559/cis106/main/assets/scripts/practice_ls.sh | bash | The command above will create a directory in your home directory called practicels Here you will find 10 example files to practice ls. If the command above did not work, read the output carefully and try to fix it yourself. You can also download the zip file on your own. Read the basic script for the URL. | . | list all the files in the practice directory. | long list all the files in the practice directory. | long list all the files in the practice directory sorted by file size with human readable file sizes | long list all the files in the practice directory sorted by file size with human readable file sizes and in reverse order. | long list all the files in the practice directory without the group and owner, with human readable file sizes, sorted by file extension and with full time stamp. | . Show Solution . Tree . | Usage . | used to display a recursive directory listing (tree) of files. | . | Formula . | tree + option + directory | . | Examples . | Display a tree of the home directory . | tree ~ or tree $HOME or tree /home/$USER | . | Display a tree of a directory with file permissions . | tree -p ~/practicels | . | Display a tree of a directory with the full path prefix, with the user and group owner, human readable file sizes, and the date of last modified. | tree -pughD ~/practicels/ | . | . | . EXA . | Usage . | Used the same way as ls. To list files and directories. Exa is a modern replacement for ls written in Rust. Exa is not installed by default. You will need to install it using your linux distribution package manager. | . | Formula . | exa + option + directory | . | Examples . | list all files in a given directory in a single line . | exa -1 ~/practicels | . | long list all the files in a given directory . | exa -l ~/practicels | . | long list all the files in a given directory with headers . | exa -lh ~/practicels | . | list a directory in a tree like format . | exa -T ~/practicels | . | . | . ",
    "url": "/extra/thelinuxfs/#commands-to-navigate-the-linux-filesystem",
    
    "relUrl": "/extra/thelinuxfs/#commands-to-navigate-the-linux-filesystem"
  },"202": {
    "doc": "Wildcards",
    "title": "Wildcards",
    "content": "Note: Work in progress. ",
    "url": "/extra/wildcards/",
    
    "relUrl": "/extra/wildcards/"
  },"203": {
    "doc": "Wildcards",
    "title": "Description",
    "content": "Wildcards or file globing is a shell feature that, using special characters, allows us to rapidly specify groups of filenames. Because we work with files all the time, it is useful to be able to work with multiple files at the same time. Why and when should I use a wildcard? . Using wildcards can save you a lot of time. Imagine you need to move all the text files in a folder. You could move them one by one—if you know each file’s name. But what if there are 300 files? Moving them one at a time would take forever! Wildcards help you by allowing you to match all files that meet a certain pattern or criteria, so you can move them all at once with a single command. Here are some examples: . | Copy all photos from a drive to a flash drive. | Delete certain types of files from a folder. | List all files that have a date in their name. | . There are only 3 wildcards. Here is how they work: . | Wildcard | definition | example | . | * | matches 0 to any number of characters | ls ~/Downloads/*.png | . | ? | matches 1 character | ls ~/Downloads/f?ll.sh | . | [] | matches 1 character from a set | ls ~/Downloads/f[0-9]ll.sh | . ",
    "url": "/extra/wildcards/#description",
    
    "relUrl": "/extra/wildcards/#description"
  },"204": {
    "doc": "Wildcards",
    "title": "What does “matches x number of character” really mean?",
    "content": "This refers to the number of characters in the file name that can be matched everytime the wildcard is used in a command. For example, here is an illustration using the * wildcard: . Notice that because the * wildcard matches 0 characters and also any number of characters, this command: ls *SC*.png matches the files Script_remover.sh and BackupScript.sh. To practice the wildcards, run this command: . curl https://cis106.com/assets/extras/wildcards.sh | bash . This will create a directory in your home directory called wildcard_extra_practice. This directory contains a bunch of files and directories (created at random). All the examples here will use the files in this directory. ",
    "url": "/extra/wildcards/#what-does-matches-x-number-of-character-really-mean",
    
    "relUrl": "/extra/wildcards/#what-does-matches-x-number-of-character-really-mean"
  },"205": {
    "doc": "Wildcards",
    "title": "The * (star/asterisk) wildcard",
    "content": "Examples: . | list all of the directories inside a given directory without listing their content . | ls -1d wildcard_extra_practice/*/ | . | move all the .sh (shell scripts) files . | mv wildcard_extra_practice/*.sh wildcard_extra_practice/scripts/ | . | list and then move all the image files in the wildcard_extra_practice directory. You will need to create a directory first. | mkdir wildcard_extra_practice/images/ | ls wildcard_extra_practice/img-*.* | mv -v wildcard_extra_practice/img-*.*images/ | . | . ",
    "url": "/extra/wildcards/#the--starasterisk-wildcard",
    
    "relUrl": "/extra/wildcards/#the--starasterisk-wildcard"
  },"206": {
    "doc": "Wildcards",
    "title": "The ? (question mark) wildcard",
    "content": "Examples: . | List all the files that contain a 4 letter file extension. | ls -1X wildcard_extra_practice/*.???? | . | List all the files that contain a 4 letter file extension and start with letter i: . | ls -1X wildcard_extra_practice/i*.???? | . | List all th files Microsoft Office 365 files. | ls -1X wildcard_extra_practice/*.???x | . | . ",
    "url": "/extra/wildcards/#the--question-mark-wildcard",
    
    "relUrl": "/extra/wildcards/#the--question-mark-wildcard"
  },"207": {
    "doc": "Wildcards",
    "title": "The [] (square brackets) wildcard",
    "content": "| POSIX class | Represents | Means | Example using ls | . | [:upper:] | [A-Z] | Uppercase letters | ls *[[:upper:]]* - List files with uppercase letters | . | [:lower:] | [a-z] | Lowercase letters | ls *[[:lower:]]* - List files with lowercase letters | . | [:digit:] | [0-9] | Digits | ls *[[:digit:]]* - List files containing digits | . | [:alpha:] | [A-Za-z] | Alphabetic characters | ls *[[:alpha:]]* - List files with alphabetic characters | . | [:alnum:] | [A-Za-z0-9] | Alphanumeric characters | ls *[[:alnum:]]* - List files with alphanumeric characters | . | [:space:] | [ \\t\\n\\r\\f\\v] | Whitespace characters | ls *[[:space:]]* - List files with spaces in names | . | [:punct:] | Punctuation | Punctuation characters | ls *[[:punct:]]* - List files with punctuation characters | . | [:blank:] | [ \\t] | Space and tab | ls *[[:blank:]]* - List files with spaces or tabs | . | [:xdigit:] | [0-9A-Fa-f] | Hexadecimal digits | ls *[[:xdigit:]]* - List files with hexadecimal characters | . | [:cntrl:] | Control characters | Control characters | ls *[[:cntrl:]]* - List files with control characters | . | [:print:] | Printable | Printable characters | ls *[[:print:]]* - List files with printable characters | . | [:graph:] | Graphical | Visible characters (not spaces) | ls *[[:graph:]]* - List files with graphical characters | . | [:word:] | [A-Za-z0-9_] | Word characters (alphanumeric + underscore) | ls *[[:word:]]* - List files containing word characters | . | [:ascii:] | ASCII characters | All ASCII characters (0-127) | ls *[[:ascii:]]* - List files containing ASCII characters | . Examples: . | List all the files that start with a capital letter . | ls wildcard_extra_practice/[A-Z]* | . | List all the files that contain a number in their name . | `ls wildcard_extra_practice/[0-9] | . | . Note: . | Wildcards also have their limitations. | For instance, “List all the files that do not contain a digit in the file name” You may assume that the approach would be ls *[!0-9]*. However, this does not work. This wildcard translates to: “all files and directories in the current directory whose names contain at least one character that is not a digit (0-9)” However, if you ever need this, here are two approaches: . | Use ls + grep: . | ls *[!0-9]* | grep -v '[0-9]' | . | Use find: . | find ./ -not -name '*[0-9]*' | . | Find is preferred for scripts because ls is not suited for shell scripts. ls is intended to be a human friendly tool and the output is difficult to parse properly. | . | . ",
    "url": "/extra/wildcards/#the--square-brackets-wildcard",
    
    "relUrl": "/extra/wildcards/#the--square-brackets-wildcard"
  },"208": {
    "doc": "Final Exam Study Guide",
    "title": "Final Exam Study Guide",
    "content": " ",
    "url": "/final_exam/final_exam/",
    
    "relUrl": "/final_exam/final_exam/"
  },"209": {
    "doc": "Final Exam Study Guide",
    "title": "Commands to study",
    "content": ". | awk | cat | cp | cut | grep | head | ls | man | mkdir | mv | tac | tail | touch | tr | tree | . ",
    "url": "/final_exam/final_exam/#commands-to-study",
    
    "relUrl": "/final_exam/final_exam/#commands-to-study"
  },"210": {
    "doc": "Final Exam Study Guide",
    "title": "Concepts to study",
    "content": ". | How to create a github repository | How to clone a github repository | How to use the git commands | The linux filesystem | Absolute path and relative path | When should you use absolute vs relative | Moving around the filesystem with absolute and relative (pwd,cd, and ls) | How to work with multiple terminals open? | How to work with manual pages? | How to parse (search) for specific words in the manual page | How to redirect output (&gt;, &gt;&gt;, and |) | How to append the output of a command to a file | How and when to redirect the output of a command to another (pipes) | How to use wildcards . | For copying and moving multiple files at the same time | . | How to use brace expansion . | For creating entire directory structures in a single command | . | . ",
    "url": "/final_exam/final_exam/#concepts-to-study",
    
    "relUrl": "/final_exam/final_exam/#concepts-to-study"
  }
}

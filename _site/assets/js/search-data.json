{"0": {
    "doc": "Welcome to the course",
    "title": "Welcome to CIS-106-Linux Fundamentals",
    "content": "Here you will find all the information for the course. ",
    "url": "/#welcome-to-cis-106-linux-fundamentals",
    
    "relUrl": "/#welcome-to-cis-106-linux-fundamentals"
  },"1": {
    "doc": "Welcome to the course",
    "title": "1. Special Note Regarding the final exam:",
    "content": ". | The final exam is IN PERSON! | It is done this way to guarantee fairness and integrity | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | All the topics that will be covered in the exam are already available here | . ",
    "url": "/#1-special-note-regarding-the-final-exam",
    
    "relUrl": "/#1-special-note-regarding-the-final-exam"
  },"2": {
    "doc": "Welcome to the course",
    "title": "2. COURSE LEARNING OUTCOMES",
    "content": ". | Demonstrate fluency in Linux terminology. | Install Linux and identify features of various distributions. | Manage files in the Linux environment. | Administer user accounts and groups efficiently. | Use Linux Utilities to manage data. | Install software and third-party utilities. | Managing Resources in the Linux networking environment. | Understanding of virtualization with Virtualbox | Understanding of Markdown and proper documentation techniques | . ",
    "url": "/#2-course-learning-outcomes",
    
    "relUrl": "/#2-course-learning-outcomes"
  },"3": {
    "doc": "Welcome to the course",
    "title": "3. Technologies Learned/Used",
    "content": ". | Ubuntu: is the modern, open source operating system on Linux for the enterprise server, desktop, cloud, and IoT. | VirtualBox: is a powerful x86 and AMD64/Intel64 virtualization product for enterprise as well as home use. | Markdown: is a lightweight markup language for creating formatted text using a plain-text editor. | Slack: is an instant messaging program designed by Slack Technologies and owned by Salesforce. | VS Code: is a code editor redefined and optimized for building and debugging modern web and cloud applications. | . ",
    "url": "/#3-technologies-learnedused",
    
    "relUrl": "/#3-technologies-learnedused"
  },"4": {
    "doc": "Welcome to the course",
    "title": "4. Requirements",
    "content": ". | Access to a computer where Linux can be installed. The following are options: . | A virtual machine (Preferred) | A spare laptop/Desktop computer that you can formatted. For example: . | A mini PC | An old PC | . | . | Access to Blackboard | A Github account | A Text editor. We will be using VS Code. You can use other text editors but if you run into problems, I cannot provide help. | 2 Hours of study time - MANDATORY | Capable of adjusting to fast paced course | For virtualization . | A decent PC that meets or exceeds these requirements: . | Quad-Core Processor | 8 Gb of RAM | Windows 10/11 | 100 Gb of free space | . | . | Knowledge of the following . | Basic components of a personal computer . | Basic usage of a personal computer | Internet browsing | Reading emails | Chat Applications | Office Productivity Suites (MS Office, Google Docs, etc) | Install/Remove Software | Difference between web browser, the internet, and a search engine Not knowing this things does not mean you will fail the course. It means that you will have to spend extra time studying. | . | . | . ",
    "url": "/#4-requirements",
    
    "relUrl": "/#4-requirements"
  },"5": {
    "doc": "Welcome to the course",
    "title": "5. MacOS Users Read this:",
    "content": ". | If you have a rencent MacOS Computer ( Apple M series of CPUs), you can use it for the class. The setup is different but I can guide you. | If you are using a MacOS Computer with an Intel CPU, make sure that it meets the same requirement as for windows. | . ",
    "url": "/#5-macos-users-read-this",
    
    "relUrl": "/#5-macos-users-read-this"
  },"6": {
    "doc": "Welcome to the course",
    "title": "6. Advice",
    "content": ". | If you find that the content of the course is too much or that you have too many gaps in your knowledge, I suggest that you take CIS-107 then CIS 180 or CIS 116. | If you do not have a decent computer (one that can be used for virtualization) you will have a very poor experience in this course. Contact me to discuss your options. | . ",
    "url": "/#6-advice",
    
    "relUrl": "/#6-advice"
  },"7": {
    "doc": "Welcome to the course",
    "title": "7. Resources",
    "content": ". | Books . | Main Text Book (free): The Linux Command Line By William Shotts | . | Other Free Books to Use as reference: . | GNU/Linux Command−Line Tools Summary | Bash Reference Manual | Introduction to bash scripting | Raspberry Pi Beginner’s Guide 4th Edition *a bit old but still useful | Free Linux Magazine with good command line reference | Free Magazines with project ideas | . | Github Markdown . | Github Markdown Syntax Cheat sheet | Github Markdown syntax official documentation | Git Cheat sheet | Linux cheat sheets | . | . ",
    "url": "/#7-resources",
    
    "relUrl": "/#7-resources"
  },"8": {
    "doc": "Welcome to the course",
    "title": "8. Grading Standard",
    "content": "| Activity | Contribution | . | Final Exam &amp; Final Project | 30% | . | Labs | 20% | . | Week Reports | 5% | . | Class Notes | 15% | . | Discussion Boards | 10% | . | Lecture Quizzes | 5% | . | Attendance/Participation | 15% | . ",
    "url": "/#8-grading-standard",
    
    "relUrl": "/#8-grading-standard"
  },"9": {
    "doc": "Welcome to the course",
    "title": "9. AI Usage",
    "content": ". | AI (Artificial Intelligence) is a great tool to study. You are allowed to use ChatGPT and other LLMs to help you review and practice the material. | You are not allowed to use AI to solve your scripts and challenge questions | You are also not allowed to use AI during your quizzes and final exam | Violation of these polices will be reported and can result in severe penalties. | See the syllabus in Blackboard for other Class and Department policies | . ",
    "url": "/#9-ai-usage",
    
    "relUrl": "/#9-ai-usage"
  },"10": {
    "doc": "Welcome to the course",
    "title": "10. Make Up Exams",
    "content": ". | Make-up exams will be permitted only under extenuating circumstances and only with prior notification and original documentation | The instructor reserves the right to create alternate make-up exams | . ",
    "url": "/#10-make-up-exams",
    
    "relUrl": "/#10-make-up-exams"
  },"11": {
    "doc": "Welcome to the course",
    "title": "11. Changes To the syllabus/course",
    "content": "The instructor reserves the right to make changes to this syllabus. If changes become necessary, students will be notified during the following scheduled class. ",
    "url": "/#11-changes-to-the-syllabuscourse",
    
    "relUrl": "/#11-changes-to-the-syllabuscourse"
  },"12": {
    "doc": "Welcome to the course",
    "title": "12. Expectations",
    "content": ". | Online: Join the zoom meeting 3-5 minutes before the class starts. | This will allow you to check your microphone as you will be required to speak during the lecture | I will kick anyone out of the Zoom room that does not participate when called upon. | MY CLASS IS NOT A WEBINAR. YOU EITHER PARTICIPATE OR LEAVE. | . | In Person: Come to class on time. Class starts at 5:40 PM you are expected to be ready at 5:40 PM . | What does ready mean? . | Your virtual machine is up and running | You have signed in to Blackboard in case there is a quiz | . | I do not wait for anyone. My class starts at 5:40 PM whether you are here or not. | If you miss a quiz because you are late, I will not allow you to retake it. | . | Regarding cheating: . | Below, I list a few important rules that you should keep in mind: . | Communicating the contents of tests to other students is forbidden. | If an online or take-home test is given, this must be done completely on your own. | Unless otherwise stated, all tests are closed book, closed notes, and no using the Internet to find answers. | During exams, you may not use the restroom, take phone calls, text, or communicate with other students. | Plagiarism will not be tolerated! (i.e. Representing the work of others as his/her own). See the College Catalogue for a full explanation on Plagiarism (Page 41 in the 2013-2015 Catalogue) . | This also applies to code! | . | . | . | . ",
    "url": "/#12-expectations",
    
    "relUrl": "/#12-expectations"
  },"13": {
    "doc": "Welcome to the course",
    "title": "13. Quizzes",
    "content": ". | There will be a quiz after every lecture | Quizzes start at 5:40 PM and end at 5:50 PM | Quizzes have no more than 5 questions from the lab/lecture | Quizzes are easy and used for self assessment purposes | Attendance will be called during the quiz | . ",
    "url": "/#13-quizzes",
    
    "relUrl": "/#13-quizzes"
  },"14": {
    "doc": "Welcome to the course",
    "title": "Welcome to the course",
    "content": ". | Welcome to CIS-106-Linux Fundamentals . | 1. Special Note Regarding the final exam: | 2. COURSE LEARNING OUTCOMES | 3. Technologies Learned/Used | 4. Requirements | 5. MacOS Users Read this: | 6. Advice | 7. Resources | 8. Grading Standard | 9. AI Usage | 10. Make Up Exams | 11. Changes To the syllabus/course | 12. Expectations | 13. Quizzes | . | . ",
    "url": "/",
    
    "relUrl": "/"
  },"15": {
    "doc": "Module 1 What is Linux?",
    "title": "Module 1 What is Linux?",
    "content": " ",
    "url": "/modules/module1/",
    
    "relUrl": "/modules/module1/"
  },"16": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 1: Introduction to the course.",
    "content": ". | Presentations . | Introduction to the course | . | How to join our Slack Workspace video here | How to create a github account repository video here | Week Report One video here . | What is Git and Github? | Markdown Presentation | . | Lab 1 video here | . | . ",
    "url": "/modules/module1/#lecture-1-introduction-to-the-course",
    
    "relUrl": "/modules/module1/#lecture-1-introduction-to-the-course"
  },"17": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 2: Introduction to Linux",
    "content": ". | Presentations . | Introduction to Linux | The basics of Virtualization | Using VirtualBox | Installing Ubuntu 24.04 in virtualbox | . | . ",
    "url": "/modules/module1/#lecture-2-introduction-to-linux",
    
    "relUrl": "/modules/module1/#lecture-2-introduction-to-linux"
  },"18": {
    "doc": "Module 1 What is Linux?",
    "title": "Lecture 3: The desktop environment",
    "content": ". | Presentations . | Exploring Desktop Environments | What is a Shell? | . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line Fifth Edition By William Shots . | Pages 1 - 6 (25 - 30 of the pdf) | . | Part 4 - Writing Shell Scripts . | Pages 365 (389 of the pdf) | . | Managing Software | . | Recommended reading: . | Part 3 - Common Tasks and Essential Tools - The Linux Command Line Fifth Edition By William Shots . | Package management - Pages 171 - 181 (196 - 205 of the PDF) | . | . | . | . ",
    "url": "/modules/module1/#lecture-3-the-desktop-environment",
    
    "relUrl": "/modules/module1/#lecture-3-the-desktop-environment"
  },"19": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Module 2 Using Ubuntu",
    "content": " ",
    "url": "/modules/module2/",
    
    "relUrl": "/modules/module2/"
  },"20": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 4: Managing Files and directories",
    "content": ". | The Linux filesystem . | Alternative Link | Recommended reading: . | Part 1 - Learning the Shell - The Linux Command Line Fifth Edition By William Shotts . | Navigation - Pages 7 - 12 (31 - 36 of the PDF) | Exploring the system - Pages 13 - 24 (37 - 48) | . | . | . | Managing files and directories . | Alternative link . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line Fifth Edition By William Shotts . | Pages 25 - 41 (49 - 65 of the PDF) | . | . | . | . | Wildcards . | Alternative link . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line Fifth Edition By William Shotts . | Pages 25 - 41 (49 - 65 of the PDF) | . | . | . | . | Shell Scripting - Getting user input . | Alternative link . | Recommended reading . | Part 4 - Writing Shell Scripts - The Linux Command Line Fifth Edition By William Shotts . | Reading Keyboard input - Pages 410 - 421 (434 - 445 of the PDF) | . | . | . | . | . ",
    "url": "/modules/module2/#lecture-4-managing-files-and-directories",
    
    "relUrl": "/modules/module2/#lecture-4-managing-files-and-directories"
  },"21": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 5: Handling Text Files",
    "content": ". | Handling Text Files . | Alternative Link | . | The Basics of Vim . | Alternative Link | . | How to Use Nano on Linux / Mac | Shell Scripting - Control Statements . | Alternative . | Recommended reading: . | Part 3 - Common Tasks Essential tools - The Linux Command Line By William Shotts . | Text Processing - Pages 273 - 314 (297 - 338 of the pdf) | . | . | . | . | . ",
    "url": "/modules/module2/#lecture-5-handling-text-files",
    
    "relUrl": "/modules/module2/#lecture-5-handling-text-files"
  },"22": {
    "doc": "Module 2 Using Ubuntu",
    "title": "Lecture 6: Permissions",
    "content": ". | File permissions . | Alternative Link . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line by William Shotts . | Permissions - Pages 90 - 110 (114 - 133 of the pdf) | . | . | . | . | Managing data . | Alternative Link . | Recommended reading: . | Part 3 - Common Tasks and Essential Tools - The Linux Command Line by William Shotts . | Archiving and backup - Pages 234 250(258 - 274 of the pdf) | . | . | . | . | Managing users . | Alternative Link . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line by William Shotts . | Permissions - Pages 90 - 110 (114 - 133 of the pdf) | . | . | . | . | . ",
    "url": "/modules/module2/#lecture-6-permissions",
    
    "relUrl": "/modules/module2/#lecture-6-permissions"
  },"23": {
    "doc": "Module 3 Administration",
    "title": "Module 3 Administration",
    "content": " ",
    "url": "/modules/module3/",
    
    "relUrl": "/modules/module3/"
  },"24": {
    "doc": "Module 3 Administration",
    "title": "Lecture 7",
    "content": ". | Managing processes . | Recommended reading: . | Part 1 - Learning the shell - The Linux Command Line by William Shotts . | Processes - Pages 110 - 124 (134 - 148 of the pdf) | . | . | . | Basic Networking protocols . | Recommended reading: . | Part 3 - Common tasks and essential tools - The Linux Command Line by William Shotts . | Networking - 201 - 215 (225 - 241 of the pdf) ",
    "url": "/modules/module3/#lecture-7",
    
    "relUrl": "/modules/module3/#lecture-7"
  },"25": {
    "doc": "Module 3 Administration",
    "title": "Lecture 8",
    "content": "| . | . | . | Shell scripting . | Hello World | Working with Variables . | User defined | Environmental Variables | User input | Positional parameters | . | Here Documents | Shell Functions . | Local vs Global Variables | . | Flow Control statements | Loops | Case statements | Arithmetic and string operations | Arrays | . | . ",
    "url": "/modules/module3/#lecture-8",
    
    "relUrl": "/modules/module3/#lecture-8"
  },"26": {
    "doc": "Module 3 Administration",
    "title": "Lecture 9",
    "content": ". | Scheduling Tasks | . ",
    "url": "/modules/module3/#lecture-9",
    
    "relUrl": "/modules/module3/#lecture-9"
  },"27": {
    "doc": "Week Report 1",
    "title": "Week Report 1",
    "content": "Video here . ",
    "url": "/week_report:/wr1",
    
    "relUrl": "/week_report:/wr1"
  },"28": {
    "doc": "Week Report 1",
    "title": "List of Tasks",
    "content": "For this week, complete the following tasks. | Install Slack in your phone and/or computer (I suggest both) | Complete Discussion Board 1 - Open Source. | Watch this video so that you are familiar of what git and github are | Watch this video so that you are familiar with VS Code’s interface | Complete Lab 1 - Learning Markdown | Complete Notes 1. The instructions are in Blackboard. Do this last please because there is no video for notes 1. | Read the syllabus or home page of course website. Write down any questions you have for me. | Read the final project description document. Write down any questions you have for me. | . ",
    "url": "/week_report:/wr1#list-of-tasks",
    
    "relUrl": "/week_report:/wr1#list-of-tasks"
  },"29": {
    "doc": "Week Report 1",
    "title": "What will you submit:",
    "content": "Step 1 Prepare your submission . | Create a folder in your documents directory called: weekReports | Inside weekReport, create a markdown file called wr1.md | Start VS Code and open the folder weekReports | In the file, wr1.md type the following: | . --- name: your name assignment: week report 1 course: cis106 semester: spring 23 --- # Week Report 1 Submission ## Slack Screenshot take a screenshot of slack and place it here ## Github Screenshot take a screenshot of your github account and place it here ## Acknowledgements * By submitting this assignment I [Your full name here] acknowledge that I have read the syllabus an final project description * I also acknowledge that I have written down any questions that I have for the professor and will ask them class or via slack 1:1 . | Once you have placed the screenshots in your markdown file, and typed the acknowledgment, save the file and convert the file to pdf. | READ the syllabus or home page of the site PLEASE! | . | Upload all the files inside the weekReports folder to GitHub. | . Step 2 Submit . | In blackboard, in week report 1, submit the following: . | The URL to your github repository | The PDF file of your week report 1 | . | . ",
    "url": "/week_report:/wr1#what-will-you-submit",
    
    "relUrl": "/week_report:/wr1#what-will-you-submit"
  },"30": {
    "doc": "Week Report 1",
    "title": "How will you be graded:",
    "content": ". | Github Repository URL containing all the files: 25pts | PDF File with the screenshots: 25pts | Proper markdown syntax: 25pts | Acknowledgement message: 25pts | . ",
    "url": "/week_report:/wr1#how-will-you-be-graded",
    
    "relUrl": "/week_report:/wr1#how-will-you-be-graded"
  },"31": {
    "doc": "Week Report 1",
    "title": "Special Note:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/week_report:/wr1#special-note",
    
    "relUrl": "/week_report:/wr1#special-note"
  },"32": {
    "doc": "Week Report 2",
    "title": "Week Report 2",
    "content": " ",
    "url": "/week_report:/wr2",
    
    "relUrl": "/week_report:/wr2"
  },"33": {
    "doc": "Week Report 2",
    "title": "Video Here",
    "content": "Week Report 2 Spring 24 . | BE AWARE that the video may not 100% align to this assignment. The video is expected to be a general guide. | Changes between semesters are expected! | . ",
    "url": "/week_report:/wr2#video-here",
    
    "relUrl": "/week_report:/wr2#video-here"
  },"34": {
    "doc": "Week Report 2",
    "title": "Complete the following tasks",
    "content": ". | Complete lab 2 - Installing Ubuntu 24.04. | If you have not done so, complete week report 1, lab 1 and Discussion Board 1. | Complete Discussion Board 2 - The history of Linux. Note: you can do this later as the due date is the end of the semester. | Complete Notes 2. This and everything else from this point on must be completed inside Ubuntu Desktop 24.04 (your virtual machine). Windows/MacOS will no longer be used. Therefore you MUST complete lab 2 before attempting the report and the notes. | Complete this week’s Week Report. | . ",
    "url": "/week_report:/wr2#complete-the-following-tasks",
    
    "relUrl": "/week_report:/wr2#complete-the-following-tasks"
  },"35": {
    "doc": "Week Report 2",
    "title": "What will you include in your notes?",
    "content": "Note: folder and directory mean the same thing! . | Create a folder inside your CIS106 folder called notes | Inside the notes directory/folder create a new folder called notes1 and notes2 | Move the files that are related to notes1 to the notes1 directory/folder. | Open the cis106 directory/folder inside vs code. | Using vs code file manager, create a file inside the notes2 directory called notes2.md | In the file notes2.md, answer the following questions. Make sure to use proper markdown syntax to make your notes file look presentable. Use headings, paragraphs and bullet point formatting. This, at a minimun, should make your file look presentable. NO SCREENSHOTS! All the information to answer the questions can be found in the Lecture 2 presentation Introduction to Linux and The basics of virtualization | . Lecture 2 Introduction to Linux Notes (this is the tittle of the document - Heading 1 formatting please!) 1. What is an Operating System? 2. What is a kernel? 3. Which other parts aside from the kernel identify an OS? 4. What is linux and linux distribution? 6. List at least 4 linux characteristics: 7. What is Ubuntu? 8. What is Debian? 9. List and define the different types of licensing agreements 10. What is Free Software? Define the 4 freedoms. 11. What is virtualization? . ",
    "url": "/week_report:/wr2#what-will-you-include-in-your-notes",
    
    "relUrl": "/week_report:/wr2#what-will-you-include-in-your-notes"
  },"36": {
    "doc": "Week Report 2",
    "title": "What will you submit for your week report:",
    "content": "Note: Since you already completed lab2, the remaining of the work in this course will be completed inside the Ubuntu virtual machine. Windows/MacOS will not be used for the remaining of the course!!! PLEASE DO NOT EDIT OR UPLOAD FILES TO GITHUB VIA THE WEBSITE. You must use VS Code Terminal to commit and push to your repository. If you decide to ignore this. You are on your own. If you don’t understand, please ask! This report can only be completed after lab 2! . | Create a folder inside the weekReports folder called wr2. You probably did this already during lab 2. | Open the cis106 folder in VS Code | Inside the wr2 folder, create a file called wr2.md | Add a link to your notes and lab2 markdown files in github. | Add a screenshot of your Ubuntu Desktop with a terminal open or firefox in the cis106.com website | Convert the wr2.md file to pdf | Push all the changes to github | In blackboard, submit the URL to the wr2.md file and the pdf file wr2.pdf | . ",
    "url": "/week_report:/wr2#what-will-you-submit-for-your-week-report",
    
    "relUrl": "/week_report:/wr2#what-will-you-submit-for-your-week-report"
  },"37": {
    "doc": "Week Report 2",
    "title": "Special Note 1",
    "content": "Please take a snapshot of your virtual machine after you complete the report. The virtual machine is must be off before you take the snapshot. This process is show in the video You should have at least 2 snapshots of your vm. Keep in mind that snapshots take space. For Mac Users using UTM, snapshots are not supported therefore ignore this. Just keep your repository updated on github in case of a catastrophic failure. Special Note 2 . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . ",
    "url": "/week_report:/wr2#special-note-1",
    
    "relUrl": "/week_report:/wr2#special-note-1"
  },"38": {
    "doc": "Week Report 2",
    "title": "Special Note 3:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/week_report:/wr2#special-note-3",
    
    "relUrl": "/week_report:/wr2#special-note-3"
  },"39": {
    "doc": "Week Report 3",
    "title": "Week Report 3",
    "content": " ",
    "url": "/week_report:/wr3",
    
    "relUrl": "/week_report:/wr3"
  },"40": {
    "doc": "Week Report 3",
    "title": "Video here",
    "content": "Week Report 3 . Note: This cannot be completed if you have not completed lab 2. 1. Study/Read/Review: . | Review the following presentation: . | What is a Shell? | Managing Software | . | . 2. Add new cheat sheet . | Download the managing software cheat sheet (one is fine but I suggest the second one) and place it in the cheatSheet directory/folder. | . 3. Complete the lecture’s practice . | In the presentation: What is a shell?, you will find 7 practice exercises. | Complete each practice and take a screenshot of the terminal when you finish with each practice. | Place the screenshots in the week report 3 directory located in the following path: cis106/weekReports/wr3/ | If you do not have a directory/folder for wr3, make it! | Complete practice 1 and 3 in the presentation Managing Software and take a screenshot of the terminal. | . 4. Complete class notes: . | Create a markdown file that includes the following: . | Definition, usage, and examples of the following commands: . | echo | date | free | uname | history | man | apt | snap | flatpak This video contains an example from last semester. | . | . | . 5. Complete week report 3 . | Inside the wr3 directory/folder, create a markdown file called wr3.md | The wr3.md file must include the following: . | Heading 1: Week Report 3 | Heading 2: Completed work for week 3 | A bulleted list of the following URLs: . | Link to lab3.md (you have not created this file yet therefore you need to create this file and put some place holder text in it) | Link to notes3.md | . | Heading 2: Practice . | Heading 3:Practice 1 . | Screenshot of practice 1 | . | Heading 3:Practice 2 . | Screenshot of practice 2 | . | Heading 3:Practice 3 . | Screenshot of practice 3 | . | Heading 3:Practice 4 . | Screenshot of practice 4 | . | Heading 3:Practice 5 . | Screenshot of practice 5 | . | Heading 3:Practice 6 . | Screenshot of practice 6 | . | Heading 3:Practice 7 . | Screenshot of practice 7 | . | Heading 3:Practice 1 - Managing Software . | Screenshot of practice 1ms | . | Heading 3:Practice 3 - Managing Software . | Screenshot of practice 3ms | . | . | . | . 6. Complete lab 3 . | Video here | . ",
    "url": "/week_report:/wr3#video-here",
    
    "relUrl": "/week_report:/wr3#video-here"
  },"41": {
    "doc": "Week Report 3",
    "title": "What will you submit:",
    "content": ". | Convert wr3.md to pdf | Push everything to github: | In blackboard submit: . | URL to wr3.md in github | The pdf file wr3.pdf | . | . ",
    "url": "/week_report:/wr3#what-will-you-submit",
    
    "relUrl": "/week_report:/wr3#what-will-you-submit"
  },"42": {
    "doc": "Week Report 3",
    "title": "Special Note 1",
    "content": "Please take a snapshot of your virtual machine after you complete the report. The virtual machine is must be off before you take the snapshot. This process is show in the video You should have at least 2 snapshots of your vm. Keep in mind that snapshots take space. For Mac Users using UTM, snapshots are not supported therefore ignore this. Just keep your repository updated on github in case of a catastrophic failure. Special Note 2 . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . ",
    "url": "/week_report:/wr3#special-note-1",
    
    "relUrl": "/week_report:/wr3#special-note-1"
  },"43": {
    "doc": "Week Report 3",
    "title": "Special Note 3:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/week_report:/wr3#special-note-3",
    
    "relUrl": "/week_report:/wr3#special-note-3"
  },"44": {
    "doc": "Week Report 4",
    "title": "Week Report 4",
    "content": ". | The Linux File System Presentation | Ls Command Cheat Sheet | Absolute Path and Relative Path Cheat sheet | Video here | . ",
    "url": "/week_report:/wr4",
    
    "relUrl": "/week_report:/wr4"
  },"45": {
    "doc": "Week Report 4",
    "title": "Complete the following tasks",
    "content": "1. Complete Week Report 4. Your report must contain the following: . | Create a file inside the weekReports directory that is located inside the cis106 directory. Name this file, wr4.md | You will complete the week report inside the wr4.md file. Your report must contain: . | Screenshots from each practice from the presentation The Linux File system: . | Take a screenshot of your terminal showing all the commands, or most of the commands, you used to complete each practice. | Place all your screenshots in your week report 4 file. | Make sure to label each practice using heading 2 or heading 3 markdown formatting. | . | . | . 2. Complete Notes 4 . All the information can be found here: . | Presentation | Article | . | Create a file in the clasNotes directory named notes2.md | The file must be properly formatted using bold, code formatting and headings | The file must contain the following: . | Each of the commands used for navigating the file system . | for each command include: Description, usage/formula, and examples (3 or more if available) | . | . | Definitions of the following terms: . | File system | pathname | Absolute path | Relative path | The difference between your home directory and the home directory | parent directory | child directory or subdirectory | Bash special characters | environment variables | user defined variables | Why do we need use $ with variables in bash shell scripting? | . | . 3. Complete lab 4 The linux File System . | Please do this after you complete the Week report and class notes! Trust me, it is better this way. | Instructions here | . 4. Complete discussion boards . | Work on your next discussion board | . ",
    "url": "/week_report:/wr4#complete-the-following-tasks",
    
    "relUrl": "/week_report:/wr4#complete-the-following-tasks"
  },"46": {
    "doc": "Week Report 4",
    "title": "What will you submit:",
    "content": ". | Convert wr4.md to pdf | Push everything to github: | In blackboard submit: . | URL to wr4.md in github | The pdf file wr4.pdf | . | . ",
    "url": "/week_report:/wr4#what-will-you-submit",
    
    "relUrl": "/week_report:/wr4#what-will-you-submit"
  },"47": {
    "doc": "Week Report 4",
    "title": "Special Note 1",
    "content": "Please take a snapshot of your virtual machine after you complete the report. The virtual machine is must be off before you take the snapshot. This process is show in the video You should have at least 2 snapshots of your vm. Keep in mind that snapshots take space. For Mac Users using UTM, snapshots are not supported therefore ignore this. Just keep your repository updated on github in case of a catastrophic failure. Special Note 2 . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . ",
    "url": "/week_report:/wr4#special-note-1",
    
    "relUrl": "/week_report:/wr4#special-note-1"
  },"48": {
    "doc": "Week Report 4",
    "title": "Special Note 3:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/week_report:/wr4#special-note-3",
    
    "relUrl": "/week_report:/wr4#special-note-3"
  },"49": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "content": "This is the default lab 2. There are other versions of this lab: . | Lab 2 - Installing Ubuntu For M Series Macs | . This version of Lab 2 is for Windows users (Windows 11 or 10) or Macbooks with capable Intel CPU. The alternative Lab 2 is for M series Macbooks because Virtualbox does not run well on M Series Mac. Because your computer is not my computer, there can be issues that I have no way of accounting for. Other versions of this lab can be made upon request. I can also meet with you or work over zoom if you are having any issues. All I ask is that you are mindful of my time and yours. Do not wait till the last minute!! . ",
    "url": "/labs/Lab2_new/",
    
    "relUrl": "/labs/Lab2_new/"
  },"50": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Video here",
    "content": "Lab 2 Installing Ubuntu 24.04 Windows Version . Note: If you are having too many issues with virtualbox, an alternative is to use VMware Workstation Player 17 Here is a video on how to complete this lab using VMWare workstation player: Lab 2 - Installing Ubuntu Using VMWare Workstation Player . ",
    "url": "/labs/Lab2_new/#video-here",
    
    "relUrl": "/labs/Lab2_new/#video-here"
  },"51": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Table of Contents",
    "content": ". | Lab 2 - Installing Ubuntu For Windows Users And Intel Macs . | Video here | Table of Contents | Presentations: | Requirements | Step 1: Enable Virtualization . | REQUIRED SPECIFICATIONS: | . | Step 2: Create a Virtual Machine | Step 3: Install Ubuntu | Step 4: Optimizing Ubuntu for the class . | Update and upgrade | Install Essential packages: | Install the guest additions for virtualbox - Option1 (easy) | Install the guest additions for virtualbox - Option 2 | . | Step 5: Setup Git | Step 6: Install VS Code Extensions | Step 7: Setting up Gnome Screenshot Tool | Time to submit this lab . | Special Note 1 | Special Note 2 | . | Special Note Regarding the final exam: | . | . ",
    "url": "/labs/Lab2_new/#table-of-contents",
    
    "relUrl": "/labs/Lab2_new/#table-of-contents"
  },"52": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Presentations:",
    "content": ". | The basics of Virtualization | Using VirtualBox | Installing Ubuntu 20.04 in VirtualBox | . ",
    "url": "/labs/Lab2_new/#presentations",
    
    "relUrl": "/labs/Lab2_new/#presentations"
  },"53": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Requirements",
    "content": ". | Please go over the presentations before you do this lab. It will give you an idea of what we are trying to do here. | Please go slow and take your time to do this lab. It is long but it is the core of this course. | If you do not have a computer that meets the recommended criteria, please reach out to me and stop doing this lab. | . NOTE! . | If your computer does not meet the required hardware, you will have a hard time completing all the work and the final project therefore be ready for some slow downs! | . ",
    "url": "/labs/Lab2_new/#requirements",
    
    "relUrl": "/labs/Lab2_new/#requirements"
  },"54": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 1:  Enable Virtualization",
    "content": "Before you can create virtual machines, you need to know if your computer can run virtual machines. There are a couple of steps you need to follow to find out the answer to this question: . | Find out what hardware your computer has: . | CPU and number of cores | Amount of RAM | Amount of Free Storage | . | If your computer does not meet the criteria below, stop this lab and get in contact with me. We may be able to find an alternative for you but this can only be done on a 1 on 1 basis. | . REQUIRED SPECIFICATIONS: . | CPU: Quad core CPU or higher | RAM: 8GB or More | Free Storage: 60GB or more | . If you do not meet these requirements but your computer is close enough, you may be able to complete the course material. The downside is that your computer will be extremely slow. If your computer meets or exceeds the above capabilities, then you need to check if virtualization is enabled. Follow this guide to know if your computer has virtualization enabled and if it does not, use the same guide to learn how to enable it. You can also use Speccy to find out if your computer has virtualization enabled. If you are having troubles enabling virtualization, let me know immediately. DO NOT WAIT FOR THE LAST MINUTE! This part can take time! . ",
    "url": "/labs/Lab2_new/#step-1--enable-virtualization",
    
    "relUrl": "/labs/Lab2_new/#step-1--enable-virtualization"
  },"55": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 2:  Create a Virtual Machine",
    "content": "Before you can create virtual machines, you need to install VirtualBox and VirtualBox Extension Pack. To download VirtualBox and the extension pack go to: . | Virtualbox Download Page | Microsoft Visual C++ Redistributable | . Make sure to select the right installer for your operating system: . Make sure to install VirtualBox in your host computer. For Windows follow this video. For macOS follow this video. Once you have installed VirtualBox, create a virtual machine that meets these specifications: . | OS: Ubuntu 24.04 64Bits ISO URL | HDD: 50 GB | RAM: 4GB | Video: 128 MB | Audio Controller: Disabled (audio won’t be needed) | CPU: 2 Cores | Add this to description: | Hostname: cis106vm | User: student name (use your blackboard username or any other username of your choice) | Password: pccc | Shared Clipboard: Enabled - Bidirectional | Drag n’ Drop: Enabled - Bidirectional | . | virtual machine settings | . | | . ",
    "url": "/labs/Lab2_new/#step-2--create-a-virtual-machine",
    
    "relUrl": "/labs/Lab2_new/#step-2--create-a-virtual-machine"
  },"56": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 3: Install Ubuntu",
    "content": "Go over the presentation “Installing Ubuntu 24.04 in VirtualBox 7”. There, I have laid out every step with proper explanations. The presentation is using an earlier version of Virtualbox and Ubuntu but the differences are not very significant. I will do it in the video as well but it will benefit you to read the presentation. ",
    "url": "/labs/Lab2_new/#step-3-install-ubuntu",
    
    "relUrl": "/labs/Lab2_new/#step-3-install-ubuntu"
  },"57": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 4: Optimizing Ubuntu for the class",
    "content": "Update and upgrade . | Open the terminal application and type the following command: sudo apt update &amp;&amp; sudo apt upgrade -y | The terminal will prompt you to type your password. Nothing will be shown to the screen as you type. That is expected! | This may take some time depending on your internet connection and the number of available updates. | . Install Essential packages: . | Install the curl command which will then be used to download a couple of script files. sudo apt install curl -y | Use curl to download and run the following script: essentials.sh | . curl https://cis106.com/assets/scripts/essentials.sh -o essentials.sh chmod +x essentials.sh ./essentials.sh rm essentials.sh . | Install VS Code: | . curl https://cis106.com/assets/scripts/vscode.sh -o vscode.sh chmod +x vscode.sh ./vscode.sh rm vscode.sh . | Install Librewolf and Brave Browser (optional): | . curl https://cis106.com/assets/scripts/librewolf.sh -o libre.sh curl https://cis106.com/assets/scripts/brave.sh -o brave.sh chmod +x libre.sh chmod +x brave.sh ./libre.sh ./brave.sh rm libre.sh rm brave.sh . | Install Ubuntu Restricted Extras | . sudo apt install ubuntu-restricted-extras ubuntu-restricted-addons -y . When you see the screen below, use the tab key to select OK, the space key instead of enter, the arrow keys to select yes and the space bar again to agree to the terms and conditions: . Install the guest additions for virtualbox - Option1 (easy) . | Insert the guess additions cd . | In the virtual machine menu at the top click on “Devices” then “Insert Guest Additions CD image” | This will insert the installation disk and it will be accessible in Ubuntu’s Favorites bar | . | Open the CD from the Favorites bar which will open it in the file manager. | Click on the “Run Software” button located in the red banner. Click on “Run” in the message that will appear. Type your password and press enter. This will open a terminal to start the installation of the guest additions. Once the installation is complete, press enter in the terminal and reboot the virtual machine. | . Now you can use full screen in your virtual machine. If you see any screen flickering or glitches. Enable or disable 3D acceleration in the virtual machine settings. You may need to enable Expert Settings in the virtual machine settings. Install the guest additions for virtualbox - Option 2 . Follow these instructions if for whateever reason the guest additions were not installed or the prompt to install it did not pop up when you clicked on “Run Software”. | Insert the guess additions cd | Open the cd in the file manager from the Favorites bar | Right click on an empty area of the directory and click on open terminal | Run these commands: | . sudo apt install build-essential linux-headers-$(uname -r) -y sudo ./VBoxLinuxAdditions.run . | Reboot the vm. You can use the command sudo reboot now | Now your virtual machine can use the full screen and share the clipboard with your host machine | . NOTE: If you are getting screen fliclering/glitches, you may need to enable 3D Acceleration. You will need to open the virtula machine settings, enable export mode and then toggle 3D acceleration ON . ",
    "url": "/labs/Lab2_new/#step-4-optimizing-ubuntu-for-the-class",
    
    "relUrl": "/labs/Lab2_new/#step-4-optimizing-ubuntu-for-the-class"
  },"58": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 5: Setup Git",
    "content": ". | Sign in to your Github account. | Open a terminal window and run the following commands: | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | Setup SSH authentication | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboard in the step prior. Type yes (the whole word) and press enter and you are done | Test you ssh connection by using this command: ssh -T git@github.com | Clone your github repository. Use these commands: cd; git clone git@github.com:yourGithub-User-Name-Here/your-Repository-Name-Here | . . ",
    "url": "/labs/Lab2_new/#step-5-setup-git",
    
    "relUrl": "/labs/Lab2_new/#step-5-setup-git"
  },"59": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 6: Install VS Code Extensions",
    "content": ". | Install the following extensions: . | Markdown All in One by Yu Zhang | Markdown PDF by yzane | Markdown Preview Enhanced by Yiyi Wang | PDF Preview by Analytic Signal Limited | Code Spell Checker by Street Side Software | . | . ",
    "url": "/labs/Lab2_new/#step-6-install-vs-code-extensions",
    
    "relUrl": "/labs/Lab2_new/#step-6-install-vs-code-extensions"
  },"60": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Step 7: Setting up Gnome Screenshot Tool",
    "content": "Note: The default screenshot application does not work for us. However, gnome-screenshot gives us what we need. In the past, we used to use flameshot, however, it is still not supported under Wayland therefore we will move away from Flameshot for the time being. To setup Gnome-Screenshot, follow these steps: . | Install gnome screenshot: use the following command sudo apt install gnome-screenshot -y | Open the keyboard settings in Ubuntu. | Settings -&gt; Keyboard -&gt; View Customize shortcuts -&gt; Custom Shortcuts -&gt; Click the + icon to add a new shortcut | In the dialog box add the following: . | Name: gnome-screenshot | Command: gnome-screenshot -i | . | Click the set screenshot button and press the print screen key in your keyboard or any other keyboard combination of your choosing. | Click the replace button. | Press the print screen key to test. Did it work? Chances are it did not. | For some weird reason this does not work the first time we do it, therefore, repeat the process and make sure to spell the command correctly. See the gif for reference! | . | . | . ",
    "url": "/labs/Lab2_new/#step-7-setting-up-gnome-screenshot-tool",
    
    "relUrl": "/labs/Lab2_new/#step-7-setting-up-gnome-screenshot-tool"
  },"61": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Time to submit this lab",
    "content": ". | First, lets organize the repository . | Open the file manager | Create the following folders: labs, weekReports,finalExam,cheatSheets,notes | move all the files related to lab 1 to the labs folder | Inside the lab folder create 2 folders: lab1 and lab2. From this point on, every lab will have its own folder and so will every week report. | Move all the lab 1 files to the lab1 folder | Repeat the process for the week report 1 | . | Open the cis106 folder in VS Code | Inside the lab2 folder, create a file named lab2.md | Add the following markdown to the file: | . # Lab 2 Submission ## Virtual Machine settings ![cpufetch](cpufetch.png) ![script](script.png) . | Open a terminal and run the following command: cpufetch | pv -qL 200 or simply cpufetch | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot cpufetch.png | Clear the terminal with the command: clear and run the following command: curl -s https://cis106.com/assets/scripts/lab2_system_info.sh | bash | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot script.png | Save and convert the file lab2.md file to pdf | Open the vs code terminal and enter the following commands to commit and push your changes to github: | . git pull git add . git commit -m 'lab2 finished' git push . | In blackboard submit the following: . | The URL to the lab2.md file in github | The lab2.pdf file | . | . Special Note 1 . This is a canonical lab for your learning. You will be making more virtual machines in the future. I suggest you create more virtual machines and then delete them. For example, find out what are the minimum requirements for installing windows 10 and then make a windows 10 virtual machine. Also, install other linux distributions as well. You do not need to keep these vms just use this lab to practice. Remember, when deleting virtual machines, make sure to select delete all files instead of just removing the vms. This will make sure that you recover your hard drive space. Special Note 2 . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/Lab2_new/#time-to-submit-this-lab",
    
    "relUrl": "/labs/Lab2_new/#time-to-submit-this-lab"
  },"62": {
    "doc": "Lab 2 - Installing Ubuntu For Windows Users And Intel Macs",
    "title": "Special Note Regarding the final exam:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you but you need to request it early because the amount of PCs is limited | . ",
    "url": "/labs/Lab2_new/#special-note-regarding-the-final-exam",
    
    "relUrl": "/labs/Lab2_new/#special-note-regarding-the-final-exam"
  },"63": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Lab 1 - Learning Markdown",
    "content": "Video here . ",
    "url": "/labs/lab1/",
    
    "relUrl": "/labs/lab1/"
  },"64": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 1: VS CODE",
    "content": ". | Install VS Code | If you find the VS Code interface complicated or too unfamiliar, watch this video before you continue with the lab. | . ",
    "url": "/labs/lab1/#question-1-vs-code",
    
    "relUrl": "/labs/lab1/#question-1-vs-code"
  },"65": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 2: Github Account",
    "content": ". | Create a github account using your PCCC email address. Make sure to save your github username, email, and password somewhere safe (like a password manager). You will need it a lot! If you already have a github account, you are allowed to use it. | Create a public repository called cis106 LOWERCASE PLEASE! . | Here is a video on how to create a github account and repository. | . | Do not close the github page, you will need it later. | . ",
    "url": "/labs/lab1/#question-2-github-account",
    
    "relUrl": "/labs/lab1/#question-2-github-account"
  },"66": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 3: Learning Markdown",
    "content": ". | In your Documents folder, create a folder called lab1 LOWERCASE PLEASE! | Enable file extensions in Windows explorer. | Read the presentation ‘What is Markdown’ | During this presentation you will complete several practice exercises. Make sure to place all the files inside the lab1 folder. | You will need some exercise files that are reference in the presentation. Use this URL to download the zip file that contains the files. Uncompress/decompress the zip file in the lab1 folder. This is not the same as opening the zip file. You will need to copy or move the files to the lab1 folder. | Download the markdown cheat sheet before you start the challenge question. The cheat sheet can be found in the presentation | . | The goal of this lab is to learn and practice markdown. | Please follow along in the video as I will be completing the practice there. | Once you complete the practice, do the challenge question | . ",
    "url": "/labs/lab1/#question-3-learning-markdown",
    
    "relUrl": "/labs/lab1/#question-3-learning-markdown"
  },"67": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Question 4: Challenge Question",
    "content": "Scenario: Your friend, John Doe, has asked you to make a 1 page resume for him. He has given you all his information in a text file and a picture for you to use. Since you have recently learned about markdown, you want to write his resume in markdown and then give him the PDF. | Inside the lab1 folder, create a folder called: challenegeQuestion One word, no space, camel case PLEASE! | Using markdown, create a 1 page resume for John Doe. Name the file resume.md and place it inside the challengeQuestion | Everything you need to create the markdown file was provided with the lab1.zip file you downloaded earlier. | Once the markdown file is created, convert the file to pdf. | This is how the PDF file should look like when you are done. PS. The Preview may not look like the finish product however the image and table must render correctly! | . ",
    "url": "/labs/lab1/#question-4-challenge-question",
    
    "relUrl": "/labs/lab1/#question-4-challenge-question"
  },"68": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "What will you upload to Github:",
    "content": "The entire lab1 folder. Every single file must be in your github repository! . I do this in the video so there should be no excuses. ",
    "url": "/labs/lab1/#what-will-you-upload-to-github",
    
    "relUrl": "/labs/lab1/#what-will-you-upload-to-github"
  },"69": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Submission",
    "content": "In blackboard, submit the following: . | The PDF file of ubuntu.pdf. This is the file your converted when you finished all the practice in this lab. | The MD file ubuntu.md | The md file resume.md. This is john doe’s resume. | The pdf file resume.pdf. This is john doe’s resume in pdf format. | The URL to your github repository . | . ",
    "url": "/labs/lab1/#submission",
    
    "relUrl": "/labs/lab1/#submission"
  },"70": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Here is how I will grade you:",
    "content": ". | I will go to your github repository, I will check that you complete all the practice from the video that is 25 points. Having the ubuntu.md file complete is proof of this | I will check that you completed the challenge question that is 50 points. Having the resume.md file properly formatted is proof of this. | If I cannot find the files in Github, you will not be awarded a passing grade for this lab. | I will check that you uploaded all the files I asked for in blackboard. This is 25 Points. | . Late submissions will be penalized 20 points. See blackboard for due date . If you need more practice in markdown, see the Extra Section of the page. There you will find an extra practice for this lab. We can review your work on a 1:1 meeting at the time of your choosing as long as I have availability via Zoom. ",
    "url": "/labs/lab1/#here-is-how-i-will-grade-you",
    
    "relUrl": "/labs/lab1/#here-is-how-i-will-grade-you"
  },"71": {
    "doc": "Lab 1 - Learning Markdown",
    "title": "Special Note Regarding the final exam:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | You will be required to use markdown during your final exam. | . ",
    "url": "/labs/lab1/#special-note-regarding-the-final-exam",
    
    "relUrl": "/labs/lab1/#special-note-regarding-the-final-exam"
  },"72": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "content": " ",
    "url": "/labs/lab2_alternative4/",
    
    "relUrl": "/labs/lab2_alternative4/"
  },"73": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Video here",
    "content": "Lab 2 - Installing Ubuntu Using Ubuntu Server . ",
    "url": "/labs/lab2_alternative4/#video-here",
    
    "relUrl": "/labs/lab2_alternative4/#video-here"
  },"74": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Who is this lab for?",
    "content": "This lab is for students with underpowered PCs/Intel Macs that encountered issues with alternative 3. For example, the installer froze during the installation. We will be using Ubuntu Server. ",
    "url": "/labs/lab2_alternative4/#who-is-this-lab-for",
    
    "relUrl": "/labs/lab2_alternative4/#who-is-this-lab-for"
  },"75": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Requirements:",
    "content": "| HARDWARE | SPEC | . | CPU | Dual Core 1.5 Or higher | . | RAM | 4 - 8 Gb DDR4 | . | STORAGE | 40 Gb Available | . Example PCs/Macs . | Intel Macbook Air with 8Gb of RAM and a dual core CPU | HP ProBook 640 G2 Notebook PC | . ",
    "url": "/labs/lab2_alternative4/#requirements",
    
    "relUrl": "/labs/lab2_alternative4/#requirements"
  },"76": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Step 1: Download a Hypervisor",
    "content": "We will be using Virtualbox 7. Download the following: . | Ubuntu 22.04 Server ISO file | Virtualbox Installer | Virtualbox Extension Pack | For Windows Users: . | Install the Microsoft Visual C++ Redistributable x64 . | Direct Link: here | . | . | . | Install Virtualbox . | Video For macOS | Video For Windows | . | . Make sure to select the right installer for your operating system: . Note: The videos are a little old but the steps are still the same. ",
    "url": "/labs/lab2_alternative4/#step-1-download-a-hypervisor",
    
    "relUrl": "/labs/lab2_alternative4/#step-1-download-a-hypervisor"
  },"77": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Step 2:  Create a Virtual Machine",
    "content": "create a virtual machine that meets these specifications: . | OS: Ubuntu 22.04 64Bits ISO URL | HDD: 40 GB | RAM: 2GB | Video: 128 MB or Higher | Audio Controller: Disabled (audio won’t be needed) | CPU: 1 Cores | Add this to description: | Hostname: cis106vm | User: student name (use your blackboard username) | Password: pccc | Shared Clipboard: Enabled - Bidirectional | Drag n’ Drop: Enabled - Bidirectional | . Example of how to create a virtual machine . This example was taken from the original lab so it will not match the settings specified above. | virtual machine settings example | . | | . ",
    "url": "/labs/lab2_alternative4/#step-2--create-a-virtual-machine",
    
    "relUrl": "/labs/lab2_alternative4/#step-2--create-a-virtual-machine"
  },"78": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Step 3: Install Ubuntu",
    "content": ". | Create a virtual machine that meets the requirements mentioned in the previous step. Here is an example (with different specs as it is an old gif) | Turn on Virtual Machine | Start the installer. | . ",
    "url": "/labs/lab2_alternative4/#step-3-install-ubuntu",
    
    "relUrl": "/labs/lab2_alternative4/#step-3-install-ubuntu"
  },"79": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Step 4: Update and install Desktop environment:",
    "content": "Note: This step is long . | Log in with your username and password | Run the following command: sudo apt update &amp;&amp; sudo apt upgrade -y . | The run this command: sudo apt install ubuntu-desktop gnome-session-flashback lightdm -y . | Reboot the vm. Use this command: sudo reboot now . Once the virtual machine boots up, type your password and click on the ‘Ubuntu’ icon. Select “GNOME Flashback(Metacity)” from the options and then sign in. Here is how to do it! . | . ",
    "url": "/labs/lab2_alternative4/#step-4-update-and-install-desktop-environment",
    
    "relUrl": "/labs/lab2_alternative4/#step-4-update-and-install-desktop-environment"
  },"80": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Step 5 Optimizing Ubuntu for the class",
    "content": "Install Guest Additions . Follow this video to install the guest additions: . | How To Install Virtualbox Guest Additions In Ubuntu 22.04 | . Here are the steps: . | On the virtual machine window menu, click on “Devices” and then click on “Insert Guest Additions CD Image” | Open the file manager (Home icon on the desktop) and then click on the disk | Right click on an empty area of the file manager to open the menu and click on “Open in Terminal” | Type the following command: sudo ./VBoxLinuxAdditions.run . Remember Linux is case sensitive so always double check your spelling . | Reboot your Virtual Machine and once you sign in, maximize the virtual machine window. | . Here is how to do it: . Install and remove software . | Remove the following applications as they will not be needed. You can run these command on the terminal: | . sudo apt purge apport aisleriot gnome-mahjongg gnome-sudoku gnome-mines -y sudo apt clean sudo apt autoclean . | Install the following applications as we will use them through out the semester: | . sudo apt install flameshot vlc deluge geany tilix -y sudo apt install gcc make perl nemo git python3-pip -y sudo apt install curl wget tree htop net-tools vim -y sudo apt install neofetch neofetch caffeine samba smbclient gnome-tweaks -y sudo apt install snapd flatpak gnome-software-plugin-flatpak gnome-software-plugin-snap -y . Note: You can run all the commands in one shot by creating a script and then executing the script. The gif below shows you how . Install Ubuntu restricted extras: . sudo apt install ubuntu-restricted-extras ubuntu-restricted-addons -y . When you see the screen below, use the tab key to select OK, the space key instead of enter, the arrow keys to select yes and the space bar again to agree to the terms and conditions: . Replace the current screenshot tool with flameshot . | Open the system settings | Find the Keyboard settings | Scroll down to keyboard shortcuts and click on “View and customize shortcuts” | Scroll down to custom shortcuts | Click the + icon to add a shortcut . | Name: flameshot | command: flameshot gui | key: print key in your keyboard | . | . ",
    "url": "/labs/lab2_alternative4/#step-5-optimizing-ubuntu-for-the-class",
    
    "relUrl": "/labs/lab2_alternative4/#step-5-optimizing-ubuntu-for-the-class"
  },"81": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Step 6: Setup Git",
    "content": ". | Sign in to your Github account. | Open a terminal window and run the following commands: | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | Setup SSH authentication | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphrase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboard in the step prior. Type yes (the whole word) and press enter and you are done | Test you ssh connection by using this command: ssh -T git@github.com | Clone your github repository. Use these commands: cd; git clone git@github.com:yourGithub-User-Name-Here/your-Repository-Name-Here | . ",
    "url": "/labs/lab2_alternative4/#step-6-setup-git",
    
    "relUrl": "/labs/lab2_alternative4/#step-6-setup-git"
  },"82": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Step 7: Installing VS Code",
    "content": ". | Download the .deb package | Open the file | Select the Software Center to install the package. | Install the following extensions: . | Markdown All in One by Yu Zhang | Markdown by starkwang | Markdown PDF by yzane | Markdown Preview Enhanced by Yiyi Wang | PDF Preview by Analytic Signal Limited | Code Spell Checker by Street Side Software | . | . ",
    "url": "/labs/lab2_alternative4/#step-7-installing-vs-code",
    
    "relUrl": "/labs/lab2_alternative4/#step-7-installing-vs-code"
  },"83": {
    "doc": "Lab 2 - Installing Ubuntu For Underpower PCs and Intel Macs using Ubuntu Server",
    "title": "Time to submit this lab",
    "content": ". | First, lets organize the repository . | Open the file manager | Create the following folders: labs, weekReports,finalExam,cheatSheets,notes | move all the files related to lab 1 to the labs folder | Inside the lab folder create 2 folders: lab1 and lab2. From this point on, every lab will have its own folder and so will every week report. | Move all the lab 1 files to the lab1 folder | Repeat the process for the week report 1 | . | Open the cis106 folder in VS Code | Inside the lab2 folder, create a file named lab2.md | Add the following markdown to the file: | . # Lab 2 Submission ## Virtual Machine settings ![neofetch](neofetch.png) ![script](script.png) . | Open a terminal and run the following command: neofetch | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot neofetch.png | Clear the terminal with the command: clear and run the following command: curl -s https://cis106.com/assets/scripts/lab2_system_info.sh | bash | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot script.png | Save and convert the file lab2.md file to pdf | Open the vs code terminal and enter the following commands to commit and push your changes to github: git pull git add . git commit -m 'lab2 finished' git push . | In blackboard submit the following: . | The URL to the lab2.md file in github | The lab2.pdf file | . | . Special Note 1 . This is a canonical lab for your learning. You will be making more virtual machines in the future. I suggest you create more virtual machines and then delete them. For example, find out what are the minimum requirements for installing windows 10 and then make a windows 10 virtual machine. Also, install other linux distributions as well. You do not need to keep these vms just use this lab to practice. Remember, when deleting virtual machines, make sure to select delete all files instead of just removing the vms. This will make sure that you recover your hard drive space. Special Note 2 . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab2_alternative4/#time-to-submit-this-lab",
    
    "relUrl": "/labs/lab2_alternative4/#time-to-submit-this-lab"
  },"84": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "content": " ",
    "url": "/labs/lab2_m_sereires_mac/",
    
    "relUrl": "/labs/lab2_m_sereires_mac/"
  },"85": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Video Here",
    "content": "Lab 2 Installing Ubuntu M Series Macs (M1/M2 CPUS) . | Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks . | Video Here | Note | Step 1: Download Hypervisor | Step 2: Create the virtual machine | Step 3: Install Ubuntu Server | Step 4: Update the system and install a desktop environment | Step 5: Install essential software | Step 6: Setting up Gnome Screenshot Tool | Step 7: Setup VS Code | Step 8: Setup Git and Github | Time to submit this lab | Known issues: | Special Note | Special Note Regarding the final exam: | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#video-here",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#video-here"
  },"86": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Note",
    "content": "This Lab is exclusive for students using M1/M2 Series Macbooks/Mac Mini. This lab assumes the following about your computer: . | CPU: M1 or M2 | Ram: 16 GB | OS: Mac OS Sonnoma Latest version | . This lab assumes the following about you: . | You can follow instructions | You have basic understanding of your computer’s hardware | . ",
    "url": "/labs/lab2_m_sereires_mac/#note",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#note"
  },"87": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 1: Download Hypervisor",
    "content": "Download the following applications: . | UTM Hypervisor for M series Macs | Ubuntu Server For ARM ISO file | . | Install UTM. | Do not touch/open/mount the Ubuntu ISO file. | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-1-download-hypervisor",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-1-download-hypervisor"
  },"88": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 2: Create the virtual machine",
    "content": "Create a virtual machine for Ubuntu Server . | Launch UTM. Select “Create a New Virtual Machine” | Here you will have 2 options. | Emulate: This is for x86_64. This option is slower but it will give you the same version of Ubuntu that the Windows users virtualize in Virtualbox. We will not be using this option on Mac. | Virtualize: this is for ARM64 operating system like the Ubuntu Server ISO we downloaded earlier. Most of the software we are going to use is available for ARM so there should not be much difference in the Labs for you | . | Select “Virtualize” | Select “Linux” for the Operating System options | In the “Boot ISO Image” section, click on the browser button and select the Ubuntu Server ISO you downloaded earlier. | In the “Hardware” configuration window, select the following: . | RAM: 4096 MB | CPU Cores: 2 | Note: *We won’t be using OpenGL hardware acceleration for now, but if you start having graphics issues, enable this feature and see if it helps. This is an experimental feature so for now let’s keep it safe. * | . | In the “Storage” section, set the disk size to 50Gb. That is just enough for our class. If you want to give it more storage, you can. | In the “Shared Directory” section, keep the defaults as is. We will not be needing a shared directory. But if you want to have a shared directory between then Host (mac) and Guest(Ubuntu), go ahead and play around with it. I leave this up to you. There are tons of guides on how to do this. | In the “Summary” Section, set the Name to Ubuntu Desktop . | The Virtual Machine settings window will open. | Add the following in the notes: . | Hostname: cis106 | username: your blackboard username - or a preferred username | password: pccc (we are going to keep things simple to help troubleshooting) | . | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-2-create-the-virtual-machine",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-2-create-the-virtual-machine"
  },"89": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 3: Install Ubuntu Server",
    "content": ". | Start the VM by pressing the Play button | If you see a message screen that reads “Display Output is not active” ignore it. The VM is just starting | Follow the steps to install Ubuntu server as laid out in the guides: How to install Ubuntu Server 24.04 | . Notes: 1. We will install the Server Edition of Ubuntu. The server does not have a graphical installer but it is easy anyways. 2. Later we will install a graphical desktop environment . | Once the OS has been installed, reboot the VM. If the VM seems to be hanging, manually reboot it. Before the disk boots the installer again, turn off the VM. | Remove the Ubuntu Server ISO file from the virtual DVD Drive. | Turn on the Virtual Machine and sign in. Use your username and password you set during the installation process | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-3-install-ubuntu-server",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-3-install-ubuntu-server"
  },"90": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 4: Update the system and install a desktop environment",
    "content": "Run these commands one at the time: . sudo apt update sudo apt upgrade -y sudo apt install ubuntu-desktop -y sudo reboot now . Note: We will be using Gnome but you are welcome to use any other desktop environment. This will install Ubuntu’s spin of the Gnome Desktop environment. A lot of packages will be installed, so this step will take time . Now that you have a desktop environment, let’s configure the rest of the system: . | Do not enable Ubuntu Pro | Ignore any error reporting. We will disable this anyway | Some users have reported issues with full screen so if you are having issues, just don’t use full screen. | Open a terminal window. Type this command to disable animations: gsettings set org.gnome.desktop.interface enable-animations false | Remove the error reporting software and other applications we won’t need: sudo apt purge apport aisleriot gnome-mahjongg gnome-sudoku | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-4-update-the-system-and-install-a-desktop-environment",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-4-update-the-system-and-install-a-desktop-environment"
  },"91": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 5: Install essential software",
    "content": ". | Install the curl command which will then use to download a couple of script files. sudo apt install curl -y | Use curl to download and run the following script: essentials.sh | . curl https://cis106.com/assets/scripts/essentials.sh -o essentials.sh chmod +x essentials.sh ./essentials.sh rm essentials.sh . | Install VS Code: | . curl https://cis106.com/assets/scripts/vscode.sh -o vscode.sh chmod +x vscode.sh ./vscode.sh rm vscode.sh . | Install Ubuntu Restricted Extras | . sudo apt install ubuntu-restricted-extras ubuntu-restricted-addons -y . When you see the screen below, use the tab key to select OK, the space key instead of enter, the arrow keys to select yes and the space bar again to agree to the terms and conditions: . ",
    "url": "/labs/lab2_m_sereires_mac/#step-5-install-essential-software",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-5-install-essential-software"
  },"92": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 6: Setting up Gnome Screenshot Tool",
    "content": "Note: The default screenshot application does not work for us. However, gnome-screenshot gives us what we need. In the past, we used to use flameshot, however, it is still not supported under Wayland therefore we will move away from Flameshot for the time being. To setup Gnome-Screenshot, follow these steps: . | Install gnome screenshot: use the following command sudo apt install gnome-screenshot -y | Open the keyboard settings in Ubuntu. | Settings -&gt; Keyboard -&gt; View Customize shortcuts -&gt; Custom Shortcuts -&gt; Click the + icon to add a new shortcut | In the dialog box add the following: . | Name: gnome-screenshot | Command: gnome-screenshot -i | . | Click the set screenshot button and press the print screen key in your keyboard or any other keyboard combination of your choosing. | Click the replace button. | Press the print screen key to test. Did it work? Chances are it did not. | For some weird reason this does not work the first time we do it, therefore, repeat the process and make sure to spell the command correctly. See the gif for reference! | . | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-6-setting-up-gnome-screenshot-tool",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-6-setting-up-gnome-screenshot-tool"
  },"93": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 7: Setup VS Code",
    "content": "Install the following extensions: . | Markdown All in One by Yu Zhang | Markdown by starkwang | Markdown PDF by yzane | Markdown Preview Enhanced by Yiyi Wang | PDF Preview by Analytic Signal Limited | Code Spell Checker by Street Side Software | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-7-setup-vs-code",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-7-setup-vs-code"
  },"94": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Step 8: Setup Git and Github",
    "content": ". | Sign in to your Github account. | Open a terminal window and run the following commands: | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | Setup SSH authentication | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboard in the step prior. Type yes (the whole word) and press enter and you are done | Test you ssh connection by using this command: ssh -T git@github.com | Clone your github repository. Use these commands: cd; git clone git@github.com:yourGithub-User-Name-Here/your-Repository-Name-Here | . ",
    "url": "/labs/lab2_m_sereires_mac/#step-8-setup-git-and-github",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#step-8-setup-git-and-github"
  },"95": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Time to submit this lab",
    "content": ". | First, lets organize the repository . | Open the file manager | Create the following folders: labs, weekReports,finalExam,cheatSheets,notes | move all the files related to lab 1 to the labs folder | Inside the lab folder create 2 folders: lab1 and lab2. From this point on, every lab will have its own folder and so will every week report. | Move all the lab 1 files to the lab1 folder | Repeat the process for the week report 1 | . | Open the cis106 folder in VS Code | Inside the lab2 folder, create a file named lab2.md | Add the following markdown to the file: | . # Lab 2 Submission ## Virtual Machine settings ![cpufetch](cpufetch.png) ![script](script.png) . | Open a terminal and run the following command: cpufetch | pv -qL 200 or simply cpufetch | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot cpufetch.png | Clear the terminal with the command: clear and run the following command: curl -s https://cis106.com/assets/scripts/lab2_system_info.sh | bash | Take a screenshot of the entire terminal window. Save the screenshot in the lab2 directory inside the cis106 directory. Name the screenshot script.png | Save and convert the file lab2.md file to pdf | Open the vs code terminal and enter the following commands to commit and push your changes to github: | . git pull git add . git commit -m 'lab2 finished' git push . | In blackboard submit the following: . | The URL to the lab2.md file in github | The lab2.pdf file | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#time-to-submit-this-lab",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#time-to-submit-this-lab"
  },"96": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Known issues:",
    "content": ". | Markdown PDF converter does not work: . | Solution: Install Chromium-browser: sudo apt install chromium-browser | Open the extensions settings: . | Navigate to the executable path and type: /snap/bin/chromium | If the machine freezes at this step, reboot and force close the Virtual Machine and UTM. | . | . | Ghosting when typing in the VS Code integrated Terminal: . | Workaround: . | Open a regular terminal | Navigate to the cis106 directory: cd cis106 | Run the git commands from there: . | git pull | git add . | git commit -m \"changes\" | git push | . | . | Note: I have not found a real solution for this yet. | . | . ",
    "url": "/labs/lab2_m_sereires_mac/#known-issues",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#known-issues"
  },"97": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Special Note",
    "content": "You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab2_m_sereires_mac/#special-note",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#special-note"
  },"98": {
    "doc": "Lab 2 - Installing Ubuntu 24.04 in M1, M2 and M3 Macbooks",
    "title": "Special Note Regarding the final exam:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/labs/lab2_m_sereires_mac/#special-note-regarding-the-final-exam",
    
    "relUrl": "/labs/lab2_m_sereires_mac/#special-note-regarding-the-final-exam"
  },"99": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Lab 3 - The Bash Shell",
    "content": " ",
    "url": "/labs/lab3/",
    
    "relUrl": "/labs/lab3/"
  },"100": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Video here",
    "content": "VIDEO . ",
    "url": "/labs/lab3/#video-here",
    
    "relUrl": "/labs/lab3/#video-here"
  },"101": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Pre Work:",
    "content": ". | Open the file manager and navigate to the labs folder/directory inside the cis106 repository (~/cis106/labs/) | Create a folder/directory called lab3 | Open VS Code and open the cis106 directory/folder inside VS Code | Create a file called lab3.md inside the lab3 folder/directory | Add the following markdown, save the file, close vs code, and start your lab | . --- Student: your name semester: Spring 24 Assignment: Lab 3 --- # Lab 3 Submission ## Question 2 ![q2](q2.1.png) ## Question 3 ![q3](q3.png) ## Challenge Question ![q4](q4.png) ## Script Source code: [lab3](lab3-script.sh) . ",
    "url": "/labs/lab3/#pre-work",
    
    "relUrl": "/labs/lab3/#pre-work"
  },"102": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Question 1: Using Ubuntu’s Desktop Environment (GNOME)",
    "content": "Appearance . | Download a wallpaper that you like. You can use this website for downloading wallpapers: wallheaven.cc | Create a directory/folder in the Pictures directory called wallpapers | Save the file in this newly created directory. Make sure to change the name to something more descriptive of the image. | Right-click on the desktop and change the wallpaper to the one you downloaded recently. | Add the following applications to the favorites bar: . | VS Code | Tilix | . | Customize the favorites bar to your liking . | Change its position | Remove any application you do not use regularly | Do you like the panel mode or the dock mode? | How about the icon size? | . | . Custom Font . | Download one of the following fonts from this website: . | Hack | FiraCode | Meslo | Source Code Pro | Terminus | Monoid | Noto | Iosevka Note: you can use this website to preview the font. Choose one you like and download it. | . | . | Install the font . | Create a hidden folder/directory in your home directory called .fonts (In Linux, hidden folders start with a period therefore to create a hidden folder all you need to do is start its name with a period) | Enable hidden folder view in the file manager by pressing CTRL + H. You should notice that a lot of more hidden folders appear. | Decompress the font.zip file you downloaded earlier and move all the .ttf files to the .fonts directory. | Open a terminal and type the command fc-cache -fv. This command will scan your system for new fonts. | . | Close the terminal. Open the file manager and press CTRL + H again so we can hide the hidden folders/directories again. You don’t want to mistakenly delete those later! | Open the terminal and type the following command: echo \"hello world\" | . This question does no require screenshot . ",
    "url": "/labs/lab3/#question-1-using-ubuntus-desktop-environment-gnome",
    
    "relUrl": "/labs/lab3/#question-1-using-ubuntus-desktop-environment-gnome"
  },"103": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Question 2: Working with BASH in the terminal emulator",
    "content": "Note: I use tilix but you are welcome to use any other terminal emulator. | Open Tilix and then click on the hamburger menu (≡) and then on preference. Ignore the error message | Click on appearance. Enable “Use a wide handle for splitters” | Split the terminal in 2 horizontally. Open the man page of the echo command in one of the terminals. | Resize the terminal window so that you have enough space to work on both. | Using the man page of echo figure out how to do the following: . | Display a line of text without the new line | Display a line of text that includes a horizontal tab | Display 2 lines of text in a single echo command | Display 2 lines of text in a single echo command, with the second line starting with a tab | Display 2 lines of text in a single echo command that starts with a tab | . | . Take a screenshot of the terminal showing all the commands that you used and the man page open. Save your screenshot as q2.1.png . ",
    "url": "/labs/lab3/#question-2-working-with-bash-in-the-terminal-emulator",
    
    "relUrl": "/labs/lab3/#question-2-working-with-bash-in-the-terminal-emulator"
  },"104": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Question 3: Write a basic shell script",
    "content": ". | Open the text editor app (Gnome Text) | Click on the gear icon (⚙) then . | Enable “Show line numbers” | Enable “Show right margin” | disable “Check spelling” | In Spaces Per Tab, set it to “4” | . | Click on the hamburger menu (≡) and then properties . | Pick a a theme that you like | Enable custom font and pick the font you downloaded earlier. Adjust the font size to your liking. | Enable highlight current line | . | Type the following line: #!/bin/bash (double-check your spelling) | Save the file as: lab3-script1.sh in the lab3 folder/directory inside cis106/labs/ | . | Add the following lines, then save the script. | . echo \"This is a shell script,\" echo -n \"This script will print the current date\" date echo \"This is the machine's name:\" uname -n echo \"This is the current user:\" echo $USER echo \"This is the current date\" date +\"%A, %B %d %R %Z\" . | Add the following comments at the top after the shell declaration/shebang #!/bin/bash | . # Author: your name # Date: current date in format mm/dd/yy # Description: This is a basic script that # uses environment variables and the date command . | Save the script and close the text editor | Open a terminal and type the following commands to execute the script: bash ~/cis106/labs/lab3/lab3-script.sh | . Take a screenshot of the terminal showing the output of the script. Double-check your spelling and follow every step correctly if you get any error messages. ",
    "url": "/labs/lab3/#question-3-write-a-basic-shell-script",
    
    "relUrl": "/labs/lab3/#question-3-write-a-basic-shell-script"
  },"105": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Question 4: Challenge Question",
    "content": "Write a shell script that displays the following output: . Tips: . | You will need to read the man page of the echo, uname, and date, df, free and figlet commands. | You can use the cheat command | Save the script in the same directory/folder as you saved the question 3 script ~/cis106/labs/lab3/ | Name the script challenge_lab3.sh | The command to run the script is bash ~/cis106/labs/lab3/challenge_lab3.sh if this does not work, it is because you saved the script in the wrong folder. Retrace your steps to troubleshoot. | You must complete this question alone. I cannot provide assistance here. Everything you need to complete this challenge has been covered in this lab and in the presentations. While I cannot provide you with assistance answering the question, I can provide extra explanations or clarifications. | . NOTE: This script must use the echo, uname, and date, df, free and figlet command. Any other solution that does not involve these commands will not be accepted and you will receive 0 for this question. No exceptions! . ",
    "url": "/labs/lab3/#question-4-challenge-question",
    
    "relUrl": "/labs/lab3/#question-4-challenge-question"
  },"106": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "What will you submit:",
    "content": ". | Place and properly label (using headings) all the screenshots you took. See the markdown I gave you at the beginning of this document | Convert the file to pdf | Push everything to github | In Blackboard, submit the pdf file lab3.pdf | . Note: I will read your script from github. If the script is not there, you will not receive credit. ",
    "url": "/labs/lab3/#what-will-you-submit",
    
    "relUrl": "/labs/lab3/#what-will-you-submit"
  },"107": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "How I will grade you:",
    "content": ". | I will navigate to your GitHub repository and read your script. | I will download your script and run it on my machine. | If your script runs and I get the same output as the screenshot, you will get full credit for the challenge question. Otherwise, partial credit will be awarded. | Every question in this lab is worth 25 points. | . ",
    "url": "/labs/lab3/#how-i-will-grade-you",
    
    "relUrl": "/labs/lab3/#how-i-will-grade-you"
  },"108": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Special Note",
    "content": "You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab3/#special-note",
    
    "relUrl": "/labs/lab3/#special-note"
  },"109": {
    "doc": "Lab 3 - The Bash Shell",
    "title": "Special Note:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/labs/lab3/#special-note-1",
    
    "relUrl": "/labs/lab3/#special-note-1"
  },"110": {
    "doc": "Lab 4 - The Linux FS",
    "title": "Lab 4 - The Linux FS",
    "content": ". | Presentations: . | How to navigate the filesystem | Video here | . | . Note: Your final exam will include questions similar to 4 and 5. I will answer questions 4 and 5 during class after the due date for this lab has expired. ",
    "url": "/labs/lab4/",
    
    "relUrl": "/labs/lab4/"
  },"111": {
    "doc": "Lab 4 - The Linux FS",
    "title": "Question 1 | Moving around the file system",
    "content": "| Command | Description | . | pwd | Print the absolute path of the current working directory. | . | cd | Change the shell current working directory. | . | ls | list files inside a given directory | . Before you start this lab, complete all the practice in the presentation. This will allow you to understand these commands better. This is part of your Week report so make sure to take screenshots. Using pwd and cd with absolute path (remember to use the bash autocompletion feature) . | Start a terminal. What is your present working directory? | Change your present working directory to /usr/share/themes | What is your present working directory now? | Change your present working directory to the root of the filesystem (/) | Change your present working directory to /snap/firefox if for whatever reason you don’t have this directory then use: /home/your-user-name-here/Downloads/ Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 1-5. | . Using pwd and cd with a relative path (remember to use the bash autocompletion feature) . | Clear your terminal window. Change the working directory to YOUR home directory. | Change the working directory to the Downloads directory. | Go back 2 directories. | Where are you now? | Change the working directory to the Documents/ directory. Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 6-10. | . ",
    "url": "/labs/lab4/#question-1--moving-around-the-file-system",
    
    "relUrl": "/labs/lab4/#question-1--moving-around-the-file-system"
  },"112": {
    "doc": "Lab 4 - The Linux FS",
    "title": "Question 2 | The ls command",
    "content": "Download this compressed zip file: lab4files.zip Decompress the zip file in your home directory. | Change your present working directory to /usr/share/. Using absolute path, list all the files inside the lab4files directory. | Change your present working directory to ~/lab4files. Long list all the files inside your current working directory with human readable file sizes. | Long list all the files inside lab4files with human readable file size, and sorted by file size. | Long list all the files inside lab4files with human readable file size, sorted by file size, without the user nor the group name, and showing their inode number. | List all the files inside lab4files sorted by file extension and in reverse order. | . Take a screenshot of the terminal only. Your screenshot must show all the commands that you used to answer questions 1-5. Multiple screenshots may be **required** . ",
    "url": "/labs/lab4/#question-2--the-ls-command",
    
    "relUrl": "/labs/lab4/#question-2--the-ls-command"
  },"113": {
    "doc": "Lab 4 - The Linux FS",
    "title": "Question 3 | Shell scripting",
    "content": "Use this image as a visual aid during this question . If you want your Gedit (Text Editor) to look like mine. Take a moment to follow this guide. Description: . John wants to create a script to practice cd, ls, pwd, and variables. The script will output the following: . Solution . | The complete source code can be found here . | Use the screenshot and write a script that can produce the same output. | Modify the script to use variables where needed. | . | . Take a screenshot of the terminal and the text editor showing the source code. ",
    "url": "/labs/lab4/#question-3--shell-scripting",
    
    "relUrl": "/labs/lab4/#question-3--shell-scripting"
  },"114": {
    "doc": "Lab 4 - The Linux FS",
    "title": "Question 4 | Challenge write a script",
    "content": "Write a script that will produce the following output: . Tips: . | You will need environment variables and user defined variables. | Use the env command to display a list of all environment variables | The ls command is using a time-style. Use the man page and this guide to figure out the right option. Time style is not the only option in used here. | . Take a screenshot of the terminal after executing the script . ",
    "url": "/labs/lab4/#question-4--challenge-write-a-script",
    
    "relUrl": "/labs/lab4/#question-4--challenge-write-a-script"
  },"115": {
    "doc": "Lab 4 - The Linux FS",
    "title": "What will you Submit:",
    "content": ". | Place all the screenshots and answers to your questions in a the lab4.md file. | Convert your markdown file to pdf | Push the changes to Github . | git pull; git add .; git commit -m 'lab3 completed'; git push | . | Submit the URL of Lab4.md and the pdf file | Delete all the snapshopts and take a new one. Name it “Lab 4 complete” | . ",
    "url": "/labs/lab4/#what-will-you-submit",
    
    "relUrl": "/labs/lab4/#what-will-you-submit"
  },"116": {
    "doc": "Lab 4 - The Linux FS",
    "title": "How I will grade you:",
    "content": ". | Every question is worth: 25 pts | I will go to your github repository and read/download your script. If it produces the required output and matches the screenshot, you will get full credit for the challenge question. | . ",
    "url": "/labs/lab4/#how-i-will-grade-you",
    
    "relUrl": "/labs/lab4/#how-i-will-grade-you"
  },"117": {
    "doc": "Lab 4 - The Linux FS",
    "title": "Extra practice (not mandatory but recommended)",
    "content": "The tree and exa command (Optional Question. No submission required) . | Using absolute path and having /etc as your present working directory. Display a tree of the directory lab4files. | Change your present working directory to your Downloads directory. Display a tree of the directory lab4files with the full path prefix for each file, the file permissions, and the file size in human readable format. | Display a tree of the directory lab4files sorted by last modified time and showing the file owner and group. | Install exa then list all the options of the exa command. | Using exa, long list all the files inside lab4files | Long list lab4files showing the header that indicates what each column means. | Long list lab4files without the file owner nor group including the header and the date the file was created. | . Solution: . | cd /etc | tree ~/lab4files/ | cd ~/Downloads | tree -fph ~/lab4files/ | tree -tgu ~/lab4files | sudo apt install exa -y | exa --help | exa -l ~/lab4files/ | exa -lh ~/lab4files/ | exa -lhU --no-permissions --no-user ~/lab4files/ | . Special Note . You are going to be using the git commands a lot. Here is a quick reference: . | git clone repository/url/here: is the command to clone a repository where cloning means downloading a repository to your computer | git pull: to pull/synchronize your repository from github to your local machine. Always run this command BEFORE you start working VS Code | git add .: to track all the changes made to your file. | git commit -m \"label for your changes here\": this command will label all the changes you added with the add command | git push: will send all your changes to your github repository | . Always run the commands in this order: pull =&gt; add =&gt; commit =&gt; push Never use the github website to make changes to your repository unless you know what you are doing and can remember to pull the changes before working on your local repository! . ",
    "url": "/labs/lab4/#extra-practice-not-mandatory-but-recommended",
    
    "relUrl": "/labs/lab4/#extra-practice-not-mandatory-but-recommended"
  },"118": {
    "doc": "Lab 4 - The Linux FS",
    "title": "Special Note:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/labs/lab4/#special-note-1",
    
    "relUrl": "/labs/lab4/#special-note-1"
  },"119": {
    "doc": "Markdown Cheat Sheet",
    "title": "Markdown Cheat Sheet",
    "content": "File here: https://devhints.io/markdown . ",
    "url": "/docs/MarkdownCheatSheet/",
    
    "relUrl": "/docs/MarkdownCheatSheet/"
  },"120": {
    "doc": "Frequently Asked Questions",
    "title": "Frequently Asked Questions",
    "content": " ",
    "url": "/docs/faq/",
    
    "relUrl": "/docs/faq/"
  },"121": {
    "doc": "Frequently Asked Questions",
    "title": "If this class is about Linux, why are we learning about Git, VS Code, and VirtualBox?",
    "content": ". | To learn an operating system, you need to use it. To use an operating system, you need a computer to install and run it. VirtualBox allows you to create a virtual machine where you can install an operating system, so learning about virtualization is essential. To receive grades for completing assignments, you need a way to create, save, and submit documents. VS Code is our text/code editor of choice because it manages Markdown easily and offers a lot of versatility through extensions. Markdown is a plaintext formatting language, which is simple to learn and runs well in a virtual machine. Git is version control software that tracks changes in files and directories, while GitHub is a cloud hosting solution for Git. Together, they serve as a backup for your files. If your virtual machine breaks, all your work can be retrieved from GitHub. VS Code, VirtualBox, and Git are essential tools that every Linux user should have experience with. | . ",
    "url": "/docs/faq/#if-this-class-is-about-linux-why-are-we-learning-about-git-vs-code-and-virtualbox",
    
    "relUrl": "/docs/faq/#if-this-class-is-about-linux-why-are-we-learning-about-git-vs-code-and-virtualbox"
  },"122": {
    "doc": "Frequently Asked Questions",
    "title": "Why is this class only 1 credit?",
    "content": ". | Due to the limitations of associate degree programs. | . ",
    "url": "/docs/faq/#why-is-this-class-only-1-credit",
    
    "relUrl": "/docs/faq/#why-is-this-class-only-1-credit"
  },"123": {
    "doc": "Frequently Asked Questions",
    "title": "Why is this class so much work?",
    "content": ". | It is not. For every lecture, you will be assigned the equivalent of 2 hours of work. This is the required amount of time that a 1-credit class is designed to be studied each week. This course ensures that you study for 2 hours every week per lecture. The 2 hours of work are designed with the following assumptions: . | You understand basic computer terminology. | You are efficient at using your computer. | You can follow instructions. | Your computer is functioning optimally for the class. | . | . ",
    "url": "/docs/faq/#why-is-this-class-so-much-work",
    
    "relUrl": "/docs/faq/#why-is-this-class-so-much-work"
  },"124": {
    "doc": "Frequently Asked Questions",
    "title": "Why is the final in person?",
    "content": ". | This guarantees fairness to everyone. It is impossible to prevent cheating if a performance-based exam is given over Zoom to some students and in person to others. Conducting the exam in person also ensures that AI is not used to answer the questions. If you have any issues, DM your professor in Slack or email them as soon as possible. To ensure that everyone has enough time to prepare, all details are provided on the first day of class and repeated throughout the semester. | . ",
    "url": "/docs/faq/#why-is-the-final-in-person",
    
    "relUrl": "/docs/faq/#why-is-the-final-in-person"
  },"125": {
    "doc": "Frequently Asked Questions",
    "title": "What is the format of the final exam?",
    "content": ". | The final exam is performance-based. You will be given 4 problems to solve using your Ubuntu machine. Just like in the labs, you will take screenshots of your terminal to show the solutions. One of the questions will involve writing a script. You can find examples here. All the commands and topics to study are available here. | . ",
    "url": "/docs/faq/#what-is-the-format-of-the-final-exam",
    
    "relUrl": "/docs/faq/#what-is-the-format-of-the-final-exam"
  },"126": {
    "doc": "Frequently Asked Questions",
    "title": "What happens if I do not have a computer to bring to school?",
    "content": ". | I have 4 computers with Ubuntu already installed. You can use them during class and for the exam. If needed, a dedicated user account can be created for you. All you need to do is reserve one as soon as possible, and the PC will be yours for the semester. These PCs cannot be taken out of the school, but I will bring them every Wednesday and Thursday. | . ",
    "url": "/docs/faq/#what-happens-if-i-do-not-have-a-computer-to-bring-to-school",
    
    "relUrl": "/docs/faq/#what-happens-if-i-do-not-have-a-computer-to-bring-to-school"
  },"127": {
    "doc": "Frequently Asked Questions",
    "title": "Are there any PCs you recommend I buy?",
    "content": ". | If you want to have your own PC for Linux and don’t mind spending some money, I recommend buying a MiniPC. They are inexpensive, and Ubuntu runs well on them. Here are the ones I have tested and use for the class: . | ACEMAGICIAN Win11 Mini PC, 12th Alder Lake N100 – Price: around $150. | Beelink Mini PC, SER5 Pro 5850U AMD Ryzen 7 – Price: around $280. | HP Prodesk 600 G3 Micro Computer Mini PC (Intel Quad Core i5-7500T 2.7GHz) – Price: about $110. | Dell OptiPlex 3050 Micro Business Desktop (Intel Core i5-6500T) – Price: about $100. | . | Note: . | Regardless of which computer you get, keep the following in mind: . | Memory: DDR4 with a minimum of 8GB, upgradeable. | CPU: Quad-core or higher. The newer, the better. | Storage: M.2 or SSD. If it comes with an HDD, replace it with an SSD as soon as possible. | Research to ensure compatibility with Ubuntu. Most desktop PCs, especially older ones, are likely to be compatible. | . | . | . ",
    "url": "/docs/faq/#are-there-any-pcs-you-recommend-i-buy",
    
    "relUrl": "/docs/faq/#are-there-any-pcs-you-recommend-i-buy"
  },"128": {
    "doc": "Frequently Asked Questions",
    "title": "How do I take a snapshot of my virtual machine?",
    "content": ". | If you are using UTM on macOS, unfortunately, this option is not available as UTM does not have snapshot capability. For VirtualBox: | . You can learn more about snapshots here. ",
    "url": "/docs/faq/#how-do-i-take-a-snapshot-of-my-virtual-machine",
    
    "relUrl": "/docs/faq/#how-do-i-take-a-snapshot-of-my-virtual-machine"
  },"129": {
    "doc": "Frequently Asked Questions",
    "title": "How do I clone a GitHub repository?",
    "content": ". | In the terminal, run: git clone url-of-repository-here | . ",
    "url": "/docs/faq/#how-do-i-clone-a-github-repository",
    
    "relUrl": "/docs/faq/#how-do-i-clone-a-github-repository"
  },"130": {
    "doc": "Frequently Asked Questions",
    "title": "My computer died. How do I recover my virtual machine?",
    "content": ". | You will need to create a new virtual machine unless you had a backup of your virtual machine (export). However, once you clone your GitHub repository, all your work that you pushed to GitHub will be restored in your new virtual machine. | . ",
    "url": "/docs/faq/#my-computer-died-how-do-i-recover-my-virtual-machine",
    
    "relUrl": "/docs/faq/#my-computer-died-how-do-i-recover-my-virtual-machine"
  },"131": {
    "doc": "Frequently Asked Questions",
    "title": "I need help. Where do I get tutoring for this class?",
    "content": ". | Tutoring for all CIS courses is offered in room H311 in the Hamilton building. However, I cannot guarantee that there will always be a tutor for you. Therefore, I offer my time. If you are struggling with the course material, you can schedule time with me over Zoom or in person. You can also request extra lectures and materials, and I can create a video for you. All you need to do is ask. Remember, you paid for this class! | . ",
    "url": "/docs/faq/#i-need-help-where-do-i-get-tutoring-for-this-class",
    
    "relUrl": "/docs/faq/#i-need-help-where-do-i-get-tutoring-for-this-class"
  },"132": {
    "doc": "Frequently Asked Questions",
    "title": "Do you recommend that I install Linux/Ubuntu on my main PC/laptop?",
    "content": ". | No. This is likely not the only class you are taking. Not all necessary applications for other classes will be available for Linux. However, if you have a spare PC, I recommend installing Linux on it, provided it is a PC you are comfortable experimenting with. | . ",
    "url": "/docs/faq/#do-you-recommend-that-i-install-linuxubuntu-on-my-main-pclaptop",
    
    "relUrl": "/docs/faq/#do-you-recommend-that-i-install-linuxubuntu-on-my-main-pclaptop"
  },"133": {
    "doc": "Frequently Asked Questions",
    "title": "Do you recommend dual-booting?",
    "content": ". | No, unless you know what you are doing. Windows is notorious for breaking GRUB (the boot manager). However, if you are confident in your technical skills, you can handle any issues that arise from dual-booting. I never dual-boot on the same drive. If your laptop/PC has more than one drive, you can install Windows on one drive and Ubuntu on another. | . ",
    "url": "/docs/faq/#do-you-recommend-dual-booting",
    
    "relUrl": "/docs/faq/#do-you-recommend-dual-booting"
  },"134": {
    "doc": "Setup SSH Guide",
    "title": "Setup SSH Guide",
    "content": " ",
    "url": "/guides/SetupSSHUbuntuServer/",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/"
  },"135": {
    "doc": "Setup SSH Guide",
    "title": "Installation",
    "content": ". | Make sure that your server and your client computer are in the same network. The easiest way to do this is to make sure that the network addapter in the viertual machine is set to bridge instead of nat. To do this go, open the virtual machine settings and in the network section change the adapter to Bridge. | . | However, your network may prevent you from doing this. Some IDS and smart routers may prevent you from getting an IP. In this case, you need to use port forwarding in your virtual machine. Here is a guide on how to do it. Portforwarding Example . | Make sure that the ssh server program is installed in the server virtual machine sudo apt install openssh-server -y . | Make sure that the ssh client program is installed in the client machine. This is the computer that you will be using to manage your server. sudo apt install openssh-server -y . | Enable and start ssh in the server: sudo systemctl enable ssh; sudo systemctl start ssh . | Test the connection by loging in to the server from the client. First, use the ip or hostname command to find out the ip address of the server. | On the server type, hostname -I this will give you the ip address of your server. | On the client type: ssh username@server-ip-address . | If you are using port forwarding, your command will be: | . ssh -p 2222 username@127.0.0.1 . | Read and answer the questions and you will connect sucessfully. | . ",
    "url": "/guides/SetupSSHUbuntuServer/#installation",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/#installation"
  },"136": {
    "doc": "Setup SSH Guide",
    "title": "Setup private and public key authentication with or without password:",
    "content": ". | On the server, configure the firewall to accept ssh connections. sudo ufw allow ssh sudo ufw enable sudo ufw status . | Now we need to generate an ssh key in our client computer. If you are using your ubuntu machine from the course, then you already have one. If you are not, then you must create the ssh keys: | In your client machine type: ssh-keygen . | Now you can type this command to copy your ssh key to the server ssh-copy-id -i .ssh/id_rsa.pub webmaster@server-ip-address . | if you are using port forwarding, use this command instead: ssh-copy-id -i .ssh/id_rsa.pub -p 2222 webmaster@127.0.0.1 . | . if you use port forwarding your command will be: . ssh-copy-id -p 2222 username@127.0.0.1 . | Now you can connect to your server without having to remember the password. | . ",
    "url": "/guides/SetupSSHUbuntuServer/#setup-private-and-public-key-authentication-with-or-without-password",
    
    "relUrl": "/guides/SetupSSHUbuntuServer/#setup-private-and-public-key-authentication-with-or-without-password"
  },"137": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "How to Setup Git and Github in Ubuntu 20.04",
    "content": " ",
    "url": "/guides/Ubuntu%20Github%20Setup/",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/"
  },"138": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Assumptions:",
    "content": "I assume the following: . | You have a computer running Ubuntu and VS Code is installed in it. | You have a basic understanding of the Linux Command Line and your Terminal Emulator | You have a Github Account | . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#assumptions",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#assumptions"
  },"139": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Install and setup git",
    "content": "Install command: sudo apt install git -y . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#install-and-setup-git",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#install-and-setup-git"
  },"140": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Setup Git",
    "content": ". | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | . ",
    "url": "/guides/Ubuntu%20Github%20Setup/#setup-git",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#setup-git"
  },"141": {
    "doc": "How to Setup Git and Github in Ubuntu 20.04",
    "title": "Setup SSH authentication",
    "content": ". | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. See examle here: . | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboad in the step prior. Type yes (the whole word) and press enter and you are done . | Test you ssh connection by using this command: ssh -T git@github.com You will see the following outcome: . | . If you do not see an error message or a different message than the one shown prior, then your SSH connection is correct. Now you can push and clone using SSH. ",
    "url": "/guides/Ubuntu%20Github%20Setup/#setup-ssh-authentication",
    
    "relUrl": "/guides/Ubuntu%20Github%20Setup/#setup-ssh-authentication"
  },"142": {
    "doc": "Customize Gedit",
    "title": "Customize Gedit",
    "content": " ",
    "url": "/guides/custimizeGedit/",
    
    "relUrl": "/guides/custimizeGedit/"
  },"143": {
    "doc": "Customize Gedit",
    "title": "Video:",
    "content": ". | Here | . ",
    "url": "/guides/custimizeGedit/#video",
    
    "relUrl": "/guides/custimizeGedit/#video"
  },"144": {
    "doc": "Customize Gedit",
    "title": "Synopsis",
    "content": "Make Gedit feel and look more like an IDE than a text editor . ",
    "url": "/guides/custimizeGedit/#synopsis",
    
    "relUrl": "/guides/custimizeGedit/#synopsis"
  },"145": {
    "doc": "Customize Gedit",
    "title": "What is Gedit",
    "content": "Gedit is a text editor designed for the GNOME desktop environment. It was GNOME’s default text editor and part of the GNOME Core Applications until GNOME version 42 in March 2022, which changed the default text editor to GNOME Text Editor. ",
    "url": "/guides/custimizeGedit/#what-is-gedit",
    
    "relUrl": "/guides/custimizeGedit/#what-is-gedit"
  },"146": {
    "doc": "Customize Gedit",
    "title": "How to install Gedit",
    "content": "If you are using Gnome, gedit is installed by default. This is the default text editor for Gnome. To install gedit: sudo apt install gedit gedit-plugins -y If you are using gnome, install the plugins package otherwise the plugins won’t be available. Gnome Text Editor and gedit are essentially the same app. ",
    "url": "/guides/custimizeGedit/#how-to-install-gedit",
    
    "relUrl": "/guides/custimizeGedit/#how-to-install-gedit"
  },"147": {
    "doc": "Customize Gedit",
    "title": "Installing and using plugins",
    "content": ". | Open gedit (text editor) and go to preferences &gt; Plugins | Enable the following plugins: . | Bracket Autocompletion: will auto close brackets, parenthesis, and quotes | Code Comment: will allow us to do multi line commenting. (CTRL + M and CTRL + Shift + M) | Embedded terminal: Will give us a quick terminal at the bottom of the gedit window. | File Browser Panel: Will give us a file manager to the left of the window. | Multi Edit: will give us multi line editing. | Open Links: will allow us to open URLs | Quick highlight: Will automatically highlight all instances of the highlighted word | Quick open: with CTRL + Alt + o ,opens a menu to open recently edited files | Session Saver: saves the session so when you close gedit and open it again, it opens on the last session | Text Size: will us to increase or decrease the size of the text using CTRL + and CTRL - | Word completion: Will enable autocomplete of common words in the script | . | . ",
    "url": "/guides/custimizeGedit/#installing-and-using-plugins",
    
    "relUrl": "/guides/custimizeGedit/#installing-and-using-plugins"
  },"148": {
    "doc": "Customize Gedit",
    "title": "Enabling functionality",
    "content": ". | In the view tab of the preferences window enable the following: . | Display line numbers | Display right margin at column 80 | Display overview map | In the editor tab: . | Set the tab width to 4 spaces | Autosave the file every 5 minutes | . | . | . | In the Font and color: . | Download the font Firacode Nerd Font Mono | Install the font . | Extract the archive in a the directory .fonts located in YOUR home directory. If the directory is not there, press CTRL + H to enable hidden files. If the directory is not there still, create it. | Open a terminal and type the command: fc-cache -f -v to refresh the font cache. | Go back to gedit Font &amp; Colors tab inside preferences. | Change the font to FiraMono Nerd Font Mono Regular (if you cant find the font, close gedit and open it again) | . | . | . | Changing the theme . | Optional (change the font size to a size you are more comfortable with) | Optional (change the color scheme to something you prefer or matches our preference). I like the dracula theme which you can download from here | Here are other themes you can download too! | You will need to place these themes in: $HOME/.local/share/gedit/styles/ | Themes are xml files so you need to extract the xz file in that directory. | . | In the view options of the hamburger menu, enable: . | Side Panel | Bottom Panel | . | . ",
    "url": "/guides/custimizeGedit/#enabling-functionality",
    
    "relUrl": "/guides/custimizeGedit/#enabling-functionality"
  },"149": {
    "doc": "Customize Gedit",
    "title": "Testing Gedit",
    "content": "Here is the source code: . Bash . #!/bin/bash main (){ echo \"Hello world\" } main . HTML . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;style&gt; button { background-color: #04AA6D; border: none; color: white; padding: 15px 32px; font-size: 25px; } &lt;/style&gt; &lt;body&gt; &lt;button onclick=\"say();\" id=\"btn\" type=\"button\"&gt;Say hello!&lt;/button&gt; &lt;h1 id=\"msg\"&gt;&lt;/h1&gt; &lt;/body&gt; &lt;script&gt; function say(){ document.getElementById(\"msg\").innerHTML = \"Hello world!\"; } &lt;/script&gt; &lt;/html&gt; . Python . #!/usr/bin/python3 def hello(): print(\"hello World\") hello() . C++ . #include &lt;iostream&gt; using std::cout; int main() { cout &lt;&lt; \"Hello World!\\n\"; return 0; } // g++ hello.cpp &amp;&amp; ./a.out to compile and run . Rust . fn main() { println!(\"Hello World!\"); } // Must have rust installed: // curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh // rustc hello.rs &amp;&amp; ./hello to compile and run . ",
    "url": "/guides/custimizeGedit/#testing-gedit",
    
    "relUrl": "/guides/custimizeGedit/#testing-gedit"
  },"150": {
    "doc": "FORMAT control characters",
    "title": "FORMAT control characters supported by the GNU/date command",
    "content": "| %FORMAT String | Description | . | %% | a literal % | . | %a | locale’s abbreviated weekday name (e.g., Sun) | . | %A | locale’s full weekday name (e.g., Sunday) | . | %b | locale’s abbreviated month name (e.g., Jan) | . | %B | locale’s full month name (e.g., January) | . | %c | locale’s date and time (e.g., Thu Mar 3 23:05:25 2005) | . | %C | century; like %Y, except omit last two digits (e.g., 21) | . | %d | day of month (e.g, 01) | . | %D | date; same as %m/%d/%y | . | %e | day of month, space padded; same as %_d | . | %F | full date; same as %Y-%m-%d | . | %g | last two digits of year of ISO week number (see %G) | . | %G | year of ISO week number (see %V); normally useful only with %V | . | %h | same as %b | . | %H | hour (00..23) | . | %I | hour (01..12) | . | %j | day of year (001..366) | . | %k | hour ( 0..23) | . | %l | hour ( 1..12) | . | %m | month (01..12) | . | %M | minute (00..59) | . | %n | a newline | . | %N | nanoseconds (000000000..999999999) | . | %p | locale’s equivalent of either AM or PM; blank if not known | . | %P | like %p, but lower case | . | %r | locale’s 12-hour clock time (e.g., 11:11:04 PM) | . | %R | 24-hour hour and minute; same as %H:%M | . | %s | seconds since 1970-01-01 00:00:00 UTC | . | %S | second (00..60) | . | %t | a tab | . | %T | time; same as %H:%M:%S | . | %u | day of week (1..7); 1 is Monday | . | %U | week number of year, with Sunday as first day of week (00..53) | . | %V | ISO week number, with Monday as first day of week (01..53) | . | %w | day of week (0..6); 0 is Sunday | . | %W | week number of year, with Monday as first day of week (00..53) | . | %x | locale’s date representation (e.g., 12/31/99) | . | %X | locale’s time representation (e.g., 23:13:48) | . | %y | last two digits of year (00..99) | . | %Y | year | . | %z | +hhmm numeric timezone (e.g., -0400) | . | %:z | +hh:mm numeric timezone (e.g., -04:00) | . | %::z | +hh:mm:ss numeric time zone (e.g., -04:00:00) | . | %:::z | numeric time zone with : to necessary precision (e.g., -04, +05:30) | . | %Z | alphabetic time zone abbreviation (e.g., EDT) | . ",
    "url": "/guides/format-control-char-date-command/#format-control-characters-supported-by-the-gnudate-command",
    
    "relUrl": "/guides/format-control-char-date-command/#format-control-characters-supported-by-the-gnudate-command"
  },"151": {
    "doc": "FORMAT control characters",
    "title": "Example:",
    "content": ". | ls -l --time-style=+%Z / | . ",
    "url": "/guides/format-control-char-date-command/#example",
    
    "relUrl": "/guides/format-control-char-date-command/#example"
  },"152": {
    "doc": "FORMAT control characters",
    "title": "FORMAT control characters",
    "content": " ",
    "url": "/guides/format-control-char-date-command/",
    
    "relUrl": "/guides/format-control-char-date-command/"
  },"153": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Install Ubuntu Server 20.04 In VirtualBox",
    "content": " ",
    "url": "/guides/install-ubuntu-server-20.04/#install-ubuntu-server-2004-in-virtualbox",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#install-ubuntu-server-2004-in-virtualbox"
  },"154": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 1",
    "content": ". | Download Ubuntu Server 24.04 iso file. | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-1",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-1"
  },"155": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 2",
    "content": ". | Create a virtual machine that meets Ubuntu Server 24.04 Minimun requirements.. | The minimum system requirements are: . | CPU: 1 core | RAM: 1 gigabyte or more | Disk: a minimum of 30 gigabytes | . | . | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-2",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-2"
  },"156": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Step 3",
    "content": ". | Turn on Virtual Machine | Start the installer. | . ",
    "url": "/guides/install-ubuntu-server-20.04/#step-3",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/#step-3"
  },"157": {
    "doc": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "title": "Install Ubuntu Server 24.04 In VirtualBox 7",
    "content": " ",
    "url": "/guides/install-ubuntu-server-20.04/",
    
    "relUrl": "/guides/install-ubuntu-server-20.04/"
  },"158": {
    "doc": "Kvm + Virtmanager",
    "title": "Kvm + Virtmanager",
    "content": "Note: This guide was tested on Ubuntu 22.04 and 24.04 Source: How to Install KVM on Ubuntu 20.04 This is a work in progress . ",
    "url": "/guides/install_virtmanager/",
    
    "relUrl": "/guides/install_virtmanager/"
  },"159": {
    "doc": "Kvm + Virtmanager",
    "title": "Step 1",
    "content": ". | Check if virtualization is supported using the commands: egrep -c '(vmx|svm)' /proc/cpuinfoThis command should return any number greater than 0 | Install cpu checker: sudo apt update &amp;&amp; sudo apt install cpu-checker | Check if your system supports KVM sudo kvm-ok This should return the following output: INFO: /dev/kvm exists KVM acceleration can be used . | . ",
    "url": "/guides/install_virtmanager/#step-1",
    
    "relUrl": "/guides/install_virtmanager/#step-1"
  },"160": {
    "doc": "Kvm + Virtmanager",
    "title": "Step 2",
    "content": ". | Install KVM and other dependencies: sudo apt install -y qemu qemu-kvm libvirt-daemon libvirt-clients bridge-utils virt-manager | Enable the virtualization daemon: sudo systemctl status libvirtd | Check if the kvm modules are running: lsmod | grep -i kvm | This should return the following output (similar): kvm_amd 208896 0 kvm 1417216 1 kvm_amd ccp 155648 4 kvm_amd . | Add your user to the necessary groups. This will allow qemu to use iso files: sudo usermod -aG libvirt-qemu $USER and sudo usermod -aG libvirt $USER | You can make virtual machines with virt-manager now. The process is similar to Virtualbox. | If you get an error message in virt-manager that reads: QEMU/KVM - Not Connected, reboot. | . ",
    "url": "/guides/install_virtmanager/#step-2",
    
    "relUrl": "/guides/install_virtmanager/#step-2"
  },"161": {
    "doc": "Kvm + Virtmanager",
    "title": "Pending on this guide:",
    "content": ". | Add steps to create virtual machines graphically and via the command line | Add steps to export virtual machines | Add steps to create snapshopts and install spice tools | . ",
    "url": "/guides/install_virtmanager/#pending-on-this-guide",
    
    "relUrl": "/guides/install_virtmanager/#pending-on-this-guide"
  },"162": {
    "doc": "Install Jekyll",
    "title": "How to install Jekyll in Ubuntu",
    "content": ". | Note: This is a daft. | Main guide | tutorial | . ",
    "url": "/guides/jekyll/#how-to-install-jekyll-in-ubuntu",
    
    "relUrl": "/guides/jekyll/#how-to-install-jekyll-in-ubuntu"
  },"163": {
    "doc": "Install Jekyll",
    "title": "Dependencies:",
    "content": "sudo apt-get install ruby-full build-essential zlib1g-dev . ",
    "url": "/guides/jekyll/#dependencies",
    
    "relUrl": "/guides/jekyll/#dependencies"
  },"164": {
    "doc": "Install Jekyll",
    "title": "Gem Installation directory",
    "content": "echo 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrc echo 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrc source ~/.bashrc . ",
    "url": "/guides/jekyll/#gem-installation-directory",
    
    "relUrl": "/guides/jekyll/#gem-installation-directory"
  },"165": {
    "doc": "Install Jekyll",
    "title": "Install jekyll",
    "content": "gem install jekyll bundler . ",
    "url": "/guides/jekyll/#install-jekyll",
    
    "relUrl": "/guides/jekyll/#install-jekyll"
  },"166": {
    "doc": "Install Jekyll",
    "title": "Create a jekyll site",
    "content": "To generate a new site, use the command: jekyll new name-of-site. This will generate a directoryw with the name of the site in the current directory. ",
    "url": "/guides/jekyll/#create-a-jekyll-site",
    
    "relUrl": "/guides/jekyll/#create-a-jekyll-site"
  },"167": {
    "doc": "Install Jekyll",
    "title": "Install Jekyll",
    "content": " ",
    "url": "/guides/jekyll/",
    
    "relUrl": "/guides/jekyll/"
  },"168": {
    "doc": "Install NodeJS",
    "title": "How to install NodeJS and NPM in Ubuntu",
    "content": ". | Sources: . | Digital Ocean | NVM Cheat Sheet | NPX Cheat Sheet | NPM Cheat sheet | NPM VS NPX | React cheat sheet | JS Cheat Sheet | . | . This was tested on Ubuntu 22.04 and 24.04 . ",
    "url": "/guides/nodejs/#how-to-install-nodejs-and-npm-in-ubuntu",
    
    "relUrl": "/guides/nodejs/#how-to-install-nodejs-and-npm-in-ubuntu"
  },"169": {
    "doc": "Install NodeJS",
    "title": "Installation",
    "content": "The Digital Ocean article discusses multiple ways of getting this done. I prefer using node version manager because it allows me to have more than 1 version. | Run this command: | . curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh . | If it does not return an error repeat the command and pipe it to bash | . curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash &amp;&amp; source $HOME/.bashrc . | Now check which versions of node are avaialable: | . nvm list-remote . | Basic nvm commands: | . ",
    "url": "/guides/nodejs/#installation",
    
    "relUrl": "/guides/nodejs/#installation"
  },"170": {
    "doc": "Install NodeJS",
    "title": "Basic Syntax of Node Version Manager",
    "content": "| Command | Description | . | nvm ls-remote | Lists all available versions of Node | . | nvm ls | Lists all locally installed versions | . | nvm install node | Installs the newest release of Node | . | nvm install &lt;version&gt; | Installs the given release of Node | . | nvm use &lt;version&gt; | Switches and uses the given Node release | . | nvm which &lt;version&gt; | Shows path to the given Node version | . | nvm current | Shows what is the currently used Node version | . | nvm alias default &lt;version&gt; | Sets the default Node version to the given version | . | nvm unalias &lt;alias_name&gt; | Deletes the alias named | . | nvm --help | Shows NVM help documents. | . | nvm exec &lt;version&gt; node app.js | Run Node app.js with the PATH pointing to given node version | . | nvm set-colors cgYmW | Set text colors to cyan, green, bold yellow, magenta, and white | . | nvm run &lt;version&gt; app.js | Run app.js using given Node version | . | nvm install-latest-npm | Update your version of npm if you use Node installed through nvm | . | nvm root &lt;path&gt; | Set the directory where nvm should store different versions of node.js. | . | nvm proxy [url] | Set a proxy to use for downloads. Leave [url] blank to see the current proxy. Set [url] to “none” to remove the proxy. | . | nvm -v | Check if nvm is installed | . | nvm uninstall &lt;version&gt; | Un-Install a specific version | . | nvm ls | Show versions available locally | . | nvm uninstall --lts | Uninstall the latest long term support version | . ",
    "url": "/guides/nodejs/#basic-syntax-of-node-version-manager",
    
    "relUrl": "/guides/nodejs/#basic-syntax-of-node-version-manager"
  },"171": {
    "doc": "Install NodeJS",
    "title": "NPM VS NPX",
    "content": "NPM . | The npm stands for Node Package Manager and it is the default package manager for Node.js. | It is written entirely in JavaScript, developed by Isaac Z. Schlueter. | NPM manages all the packages and modules for node.js and consists of command-line client npm. Cheat cheat . | . | Command | Description | . | npm i | Alias for npm install | . | npm install | Install everything in package.json | . | npm install --production | Install everything in package.json, except devDependecies | . | npm install lodash | Install a package | . | npm install --save-dev lodash | Install as devDependency | . | npm install --save-exact lodash | Install with exact | . | npm list | Lists the installed versions of all dependencies in this software | . | npm list -g --depth 0 | Lists the installed versions of all globally installed packages | . | npm view | Lists the latest versions of all dependencies in this software | . | npm outdated | Lists only the dependencies in this software which are outdated | . | npm update | Update production packages | . | npm update --dev | Update dev packages | . | npm update -g | Update global packages | . | npm update lodash | Update a package | . | npm rm lodash | Remove package production packages | . | npm i sax | NPM package | . | npm i sax@latest | Specify tag latest | . | npm i sax@3.0.0 | Specify version 3.0.0 | . | npm i sax@\"&gt;=1 &lt;2.0\" | Specify version range | . | npm i @org/sax | Scoped NPM package | . | npm i user/repo | GitHub | . | npm i user/repo#master | GitHub | . | npm i github:user/repo | GitHub | . | npm i gitlab:user/repo | GitLab | . | npm i /path/to/repo | Absolute path | . | npm i ./archive.tgz | Tarball | . | npm i https://site.com/archive.tgz | Tarball via HTTP | . | npm version 1.2.3 | Bump the package version to 1.2.3 | . | npm version major | Bump the major package version by 1 (1.2.3 → 2.0.0) | . | npm version minor | Bump the minor package version by 1 (1.2.3 → 1.3.0) | . | npm version patch | Bump the patch package version by 1 (1.2.3 → 1.2.4) | . | npm owner add USERNAME PACKAGENAME | Add someone as an owner | . | npm deprecate PACKAGE@\"&lt; 0.2.0\" \"critical bug fixed in v0.2.0\" | Adds warning to those that install a package of old versions | . | npm update [-g] PACKAGE | update all packages, or selected packages | . | npm outdated [PACKAGE] | Check for outdated packages | . NPX: . | The npx stands for Node Package Execute and it comes with the npm, when you installed npm above 5.2.0 version then automatically npx will installed. | It is an npm package runner that can execute any package that you want from the npm registry without even installing that package. | The npx is useful during a single time use package. If you have installed npm below 5.2.0 then npx is not installed in your system. | . Cheat cheat . | Command | description | . | npx server &lt;folder-name&gt; | Create local server | . | npx pretty-quick | Format using prettier | . | npx envinfo | Show system info | . | npx envinfo --preset &lt;package-name&gt; | To show system info and show specific npm packages info | . | npx json-server &lt;json-file-link&gt; | Run a json server with .json file | . | npx sort-package-json | Sort package.json file | . | npx npm-upgrade | Check for node module updates and update them interactively | . | npx gvi &lt;package-name&gt; | Get the package version information | . | npx set-default-browser &lt;browser-name&gt; | Set any browser as default browser via cli | . | npx npkill | Delete node_modules | . | npx fx &lt;file.json&gt; | View JSON from terminal | . ",
    "url": "/guides/nodejs/#npm-vs-npx",
    
    "relUrl": "/guides/nodejs/#npm-vs-npx"
  },"172": {
    "doc": "Install NodeJS",
    "title": "Testing",
    "content": " ",
    "url": "/guides/nodejs/#testing",
    
    "relUrl": "/guides/nodejs/#testing"
  },"173": {
    "doc": "Install NodeJS",
    "title": "Install NodeJS",
    "content": " ",
    "url": "/guides/nodejs/",
    
    "relUrl": "/guides/nodejs/"
  },"174": {
    "doc": "How to install Starship Shell",
    "title": "How to install Starship Shell",
    "content": " ",
    "url": "/guides/starshipShell/",
    
    "relUrl": "/guides/starshipShell/"
  },"175": {
    "doc": "How to install Starship Shell",
    "title": "What is starship shell?",
    "content": "Is a customizable shell prompt. Learn more in the projects website: starship.rs . ",
    "url": "/guides/starshipShell/#what-is-starship-shell",
    
    "relUrl": "/guides/starshipShell/#what-is-starship-shell"
  },"176": {
    "doc": "How to install Starship Shell",
    "title": "How to install",
    "content": ". | Run this command: | . curl -sS https://starship.rs/install.sh | sh . | Open the file ~/.bashrc and add this line at the end: | . eval \"$(starship init bash)\" .bashrc is a hidden file. You will need to enable hidden files view (CTRL + H) to see this file if you are doing this graphically . | Restart the terminal or run the command: source ~/bashrc . | How to customize the shell prompt . | . Read the manual: Starship Config. If you want the same config I use, then run this command: . curl https://cis106.com/assets/starship.toml -o $HOME/.config/starship.toml . Screenshots . ",
    "url": "/guides/starshipShell/#how-to-install",
    
    "relUrl": "/guides/starshipShell/#how-to-install"
  },"177": {
    "doc": "Final Project Description",
    "title": "Final Project Description",
    "content": ". | . | Description | . | . | Requirements | . | . | Deliverable 1: Project’s Requirements . | 3.1. How am I going to grade deliverable 1? | . | . | . | Deliverable 2 Installing Ubuntu Server And Apache . | 4.1. Resources: | 4.2. How am I going to grade deliverable 2? | . | . | . | Deliverable 3 Hosting a simple website . | 5.1. Option 1: Resume | 5.2. What will you submit for option 1: | 5.3. Option 2: A simple site | 5.4. What will you submit for option 2: | 5.5. How am I going to grade deliverable 3? | . | . | . ",
    "url": "/project/Final_Project_description/",
    
    "relUrl": "/project/Final_Project_description/"
  },"178": {
    "doc": "Final Project Description",
    "title": "1. Description",
    "content": "The goal of this project is to host a simple website (1-page site) in a web server. You will be installing Ubuntu Server in a virtual machine and managing the server from another computer. That computer can be your Host Machine (Windows) or the Ubuntu Desktop virtual machine that we use in the course. The project will give you basic/initial exposure to the following technologies: . | Virtualization (VirtualBox) | Ubuntu Server | Apache | SSH | HTML | Markdown | VS Code | . The project is divided into 3 deliverables. It is done this way, so you can work slowly through the semester as you gain more knowledge working with Ubuntu Desktop. This also allows you to earn a grade as the semester progresses because the final grade is divided equally among the 3 deliverables. The final project is 20% of your final grade, however, this can change, therefore do not skip any deliverable! . Each deliverable will be submitted as a Markdown document in your GitHub Repository. You will also be required to submit a PDF version of each deliverable, just in case something happens to your GitHub Repository. No late submission will be accepted. This project is due on Dec 21st. ",
    "url": "/project/Final_Project_description/#1-description",
    
    "relUrl": "/project/Final_Project_description/#1-description"
  },"179": {
    "doc": "Final Project Description",
    "title": "2. Requirements",
    "content": ". | A virtual machine/PC where you can install Ubuntu Server. A Virtual machine will be preferred since everything in the tutorials will be done in a virtual machine. | . This is the main tutorial we will follow: . | How To Install the Apache Web Server on Ubuntu 22.04 | . Here are some sources you can use to investigate: . | What is a Web Server | What is SSH | What is Ubuntu Server | Open Source Web Servers | . ",
    "url": "/project/Final_Project_description/#2-requirements",
    
    "relUrl": "/project/Final_Project_description/#2-requirements"
  },"180": {
    "doc": "Final Project Description",
    "title": "3. Deliverable 1: Project’s Requirements",
    "content": "Old Video with more details is available here Newer and shorter video is available here Image resize tool **Example of how the deliverable should look like here . For deliverable 1, we are going to accomplish the following tasks: . | Read the tutorial. Write down every concept you don’t understand and research them. | Answer The following questions: . | What is a web server? Hardware and software side | What are some different web server applications? | What is virtualization? | What is virtualbox? | What is a virtual machine? | What is Ubuntu Server? | What is a firewall? | What is SSH? | . | . To demonstrate the completion of deliverable 1, the student needs to submit a markdown and pdf file where all the questions are answered. Here you can find an example of how the document should look like. 3.1. How am I going to grade deliverable 1? . | Your markdown file should contain: . | Proper markdown syntax | Well organized and easy to read | Images properly resized. Use a tool or HTML to resize them so that they don’t break the formatting. | A table displaying the different web server software you found with their respective license and website where we can learn more about the project. See the example. | . | . ",
    "url": "/project/Final_Project_description/#3-deliverable-1-projects-requirements",
    
    "relUrl": "/project/Final_Project_description/#3-deliverable-1-projects-requirements"
  },"181": {
    "doc": "Final Project Description",
    "title": "4. Deliverable 2 Installing Ubuntu Server And Apache",
    "content": "*Video:Deliverable 2 Latest Video 0-100! . 4.1. Resources: . | Apache Commands You Should know | IP Command With Examples | UFW Essentials | How To Troubleshoot Common Apache Errors | . Follow this guide to install Ubuntu Server and Apache. After completing the installation, answer the following questions. You must type your answer and take screenshots of the commands and their output. | What are the server hardware specifications (virtual machine settings)? Take a screenshot - don’t type it! | What is Ubuntu server log in screen? Take screenshot - do not type it! | What is the IP address of your Ubuntu Server Virtual Machine? | How do you enable the Ubuntu Firewall? | How do you check if the Ubuntu Firewall is running? | How do you disable the Ubuntu Firewall? | How do you add Apache to the Firewall? | What is the command you used to install Apache? | What is the command you use to check if Apache is running? | What is the command you use to stop Apache? | What is the command you use to restart Apache? | What is the command used to test Apache configuration? | What is the command used to check the installed version of Apache? | . For every unique command (ip, ufw, systemctl, etc…) that answers the question you must provide: . | Definition of the command | Explain how the command works (syntax) | Some examples (2 or 3). Use inline code formatting or code block formatting when appropriate. | Screenshot of the examples. Make sure the screenshots are properly formatted. Not too big and not too small. Use either a resizing tool or HTML. | . Reviewing logs is an essential part of system administration; read the tutorial “How To Troubleshoot Common Apache Errors”. After you have finished reading the tutorial, answer the following questions: . | What are the most common commands to troubleshoot Apache errors? Provide a brief description of each command. | Which are the common Apache Log Files, and what are they used for? Provide examples and screenshots of where they are located in you server, you can use any of he following commands: cat,head,tail | . To demonstrate the completion of deliverable 2, the student must submit a markdown and pdf file where all the questions are answered. Here you can find an example of how the document should look like. 4.2. How am I going to grade deliverable 2? . | Your markdown file should contain: . | Proper markdown syntax | Well organized and easy to read | Images properly resized. Use a tool or HTML to resize them so that they don’t break the formatting. | Screenshot of your web server virtual machine settings (hardware) | Screenshot of the first screen that shows up when you log in to your server | Screenshot of the different apache log files | . | . ",
    "url": "/project/Final_Project_description/#4-deliverable-2-installing-ubuntu-server-and-apache",
    
    "relUrl": "/project/Final_Project_description/#4-deliverable-2-installing-ubuntu-server-and-apache"
  },"182": {
    "doc": "Final Project Description",
    "title": "5. Deliverable 3 Hosting a simple website",
    "content": "Video:Deliverable 3 Latest Video 0-100! . For this deliverable, you have 2 options; Pick one! . 5.1. Option 1: Resume . | Create a simple resume of yourself. Here is an example of the kind of information to include: . | http://resume-template.joelglovier.com/ | . | You do not need to include a photo of yourself, instead use a stock photo . | You can find stock photos here: https://www.pexels.com/ | . | Once you have created your markdown file, convert the file to HTML. | Compress all the files into a single archive so that they are easier to move. | Send the files to the server. | Once you have transferred the archive to the server, decompress the archive and move the files to their respective folder so that they can be served by the web server. | Open your website in the browser of your host computer or Ubuntu desktop computer and take a screenshot of the browser. | . 5.2. What will you submit for option 1: . | To demonstrate the completion of this deliverable, submit the following: . | The URL to the GitHub repository in the final project folder where I can find all the files you used for creating the site including the markdown file, HTML file and the images. | The screenshot of your website running. See the example here. | I need to see the entire browser window with the ip address of your server in the URL bar showing your website running! | . | . 5.3. Option 2: A simple site . | Create a markdown file that contains instructions on how to set up a Web Server in Ubuntu Server. Include screenshots where you find them necessary. Make sure to explain each command that is necessary. Your Deliverable must contain the following: . | Introduction (Keep it simple) | Basic terminology that the reader must know | Step-by-step instructions | Step 1: Installing VirtualBox | Step 2: Installing Ubuntu Server | Step 3: Installing Apache | Step 4: Setting up the firewall | . | After creating the markdown file, convert the markdown file to PDF. | Rename the PDF to index.html | Compress all the files, including images, in an archive and transfer the file to your web server | Decompress the archive in your web server and move all the files to their proper destination. | Open your site in the host computer or Ubuntu desktop computer and take a screenshot. | . 5.4. What will you submit for option 2: . | To demonstrate the completion of this deliverable, submit the following: . | The URL to the GitHub repository in the final project folder where I can find all the files you used for creating the site including the markdown file, HTML file and the images. | The screenshot of your website running | . | I need to see the entire browser window with the ip address of your server in the URL bar showing your website running! | . 5.5. How am I going to grade deliverable 3? . | Your github repository deliverable 3 directory/folder must contain: . | All the files used for making the markdown and html file | A screenshot of our html file running on your web server. See example here | . | . ",
    "url": "/project/Final_Project_description/#5-deliverable-3-hosting-a-simple-website",
    
    "relUrl": "/project/Final_Project_description/#5-deliverable-3-hosting-a-simple-website"
  },"183": {
    "doc": "Final Project Alternative - Emulation Machine with Batocera and Raspberry PI",
    "title": "Final Project Alternative - Emulation Machine with Batocera and Raspberry PI",
    "content": " ",
    "url": "/project/Final_project_batocera/",
    
    "relUrl": "/project/Final_project_batocera/"
  },"184": {
    "doc": "Final Project Alternative - Emulation Machine with Batocera and Raspberry PI",
    "title": "Deliverable 1",
    "content": "Investigate the following concepts and create a markdown file explain each concept: . | What is a Raspberry Pi? . | Include images and a table describing each model | Include a small section explaining the origins of the Raspberry Pi | . | What is Batocera? . | Investigate other alternatives to Batocera | . | What is emulation? . | Is Emulation legal in the United States? Do you think Emulation should be legal or illegal? | . | What is SSH? . | Include command examples. | How do I use ssh to connect to my virtual machine from Windows? | . | IP Address . | IPV4 | IPV6 | . | What is a ROM? *(in the context of gaming) | . What to submit for deliverable 1 . | In your cis106 repository/directory/folder create a new directory called “FinalProject” | Inside FinalProject create a new directory called deliverable1 | Inside deliverable1, create a file called deliverable1.md | deliverable1.md must contain all the answers to the questions above including: . | Proper markdown syntax | Images | Tables | Links | . | Convert your markdown file to pdf | Push all your changes to github and in blackboard submit the following: . | The URL of deliverable1.md | The PDF file deliverable1.pdf | . | . ",
    "url": "/project/Final_project_batocera/#deliverable-1",
    
    "relUrl": "/project/Final_project_batocera/#deliverable-1"
  },"185": {
    "doc": "Final Project Alternative - Emulation Machine with Batocera and Raspberry PI",
    "title": "Deliverable 2",
    "content": "For deliverable 2, you will install Batocera in the Raspberry Pi and configure it. There are free games that you can download directly from Batocera. Those games are homebrews. Please do not include any Pirated Roms However, if you can find any free to play games that are legally available, you may use them. After you have completed the installation and tested some games, create a markdown file that will answer the following questions: . | What are the steps to install Batocera in a Raspberry PI . | Start by including a list of all the necessary hardware and why you need it. | Try to include as many screenshots as needed for every step | Do not skip any step. Pretend that you are writing this guide for someone who is not very technical | . | How to use Batocera? . | How to start a game | How to connect Batocera to the internet | How to update Batocera | How to scrape a game? (Research what scrapping means) | How to start a game | How to stop a game | How to use save states when playing? | . | . What to submit for deliverable 2 . | In your cis106 repository/directory/folder create a new directory called “FinalProject” | Inside FinalProject create a new directory called deliverable2 | Inside deliverable2, create a file called deliverable2.md | deliverable1.md must contain all the answers to the questions above including: . | Proper markdown syntax | Images | Tables | Links | . | Convert your markdown file to pdf | Push all your changes to github and in blackboard submit the following: . | The URL of deliverable2.md | The PDF file deliverable2.pdf | . | . ",
    "url": "/project/Final_project_batocera/#deliverable-2",
    
    "relUrl": "/project/Final_project_batocera/#deliverable-2"
  },"186": {
    "doc": "Final Project Alternative - Emulation Machine with Batocera and Raspberry PI",
    "title": "Deliverable 3",
    "content": "Romhacking.net contains some homewbrews that you can download. You can also find roms in myabandomware.com however I am uncertain of their legality therefore use at your own risk. This site contains other homebrews a well. Your goal for this final deliverable is to explain how to transfer games to your raspberry pi. There is more than one way to do so, for example, you can connect the sd card to your pc and copy the roms over their respective directory. You can also transfer the games over the web or over SSH connection. Your goal is to research each way of transferring games and document them here. After you have learn how to do it, create a markdown document explaining each way of transferring games and then providing step by step instructions. Do not include instructions on how to download roms. We are assuming that the reader of your guide already has roms that they legally own. What to submit for deliverable 3 . | In your cis106 repository/directory/folder create a new directory called “FinalProject” | Inside FinalProject create a new directory called deliverable3 | Inside deliverable3, create a file called deliverable3.md | deliverable1.md must contain all the answers to the questions above including: . | Proper markdown syntax | Images | Tables | Links | . | Convert your markdown file to pdf | Push all your changes to github and in blackboard submit the following: . | The URL of deliverable3.md | The PDF file deliverable3.pdf | . | . ",
    "url": "/project/Final_project_batocera/#deliverable-3",
    
    "relUrl": "/project/Final_project_batocera/#deliverable-3"
  },"187": {
    "doc": "Final Project Deliverable 1",
    "title": "Final Project Deliverable 1",
    "content": "Old Video with more details is available here Newer and shorter video is available here Image resize tool **Example of how the deliverable should look like here . Note: This is the hands on tutorial. Read the project description to know what to submit. For deliverable 1, we are going to accomplish the following tasks: . | Read the tutorial. Write down every concept you don’t understand and research them. | Answer The following questions: . | What is a web server? Hardware and software side | What are some different web server applications? | What is virtualization? | What is virtualbox? | What is a virtual machine? | What is Ubuntu Server? | What is a firewall? | What is SSH? | . | . Note: This is the hands on tutorial. Read the project description to know what to submit. ",
    "url": "/project/Final_project_deliverable1/",
    
    "relUrl": "/project/Final_project_deliverable1/"
  },"188": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Final Project Deliverable 2 Port Forwarding",
    "content": "Note: This is the hands on tutorial. Read the project description to know what to submit. ",
    "url": "/project/Final_project_deliverable2_port_forwarding/",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/"
  },"189": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 1 Virtual Machine",
    "content": "Create a virtual machine that meets the following specifications: . | CPU: 1 Core | RAM: 1 GB | HDD: 10 GB | . These are the recommended system requirements for Ubuntu Server 22.04. ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-1-virtual-machine",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-1-virtual-machine"
  },"190": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 2 Install Ubuntu Server",
    "content": "Step 1 . Step 2 . Step 3 . Select Update to the new installer. This will update the Ubuntu installer and proceed with the installation. Step 4 . This step will automatically select the language layout of your keyboard. If for whatever reason it is different than what your physical keyboard has, then manually adjust it. Step 5 . Choose the default Ubuntu Server installation. We will need some of the repositories in the default installation. Step 6 . Since we are installing Ubuntu in a virtual machine that at the moment is configured to have a NAT network interface card, as long as your host PC has internet connection, you should automatically get an IP address. If you don’t, something is wrong with your VM, Host Machine, or Internet Connection. Note: If you are doing this project in the school’s network, be aware that the school’s routers are configured to block Bridged Ethernet adapters. Step 7 . Leave this part empty as we are not using a proxy. Step 8 . We will use the default mirror so there is no need to change this . Step 9 . This step is to format our disk. Here we will select the entire disk. To move around here use either the arrow keys or the tab key. Step 10 . This step is just to let you know the changes that will be made to the server’s virtual hard drive. Step 11 . Here you will enter the information about your computer. Write this information down because you will needed it later. Step 12 . It is a good idea to install ssh now as we will use it later on. Do not import SSH keys. We will do that manually later. Step 13 . Do not select these services. We won’t be using them. Step 14 . This is the installation process. Once it is done it will start updating the system. Once the update is done, it will ask you to reboot. Step 15 . Step 16 . Here Just press enter. Virtualbox will unmount the installation disk for you . ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-2-install-ubuntu-server",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-2-install-ubuntu-server"
  },"191": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 3 Install Apache",
    "content": "First, login to the server. You will need to type your username and password. Here is an example: Notice that the password is hidden while typing just like when you are typing it in the terminal emulator. Be aware that during the upgrade, Ubuntu will ask you to restart some services. Apache is available in Ubuntu’s default repositories. However, before we can start installing new packages, let’s update the system: . sudo apt update; sudo apt upgrade -y . To install Apache use: . sudo apt install apache2 -y . Be aware that here you will also need to restart some services here. ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-3-install-apache",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-3-install-apache"
  },"192": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 4 Setup SSH",
    "content": "Before Setup . Before we can setup SSH, we need to enable the firewall. Use this command: . sudo ufw enable . Now lets configure ufw to allow Apache and SSH traffic: . sudo ufw allow 'Apache' sudo ufw allow 'OpenSSH' . Now check the status of the firewall: . sudo ufw status . Now lets check the status of Apache and SSH to make sure they are running: . systemctl status apache2 --no-pager systemctl status ssh --no-pager . Both commands should return active (running) if they do not, restart the services with the command: . sudo systemctl restart apache2 ssh . Setup Port forwarding . | Turn off the server virtual machine if it is on. | Go to the network virtual machine configuration for the server. There add port forwarding to the NAT configuration. You will need to forward port 22 to 2222 and port 80 t0 8080. Here is a screenshot: | Turn on the server. Make sure that the ssh server program is installed in the server virtual machine: sudo apt install openssh-server -y . | Enable and start ssh in the server: sudo systemctl enable ssh; sudo systemctl start ssh . | Test the connection by logging in to the server from the client. In this case, your client is your Host computer terminal application (in Windows, it is the CMD or powershell) | . ssh -p 2222 username_of_the_server@127.0.0.1 . | Read and answer the questions and you will connect sucessfully. | . ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-4-setup-ssh",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-4-setup-ssh"
  },"193": {
    "doc": "Final Project Deliverable 2 Port Forwarding",
    "title": "Part 5 Setup virtual hosts",
    "content": "Virtual host allows us to serve more than one website in a single web server. By default, Apache has one server block enabled. This server block is served from the directory: /var/www/html. For a single website, all the files are placed within this directory. When we setup virtual hosts, each site has its own directory. The recommendation is to leave the default html directory and for each site a new directory inside /var/www. In this project, we will have one virtual site called myresume. You are welcome to use a different name just remember to adjust every command where the word myresume is reference for your preferred website domain name. Follow These Steps . | Create the directory for myresume as follows: sudo mkdir /var/www/myresume | Modify the ownership of myresume so that it is now owned by your user instead of root sudo chown -R $USER:$USER /var/www/myresume | Now let’s change the file permission so that the owner can read, write, and execute the files while granting only read and execute permissions to groups and others: sudo chmod -R 755 /var/www/myresume | Now lets create a simple html document to be served from our new virtual host. Create a document with the nano text editor called index.html in the /var/www/myresume/ directory: sudo nano /var/www/myresume/index.html. | Once the new document opens, type the following text: | . &lt;html&gt; &lt;head&gt; &lt;title&gt;My Resume Website&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;This is a sample document!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | . NOTE: If you don’t want to use Nano, you can also do this in a single command . sudo echo \"&lt;html&gt;&lt;head&gt;&lt;title&gt;My Resume Website&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;This is a sample document!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\" &gt; /var/www/myresume.index.html . | Now we need to create a virtual host file so that this new content can be served. The default configuration is located in /etc/apache2/sites-available/000-default.conf However, we do not need to touch this file, we can instead create a new one as it is best practice. To create a new config file, we are going to use nano again: sudo nano /etc/apache2/sites-available/myresume.conf | Add the following text to the domain config file: | . &lt;VirtualHost *:80&gt; ServerAdmin webmaster@localhost ServerName myresume ServerAlias www.myresume DocumentRoot /var/www/myresume ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &lt;/VirtualHost&gt; . | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | Now enable the site with the following command: sudo a2ensite myresume.conf | Now lets disable the default domain:sudo a2dissite 000-default.conf | Before we can refresh the configuration, we need to add a configuration line to the apache2.conf file. Open the file in nano:sudo nano /etc/apache2/apache2.conf | Add the following line at the end of the file:ServerName 127.0.0.1 | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | Now you can test the configuration for errors:sudo apache2ctl configtest | The output of the command should look like this: | . Syntax OK . | If there are no errors, restart Apache to apply the changes:sudo systemctl restart apache2 | Now, if you open a web browser in your host computer and go the URL: http://localhost:8080/ your index.html document should load. | . Note: This is the hands on tutorial. Read the project description to know what to submit. ",
    "url": "/project/Final_project_deliverable2_port_forwarding/#part-5-setup-virtual-hosts",
    
    "relUrl": "/project/Final_project_deliverable2_port_forwarding/#part-5-setup-virtual-hosts"
  },"194": {
    "doc": "Final Project Deliverable 2",
    "title": "Final Project Deliverable 2",
    "content": "Video:Deliverable 2 Latest Video 0-100! . Note: This is the hands on tutorial. Read the project description to know what to submit. ",
    "url": "/project/Final_project_deliverable2_web_server/",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/"
  },"195": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 1 Virtual Machine",
    "content": "Create a virtual machine that meets the following specifications: . | CPU: 1 Core | RAM: 1 GB | HDD: 10 GB | . These are the recommended system requirements for Ubuntu Server 22.04. ",
    "url": "/project/Final_project_deliverable2_web_server/#part-1-virtual-machine",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-1-virtual-machine"
  },"196": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 2 Install Ubuntu Server",
    "content": "Step 1 . Step 2 . Step 3 . Select Update to the new installer. This will update the Ubuntu installer and proceed with the installation. Step 4 . This step will automatically select the language layout of your keyboard. If for whatever reason it is different than what your physical keyboard has, then manually adjust it. Step 5 . Choose the default Ubuntu Server installation. We will need some of the repositories in the default installation. Step 6 . Since we are installing Ubuntu in a virtual machine that at the moment is configured to have a NAT network interface card, as long as your host PC has internet connection, you should automatically get an IP address. If you don’t, something is wrong with your VM, Host Machine, or Internet Connection. Note: If you are doing this project in the school’s network, be aware that the school’s routers are configured to block Bridged Ethernet adapters. Step 7 . Leave this part empty as we are not using a proxy. Step 8 . We will use the default mirror so there is no need to change this . Step 9 . This step is to format our disk. Here we will select the entire disk. To move around here use either the arrow keys or the tab key. Step 10 . This step is just to let you know the changes that will be made to the server’s virtual hard drive. Step 11 . Here you will enter the information about your computer. Write this information down because you will needed it later. Step 12 . It is a good idea to install ssh now as we will use it later on. Do not import SSH keys. We will do that manually later. Step 13 . Do not select these services. We won’t be using them. Step 14 . This is the installation process. Once it is done it will start updating the system. Once the update is done, it will ask you to reboot. Step 15 . Step 16 . Here Just press enter. Virtualbox will unmount the installation disk for you . ",
    "url": "/project/Final_project_deliverable2_web_server/#part-2-install-ubuntu-server",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-2-install-ubuntu-server"
  },"197": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 3 Install Apache",
    "content": "First, login to the server. You will need to type your username and password. Here is an example: Notice that the password is hidden while typing just like when you are typing it in the terminal emulator. Be aware that during the upgrade, Ubuntu will ask you to restart some services. Apache is available in Ubuntu’s default repositories. However, before we can start installing new packages, let’s update the system: . sudo apt update; sudo apt upgrade -y . To install Apache use: . sudo apt install apache2 -y . Be aware that here you will also need to restart some services here. ",
    "url": "/project/Final_project_deliverable2_web_server/#part-3-install-apache",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-3-install-apache"
  },"198": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 4 Setup SSH",
    "content": "Before Setup . Before we can setup SSH, we need to enable the firewall. Use this command: . sudo ufw enable . Now lets configure ufw to allow Apache and SSH traffic: . sudo ufw allow 'Apache' sudo ufw allow 'OpenSSH' . Now check the status of the firewall: . sudo ufw status . Now lets check the status of Apache and SSH to make sure they are running: . systemctl status apache2 --no-pager systemctl status ssh --no-pager . Both commands should return active (running) if they do not, restart the services with the command: . sudo systemctl restart apache2 ssh . Change the Network Adapter . Follow these steps: . | Turn off the server virtual machine using this command: sudo shutdown now | Change the server network adapter configuration from NAT to Bridge. However, there is a chance that using a bridge adapter won’t work for you. Some IDS (Instruction Detection Systems) and smart routers may prevent you from getting an Ip Address if your Network Adapter is bridge. In this case, you need to use port forwarding in your virtual machine. Here is an example: . | . Connect with SSH . Follow these steps: . | Make sure SSH is installed in both the client and the server: sudo apt install openssh -y | In the server, the SSH service must be already running, if it is not running, use this command to enable it and start it: sudo systemctl enable ssh; sudo systemctl start ssh | You will need to get the IP address of the server. Use this command to get the IP address: hostname -I. Additionally, you can setup a static IP address in your server. Here is a guide on how to do it. If you are doing this project in your laptop, I advise to stay away from setting up static IP addresses. | On the client computer use this command: | If you are using port forwarding, your command would be:ssh -p 2222 username@127.0.0.1 | . Setup private and public key authentication with or without password (optional) . | On the server, configure the firewall to accept ssh connections. sudo ufw allow ssh sudo ufw enable sudo ufw status . | Now we need to generate an ssh key in our client computer: In your client machine type:ssh-keygen Now you can type this command to copy your ssh key to the server:ssh-copy-id -i .ssh/id_rsa.pub webmaster@server-ip-address . | if you use port forwarding your command will be:ssh-copy-id -p 2222 username@127.0.0.1 | Now you can connect to your server without having to remember the password. | . ",
    "url": "/project/Final_project_deliverable2_web_server/#part-4-setup-ssh",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-4-setup-ssh"
  },"199": {
    "doc": "Final Project Deliverable 2",
    "title": "Part 5 Setup virtual hosts",
    "content": "Virtual host allows us to serve more than one website in a single web server. By default, Apache has one server block enabled. This server block is served from the directory: /var/www/html. For a single website, all the files are placed within this directory. When we setup virtual hosts, each site has its own directory. The recommendation is to leave the default html directory and for each site a new directory inside /var/www. In this project, we will have one virtual site called mywebsite. You are welcome to use a different name just remember to adjust every command where the word mywebsite is reference for your preferred website domain name. Follow These Steps . | Create the directory for mywebsite as follows: sudo mkdir /var/www/mywebsite | Modify the ownership of mywebsite so that it is now owned by your user instead of root sudo chown -R $USER:$USER /var/www/mywebsite | Now let’s change the file permission so that the owner can read, write, and execute the files while granting only read and execute permissions to groups and others: sudo chmod -R 755 /var/www/mywebsite | Now lets create a simple html document to be served from our new virtual host. Create a document with the nano text editor called index.html in the /var/www/mywebsite/ directory: sudo nano /var/www/mywebsite/index.html. | Once the new document opens, type the following text: | . &lt;html&gt; &lt;head&gt; &lt;title&gt;My First Website&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;This is a sample document!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | . NOTE: If you don’t want to use Nano, you can also do this in a single command . sudo curl https://cis106.com/assets/basic.html -o /var/www/mywebsite/index.html . | Now we need to create a virtual host file so that this new content can be served. The default configuration is located in /etc/apache2/sites-available/000-default.conf However, we do not need to touch this file, we can instead create a new one as it is best practice. To create a new config file, we are going to use nano again: sudo nano /etc/apache2/sites-available/mywebsite.conf | Add the following text to the domain config file: | . &lt;VirtualHost *:80&gt; ServerAdmin webmaster@localhost ServerName mywebsite ServerAlias www.mywebsite DocumentRoot /var/www/mywebsite ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined &lt;/VirtualHost&gt; . | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | Now enable the site with the following command: sudo a2ensite mywebsite.conf | Now lets disable the default domain:sudo a2dissite 000-default.conf | Before we can refresh the configuration, we need to add a configuration line to the apache2.conf file. Open the file in nano:sudo nano /etc/apache2/apache2.conf | Add the following line at the end of the file:ServerName 127.0.0.1 | Save and close the file when you are finished. You can do this by pressing CTRL + X, then Y and ENTER. | Now you can test the configuration for errors:sudo apache2ctl configtest | The output of the command should look like this: | . Syntax OK . | If there are no errors, restart Apache to apply the changes:sudo systemctl restart apache2 | Now, if you open a web browser in your host computer and go the URL: http://ip.address.of.your.server/ your index.html document should load. | . Note: This is the hands on tutorial. Read the project description to know what to submit. ",
    "url": "/project/Final_project_deliverable2_web_server/#part-5-setup-virtual-hosts",
    
    "relUrl": "/project/Final_project_deliverable2_web_server/#part-5-setup-virtual-hosts"
  },"200": {
    "doc": "Final Project Deliverable 3",
    "title": "Final Project Deliverable 3",
    "content": "Video:Deliverable 3 Latest Video 0-100! . Note: This is the hands on tutorial. Read the project description to know what to submit. For this deliverable, you have 2 options; Pick one! . Option 1: Resume . | Create a simple resume of yourself. Here is an example of the kind of information to include: . | http://resume-template.joelglovier.com/ | . | You do not need to include a photo of yourself, instead use a stock photo . | You can find stock photos here: https://www.pexels.com/ | . | Once you have created your markdown file, convert the file to HTML. | Compress all the files into a single archive so that they are easier to move. | Send the files to the server. | Once you have transferred the archive to the server, decompress the archive and move the files to their respective folder so that they can be served by the web server. | Open your website in the browser of your host computer or Ubuntu desktop computer and take a screenshot of the browser. | To demonstrate the completion of this deliverable, submit the following: . | The URL to the GitHub repository in the final project folder where I can find all the files you used for creating the site including the markdown file, HTML file and the images. | The screenshot of your website running | . | . Option 2: A simple site . | Create a markdown file that contains instructions on how to set up a Web Server in Ubuntu Server. Include screenshots where you find them necessary. Make sure to explain each command that is necessary. Your Deliverable must contain the following: . | Introduction (Keep it simple) | Basic terminology that the reader must know | Step-by-step instructions | Step 1: Installing VirtualBox | Step 2: Installing Ubuntu Server | Step 3: Installing Apache | Step 4: Setting up the firewall | . | After creating the markdown file, convert the markdown file to html. | Rename the html file to index.html | Compress all the files, including images, in an archive and transfer the file to your web server | Decompress the archive in your web server and move all the files to their proper destination. | Open your site in the host computer or Ubuntu desktop computer and take a screenshot. | To demonstrate the completion of this deliverable, submit the following: . | The URL to the GitHub repository in the final project folder where I can find all the files you used for creating the site including the markdown file, HTML file and the images. | The screenshot of your website running | . | . Note: This is the hands on tutorial. Read the project description to know what to submit. ",
    "url": "/project/Final_project_deliverable3/",
    
    "relUrl": "/project/Final_project_deliverable3/"
  },"201": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Shell Scripting Extra practice 1",
    "content": " ",
    "url": "/extra/Shell_scripting_Basics/",
    
    "relUrl": "/extra/Shell_scripting_Basics/"
  },"202": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Goal",
    "content": "This extra credit is just to practice basic shell scripting. The main goal is to get comfortable doing the following: . | Creating and executing a basic script | Using the man command to get help | . We will use the following commands only: . | echo: to display text | date: to manipulate dates | df: disk space usage | free: memory usage | uname: basic system information | clear: clear screen | . ",
    "url": "/extra/Shell_scripting_Basics/#goal",
    
    "relUrl": "/extra/Shell_scripting_Basics/#goal"
  },"203": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "How to write and execute a basic script step by step",
    "content": "1. The tools: . | To write the script you will need a text editor. These text editors are easy to use: . | Gnome Text Editor: Ubuntu’s default text editor | Geany: More advanced and feature rich but still easy enough for beginners | . | There are a tone more. A simple google search will tell you so! However the text editor you choose is irrelevant so just pick one and move on. | In this guide I will be using Gnome Text and Geany. | A terminal emulator to run the script. Any terminal emulator will work but here I will be using Tilix. | . 2. Write the script . | Open your text editor | The first line of code is the shell declaration or shebang: #!/bin/bash This line will tell the shell (bash) who will be running the script. This line is important because without it, all the commands in the script will be run by the current shell. | Save your file with the file extension .sh. The file extension is not mandatory but it is good practice. | In this guide, we will be placing all our scripts in a folder/directory called scripts in your home directory. This will make it easier to find our scripts. | . 3. Execute the script . | Open your terminal emulator. | The most basic way of running a script is using this formula: . | shell + path/to/script/ | . | For example, we know that our shell is bash and we placed our script in ~/scripts/ therefore the command to execute our script will be: . | bash ~/scripts/hello.sh | . | This part of the path: ~ is a shorthand for /home/$USER which is the current’s user home directory. If you want to learn more about this read read the presentation The Linux Filesystem or the article The Linux FS. For now, every script will be placed in ~/scripts/ so you should not worry about it. | . 4. Add more code to the script . | Notice that when you ran the script, nothing happened. That is because there is nothing to do in the script. | Let’s write some basic commands in the script: . | Use echo to print/display a line of text: . | echo \"hello world\" | . | . | Save and run the script. Notice that the line “hello world” is displayed in the terminal. | . ",
    "url": "/extra/Shell_scripting_Basics/#how-to-write-and-execute-a-basic-script-step-by-step",
    
    "relUrl": "/extra/Shell_scripting_Basics/#how-to-write-and-execute-a-basic-script-step-by-step"
  },"204": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Let’s Practice!",
    "content": "You should now be comfortable writing and executing a basic script. However, before we practice, let’s make our environment more comfortable. Customize Gnome Text Editor: . | Open the Text Editor Preferences: . | Choose a theme you like | Enable custom font and increase the size to a size you are more comfortable with | Enable “Highlight Current Line” | Enable “Display Overview Map” | Disable “Restore Session” | . | In the Options menu: . | Enable line numbers | Change the “Spaces per tab” to 4 | Disable “Check Spelling” | . | . Now, let’s place the terminal emulator and text editor side by side. Use the Windows/Super Key + Right Arrow to snap one window to the right then select the terminal emulator to snap it to the left. This will allow us to work more efficiently . ",
    "url": "/extra/Shell_scripting_Basics/#lets-practice",
    
    "relUrl": "/extra/Shell_scripting_Basics/#lets-practice"
  },"205": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Practice 1: Learning more about echo",
    "content": "The echo command is used to display/print text to the screen. The formula for the command is: . echo + option + \"String you want to display\" . Where option can be one of the followings: . | -n: Do not output a trailing new line. | -e: Enable interpretation of backslash escapes. See man echo for a list of backslash escapes | -E: disable interpretation of backslash escapes (this is the default behavior) | . In a terminal emulator practice the echo command. You may need to open the man page of echo for reference. To practice echo, complete the following tasks: . | Display a line of text. | Display a line of text suppressing the trailing new line | Display a line of text with a tab at the beginning of the line | Display multiple lines of text in a single echo command | Display multiple lines of text in a single command including horizontal and vertical tabs | . Show Solution . ",
    "url": "/extra/Shell_scripting_Basics/#practice-1-learning-more-about-echo",
    
    "relUrl": "/extra/Shell_scripting_Basics/#practice-1-learning-more-about-echo"
  },"206": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Practice 2: Working with more than just echo",
    "content": "| NOTE: At the top of this guide, you have a short description of some basic commands. When needed, use the man command to read the man page of any of those commands | . | Create a shell script named systemInfo.sh and save it in the scripts directory/folder. | This script should output the following information about your system: . | Current date in UTC | Disk space usage in human readable format | Memory/RAM usage in human readable format | Network node hostname (machines name) | Type of processor and type of operating system | . | Make sure that each part is described before it is printed to the screen. This is an example output of your program: | . See Example . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the output of your script (terminal) . ",
    "url": "/extra/Shell_scripting_Basics/#practice-2-working-with-more-than-just-echo",
    
    "relUrl": "/extra/Shell_scripting_Basics/#practice-2-working-with-more-than-just-echo"
  },"207": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "Practice 3: More on Echo!",
    "content": "In this practice, use what you have learned about echo to better the script’s output. | Make a copy of systemInfo.sh called systemInfo2.sh | Your goal is to use echo to make the information more presentable. You may need to move some parts around. | Here are some tips: . | Echo can insert new empty lines | Echo can insert tabs within text | Echo can suppress the new line putting the output of echo in the same line as the next command | . | You should review the man page of echo and practice some of those commands. | This is how the output of your script should look like: | . See Example . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the output of your script (terminal) . ",
    "url": "/extra/Shell_scripting_Basics/#practice-3-more-on-echo",
    
    "relUrl": "/extra/Shell_scripting_Basics/#practice-3-more-on-echo"
  },"208": {
    "doc": "Shell Scripting Extra practice 1",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called “ExtraCredit” (One word no spaces in file names pleases!) | Inside “ExtraCredit”, create another directory called “extra2” | Open your cis106 directory/local repository in VS Code | Inside “extra2” create a markdown file called “extra2.md” | Add all the screenshots to “extra2.md” using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 2: Shell Scripting Extra practice 1 | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 1\" | git push | . | In blackboard submit the following: . | The URL of extra2.md | The PDF file extra2.pdf | . | . ",
    "url": "/extra/Shell_scripting_Basics/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/Shell_scripting_Basics/#what-will-you-submit-for-extra-credit"
  },"209": {
    "doc": "Bash Variables",
    "title": "Bash Variables",
    "content": " ",
    "url": "/extra/bash_variables/",
    
    "relUrl": "/extra/bash_variables/"
  },"210": {
    "doc": "Bash Variables",
    "title": "What is a variable?",
    "content": ". | A variable is a placeholder for data that can be reused and changed later on in your program. In general, bash uses 2 types of variables: . | Environment variables . | These are used by the shell to story system and user session information. | To see a list of environment variables, use the command env | . | User defined variables . | these are created by the user and exist only in the shell script and any subshell that runs said script | When creating variables, follow these rules: . | variable names cannot start with a number | variable names can be up to 20 characters long | variables are case sensitive (name is not the same thing as NAME) | values are assigned using an = sign and no spaces (name=”bob”) | Bash stores all values as string but you should still use “” . | Bash is technically untyped, which means that there are no other data types other than string. | There are exceptions to this rule but we should leave those for another lecture | . | . | . | . | . What is string? . A string is a type of data in programming that represents text. It is made up of letters, numbers, symbols, or spaces and is usually enclosed in quotes (\" or '). Strings are not the only types of data used in programming. You also have numbers which can be floating point or integers. You also have boolean which is only true or false. There is also arrays which are a list of values. Depending on the programming language, you will also encounter other types of data. So why do we say that bash is untyped? . We say that Bash is untyped (or dynamically typed with weak typing) because it does not have explicit data types like other programming languages. Instead, bash defaults everything to string. This means that the following variables are all strings: . #!/bin/bash name=\"bob\" age=35 student=true height=5.9 . Does that mean that I cannot do math in bash? . NO! Bash can do math but values need to be explicitly treated as numbers. One way is to user arithmetic expansion: . #!/bin/bash number1=2 number2=2 sum=$(( number1 + number2 )) echo \"The sum of $number1 and $number2 is: $sum\" . We will cover math in bash in a later lecture. ",
    "url": "/extra/bash_variables/#what-is-a-variable",
    
    "relUrl": "/extra/bash_variables/#what-is-a-variable"
  },"211": {
    "doc": "Bash Variables",
    "title": "How do I use a variable?",
    "content": "Regardless of the type (environment or user defined), to use a variable, you must first put a $ and then the variable name. That is call “accessing a variable”. Here is an example: . #!/bin/bash # Using an environment variable: echo \"Current user is $USER\" # Using a user defined variable: name=\"bob\" echo \"Their name is $name\" . ",
    "url": "/extra/bash_variables/#how-do-i-use-a-variable",
    
    "relUrl": "/extra/bash_variables/#how-do-i-use-a-variable"
  },"212": {
    "doc": "Bash Variables",
    "title": "Practice 1: Environment Variables",
    "content": "Practice env or printenv command first . | Open a terminal emulator and run the env command to display all the environment variables. You can also use the printenv command. | Using the echo command display the content of the following variables: . | USER, HOME, SHELL, PWD | . | There are some environment variables that become available as you start using your system. For example OLDPWD which stores the absolute path of the previous working directory. Change your current working directory to ~/Downloads then display the content of the variable OLDPWD | . Scripting part . | Create a shell script that will display the following output: | . | Notice that the script is using tabs at the beginning of every line and before the variables. | Save and execute your script. | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the output of your script (terminal) . ",
    "url": "/extra/bash_variables/#practice-1-environment-variables",
    
    "relUrl": "/extra/bash_variables/#practice-1-environment-variables"
  },"213": {
    "doc": "Bash Variables",
    "title": "Practice 2: Using Environment Variables part 2",
    "content": "g . | Create a shell script that uses the HOME, USER, PWD and OLDPWD environment variables to produce the following output | . | Tips to write the script | . ",
    "url": "/extra/bash_variables/#practice-2-using-environment-variables-part-2",
    
    "relUrl": "/extra/bash_variables/#practice-2-using-environment-variables-part-2"
  },"214": {
    "doc": "Bash Variables",
    "title": "Practice 3: User defined variables",
    "content": " ",
    "url": "/extra/bash_variables/#practice-3-user-defined-variables",
    
    "relUrl": "/extra/bash_variables/#practice-3-user-defined-variables"
  },"215": {
    "doc": "Bash Variables",
    "title": "Practice 4: Bring it all together",
    "content": " ",
    "url": "/extra/bash_variables/#practice-4-bring-it-all-together",
    
    "relUrl": "/extra/bash_variables/#practice-4-bring-it-all-together"
  },"216": {
    "doc": "Bash Variables",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called “ExtraCredit” (One word no spaces in file names pleases!) | Inside “ExtraCredit”, create another directory called “extra4” | Open your cis106 directory/local repository in VS Code | Inside “extra4” create a markdown file called “extra4.md” | Add all the screenshots to “extra1.md” using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 4: Bash Variables | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 4\" | git push | . | In blackboard submit the following: . | The URL of extra4.md | The PDF file extra4.pdf | . | . ",
    "url": "/extra/bash_variables/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/bash_variables/#what-will-you-submit-for-extra-credit"
  },"217": {
    "doc": "Cd ../ vs cd -",
    "title": "Cd ../ vs cd -",
    "content": " ",
    "url": "/extra/cd_parent_vs_cd_previous/",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/"
  },"218": {
    "doc": "Cd ../ vs cd -",
    "title": "Concepts",
    "content": ". | Environment variable: is a dynamic-named value typically used to configure the behavior of programs and applications, provide information about the system environment, or store temporary data. | $PWD: Stores the absolute path of the current working directory | $OLDPWD: Stores the absolute path of the previous current working directory | . | Parent directory: refers to the directory that contains another directory or file. It’s the directory that is one level higher in the directory tree hierarchy. | Current directory: refers to the directory in which you are currently working or the directory that your shell session is currently “in.” | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#concepts",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#concepts"
  },"219": {
    "doc": "Cd ../ vs cd -",
    "title": "cd ..",
    "content": "We user cd ../ when we want to navigate the the directory above the current directory. Say that your current working directory is /home/student/Downloads/Games/Doom/ and you want to go to /home/student/Downloads/Games. In this instance the cd ../ command will take you there. The 2 dots indicate the parent directory of the current working directory. You can use it to navigate to more than 1 parent directory for example, if we want to go to /home/student, we would use cd ../../../ . Notice that in this instance we only moved up in the directory tree. ",
    "url": "/extra/cd_parent_vs_cd_previous/#cd-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#cd-"
  },"220": {
    "doc": "Cd ../ vs cd -",
    "title": "cd -",
    "content": "cd - is used to move between 2 directories. These are the current directory and the previous current directory. Linux has 2 environment variables to keep track of this information; $OLDPWD and $PWD. Every time you use the cd command these 2 variables get updated to reflect the current information. So if your current working directory is /home/student/Downloads/Games/Doom and you use cd to change to /usr/share/themes then the current value of those variables would be: . | OLDPWD=home/student/Downloads/Games/Doom | PWD=/usr/share/themes | . Now, if you use the cd - command, then bash will change directories to the value in $OLDPWD and update the variables accordingly. So the values now are: . | OLDPWD=/usr/share/themes | PWD=home/student/Downloads/Games/Doom | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#cd--",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#cd--"
  },"221": {
    "doc": "Cd ../ vs cd -",
    "title": "When should I use cd -?",
    "content": "Well that depends on your workflow and what you are doing at the moment. Since we can switch between 2 directories without typing the path, this comes handy in the following essenarios: . | If you are working in two directories and need to switch between them frequently, and the path is long and you don’t want to type all of that. | If you are editing files in different directories using a command-line | If you are working in a temporary directory you can switch back and forward between the temp directory and the current directory | If you are writing script that requires you to move from 2 directories, cd - allows you to do that without storing the paths in variables. | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd--",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd--"
  },"222": {
    "doc": "Cd ../ vs cd -",
    "title": "When should I use cd ../?",
    "content": "All the time honestly! typing .. is quicker than typing a path backwards. So whenever you need to switch back to the parent directory, use this instead! . ",
    "url": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#when-should-i-use-cd-"
  },"223": {
    "doc": "Cd ../ vs cd -",
    "title": "Then what’s up with .. and .?",
    "content": "A single dot (.), represents the current directory where the 2 dots, as mentioned earlier represents the parent directory. This means that: . | ls . and ls do the same thing because by default ls will list the current directory. | cd . will do nothing because it will try to change directory to the current directory. And you cannot go into a room that you are already in! | . However, there are legit uses for the single dot (.) For example, when you want to copy a file from one directory the current directory: . | cp ~/Pictures/Wallpapers/wall.png ./ | . Or when writing paths to files in the current directory in markdown: . | ![wall](./wall.png) | . ",
    "url": "/extra/cd_parent_vs_cd_previous/#then-whats-up-with--and-",
    
    "relUrl": "/extra/cd_parent_vs_cd_previous/#then-whats-up-with--and-"
  },"224": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Getting Comfortable with Ubuntu 24.04",
    "content": ". | Getting Comfortable with Ubuntu 24.04 . | Question 1: Working With Files . | Part 2 - Working with files | . | Question 2: Exploring System Settings | Question 3: Installing Applications Graphically | Question 4: Editing a document | Question 5: Installing Gnome Extensions | What will you submit for extra credit | . | . the goal of this lab/article/page is to give you exposure to using Ubuntu 24.04 (Gnome Desktop Environment) We Will be performing basic computer task . ",
    "url": "/extra/getting_confortable_with_ubuntu/",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/"
  },"225": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 1: Working With Files",
    "content": ". | 1- Open the file manager (files) and explore its interface. Use the image below for help. | . The information in this image was extracted from OpenSuse Documentation. | 2- Practice the following shortcuts: | . | Key Combination | Description | . | Alt + ⬅ &amp; Alt + ➡ | Go backward/go forward | . | Alt + ↑ | Open the parent directory | . | ←, →, ↑, ↓ | Select an item | . | Alt + ↓ or Enter | Open an item | . | Alt + Enter | Open an item’s Properties dialog | . | Shift + Alt ↓ | Open an item and close the current directory | . | Ctrl + L | Toggles the path bar from buttons to path | . | Alt + Home | Opens the home directory | . | any number or letter | Starts a search within the current directory | . | Ctrl + T | Start a search within the current directories and their subdirectories | . | Del | Moves the selected file or directory to the trash, from which it can be restored with Undo | . The information in this image was extracted from OpenSuse Documentation. | 3- In your home directory, create a new directory called Games. | 4- Inside the Games directory, create 3 more directories called: fps,action,rpg | 5- Delete the Games directory | 6- Open the Trash and restore the Games directory | 7- Delete the Games directory again | 8- Empty the Trash | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of your file manager with your trash empty. That will be the proof of submission for question 1 . Part 2 - Working with files . | 1- Open the file manager if it is not open | 2- Use Firefox or any other web browser of your choice to download the following this zip file: https://cis106.com/assets/extras/gcu/site.zip | 3- Decompress/unzip the file in your Downloads directory. | 4- Inside the Downloads directory you should now have a new directory called site | 5- Inside the site directory you should have 3 files: . | site.html | SCRIPT.js | STYLE.css | . | . Show Solution . | 6- Use the website, Pexel.com to download 3 Landscape format images. | 7- Move the images to the site directory | 8- Rename the images to: image1.jpg, image2.jpg, and image3.jpg | 9- Open the file site.html. Notice that the website looks broken. | 10- Rename the files SCRIPT.js and STYLES.css to: . | STYLE.css =&gt; style.css | SCRIPT.js =&gt; script.js | . | 11- Refresh the website site.html and you will notice that now it looks as expected. This is because Linux is case sensitive. So STYLES.css is not the same as styles.css | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of your file manager with your the site directory open. Take another screenshof of Firefox showing the site. Those 2 will be the proof of submission for question 1 part 2 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-1-working-with-files",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-1-working-with-files"
  },"226": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 2: Exploring System Settings",
    "content": "There are two ways of accessing the settings app: . | Via the system menu: | . The information in this image was extracted from Ubuntu's Documentation. | Searching for Settings using the applications launcher: | . | Use the settings app to perform the following tasks: . | 1- Appearance: . | Choose light or dark mode | Choose an accent color you like | Change the wallpaper . | You can download a wallpaper from the internet if you want or use a predefined one. | . | . | . | . Show Solution . | 2- Ubuntu Desktop: . | Play around with the setting of the Desktop Icons and Dock | . | . Show Solution . | Keyboard: . | Add a custom shortcut for the following applications: . | Firefox . | name: Web Browser | command: firefox | shortcut: Super Key (Windows key) + W (or any other key combination you want) | . | Tilix . | name: terminal | command: tilix | shortcut: Super key (windows key) + Enter (or any other key combination you want) | . | Files . | name: File manager | command: nautilus | shortcut: Super key (windows key) + F (or any other key combination you want) | . | VS Code . | name: VS Code | command: code | shortcut: Super + C (or any other key combination you want) | . | Geany . | name: Text Editor | command: geany | shortcut: Super + t (or any other key combination you want) | . | . | To add custom shortcut, follow these steps: . | 1- Click on Keyboard and then scroll down to “View and Customize Shortcuts” | 2- In the dialog that pops up, scroll down to “Custom Shortcut” | 3- Click on “Add Shortcut…” | . | . | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of your desktop showing that you changed the wallpaper or the position of the doc. Take another screenshot showing your custom shortcuts. That will be the proof of submission for question 2 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-2-exploring-system-settings",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-2-exploring-system-settings"
  },"227": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 3: Installing Applications Graphically",
    "content": "To install applications graphically, we use the Software Center also known as the App Center. Let’s install a couple of applications: . | Open the App Center | Search for LibreOffice and install it - This is a productivity suite just like Microsoft Software | Search for a Tetris game. Install one of the options. | Wait until the apps finish installing | Open the LibreOffice Writer and close it | Open the tetris game and close it | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the tetris game you installed. That will be the proof of submission for question 3 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-3-installing-applications-graphically",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-3-installing-applications-graphically"
  },"228": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 4: Editing a document",
    "content": "In this question we will be editing word documents and pdf files. | Download this word document | Open the word document in LibreOffice. | Edit the document and export it to pdf | Open the PDF file in libre Office Draw | Edit the PDf and export it again | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the edited pdf document showing your edits. That will be the proof of submission for question 4 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-4-editing-a-document",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-4-editing-a-document"
  },"229": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "Question 5: Installing Gnome Extensions",
    "content": "Gnome extensions allow you to add extra functionality to your desktop environment. As part of the initial setup for the class, you installed the gnome extension app that allows you to download extensions. | Open the app “Extensions Manager” | Search for the extension “Caffeine” and install it. This extension is used for preventing your computer to go to sleep. To use the extension, click on the system menu. You will see a new icon ( a cup of coffee). | Search for the extension “Apps Menu” by “Fmuelliner” and install it. This will give you a windows like menu at the top left corner. | You can disable or uninstall any Extension you want. Keep in mind that system updates make break some extensions. I recommend keeping the number of extensions to a minimum. | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of your desktop showing the extensions. That will be the proof of submission for question 5 . ",
    "url": "/extra/getting_confortable_with_ubuntu/#question-5-installing-gnome-extensions",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#question-5-installing-gnome-extensions"
  },"230": {
    "doc": "Getting Comfortable with Ubuntu 24.04",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called “ExtraCredit” (One word no spaces in file names pleases!) | Inside “ExtraCredit”, create another directory called “extra1” | Open your cis106 directory/local repository in VS Code | Inside “extra1” create a markdown file called “extra1.md” | Add all the screenshots to “extra1.md” using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 1: Getting used to the Gnome Desktop Environment | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 1\" | git push | . | In blackboard submit the following: . | The URL of extra1.md | The PDF file extra1.pdf | . | . ",
    "url": "/extra/getting_confortable_with_ubuntu/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/getting_confortable_with_ubuntu/#what-will-you-submit-for-extra-credit"
  },"231": {
    "doc": "Markdown Extra Practice",
    "title": "Markdown Extra Practice",
    "content": "If you wish to practice more markdown, try to recreate the following documents in markdown: . ",
    "url": "/extra/lab1_md_extra_practice/",
    
    "relUrl": "/extra/lab1_md_extra_practice/"
  },"232": {
    "doc": "Markdown Extra Practice",
    "title": "Document 1",
    "content": "Create a markdown document from this page, that contains the following: . | Several sections of paragraphs | ordered and unordered lists | A couple of images . | The Linux mascot | Linux distributions logos | Desktop environment screenshots | . | At least 1 table. | . Try to make the document look as professional as possible . ",
    "url": "/extra/lab1_md_extra_practice/#document-1",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-1"
  },"233": {
    "doc": "Markdown Extra Practice",
    "title": "Document 2",
    "content": "To practice note taking and code formatting, use this introduction to python website and create a 1 page document that shows how to get started with python. You just simply include the following: Learn the Basics . | Hello, World! | Variables and Types | Lists | Basic Operators | String Formatting | Basic String Operations | Conditions | Loops | . ",
    "url": "/extra/lab1_md_extra_practice/#document-2",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-2"
  },"234": {
    "doc": "Markdown Extra Practice",
    "title": "Document 3",
    "content": "To practice tables, use the following images and create a pdf file that contains all of these tables: . Table 1 . You can download the images from here . ",
    "url": "/extra/lab1_md_extra_practice/#document-3",
    
    "relUrl": "/extra/lab1_md_extra_practice/#document-3"
  },"235": {
    "doc": "Learning Git",
    "title": "Learning Git",
    "content": ". | Presentation here | Cheat Sheet here | . ",
    "url": "/extra/learning-git/",
    
    "relUrl": "/extra/learning-git/"
  },"236": {
    "doc": "Learning Git",
    "title": "Setup Git",
    "content": ". | Set your username: git config --global user.name 'your username here' | Set your email address: git config --global user.email 'your email here' | . ",
    "url": "/extra/learning-git/#setup-git",
    
    "relUrl": "/extra/learning-git/#setup-git"
  },"237": {
    "doc": "Learning Git",
    "title": "Setup SSH authentication",
    "content": ". | Generate an ssh key: ssh-keygen -t ed25519 -C \"your_email@example.com\" This creates a new SSH key, using the provided email as a label. When you’re prompted to: \"Enter a file in which to save the key,\" press Enter. This accepts the default file location. At the prompt, to type a secure passphrase, press enter for no passphrase. If you want to use a passphrase, go ahead as it provides an extra layer of security. However, for this course you do not need to add a passphase. | Use the following command to see your public ssh key: cat ~/.ssh/id_ed25519.pub copy the entire output of this command to the clipboard. See examle here: . | In your github page, go to settings &gt; SSH and GPG Keys Here add your ssh key that you copied to the clipboad in the step prior. Type yes (the whole word) and press enter and you are done . | Test you ssh connection by using this command: ssh -T git@github.com You will see the following outcome: . | . If you do not see an error message or a different message than the one shown prior, then your SSH connection is correct. Now you can push and clone using SSH. ",
    "url": "/extra/learning-git/#setup-ssh-authentication",
    
    "relUrl": "/extra/learning-git/#setup-ssh-authentication"
  },"238": {
    "doc": "Mkdir, touch, and rm",
    "title": "Mkdir, touch, and rm",
    "content": ". | . | Commands reference table | . | . | MKDIR . | 2.1. Description | 2.2. Formula/usage | 2.3. Examples | 2.4. Practice | . | 2.4.1. Description | 2.4.2. Solution | . | . | . | TOUCH . | 3.1. Description | 3.2. Formula/usage | 3.3. Examples | 3.4. Practice | . | 3.4.1. Description | 3.4.2. Solution | . | . | . | RM . | 4.1. Description | 4.2. Formula/usage | 4.3. Examples | 4.4. Practice | . | . | . | MV . | 5.1. Description | 5.2. Formula/usage | . | 5.2.1. Moving | 5.2.2. Renaming * 5.3. Examples * 5.4. Practice | . | . | . | CP . | 6.1. Description | 6.2. Formula/usage | 6.3. Examples | 6.4. Practice | . | . | . ",
    "url": "/extra/mkdir_touch_rm/",
    
    "relUrl": "/extra/mkdir_touch_rm/"
  },"239": {
    "doc": "Mkdir, touch, and rm",
    "title": "1. Commands reference table",
    "content": "These are the most basic commands to manage files and directories. | Command | Definition | Formula | Example | . | mkdir | makes directories | mkdir + option + new directory(ies) name | mkdir ~/Downloads/games | . | touch | makes files | touch + option + new file(s) name | touch ~/Downloads/games/list.txt | . | rm | removes files | rm + option + files to delete | rm ~/Downloads/games/list.txt | . | mv | moves files &amp; directories | mv + option + source path + destination path | mv ~/Downloads/games ~/Documents/ | . | mv | rename files &amp; directories | mv + option + old name + new name | mv ~/Documents/games/old.txt ~/Documents/games/mylist.txt | . | cp | copies files &amp; directories | cp + option + sources path + destination | cp -r ~/Downloads/oldGames/ ~/Games/ | . ",
    "url": "/extra/mkdir_touch_rm/#1-commands-reference-table",
    
    "relUrl": "/extra/mkdir_touch_rm/#1-commands-reference-table"
  },"240": {
    "doc": "Mkdir, touch, and rm",
    "title": "2. MKDIR",
    "content": "2.1. Description . | Used for create directories. Mkdir can make 1 or multiple directories by separating each directory name with a space. | . 2.2. Formula/usage . mkdir + option + directory names . Where directory name can be: . | Just the name of the directory if you want to create them in the current working directory | Absolute or relative path if you want to create the directory in a different location | . 2.3. Examples . | Using relative path: Create a directory in your current working directory called games . | mkdir games | . | Using relative path: Create 3 directories inside the games directories called: action, adventure,fps . | mkdir games/action games/adventure games/fps | . | Using absolute path: Create a directory in the action directory called wonderboy . | mkdir ~/games/action/wonderboy | . | Using absolute path: Create 2 directories, one in fps and another in adventure. Call them cod and uncharted . | mkdir ~/games/fps/cod ~/games/adventure/uncharted | . | Create a parent and subdirectory at the same time . | mkdir -p ~/Documents/school/english/homework | . | Create a directory and display a message confirming the directory creation (verbose output) . | mkdir -pv ~/Downloads/games | mkdir -pv ~/Downloads/games/action games/fps/doom practice | . | . 2.4. Practice . 2.4.1. Description . You have just been assigned the task of organizing a new project called “ProjectPhoenix” on your company’s server. For this project, you need to set up a directory structure that will hold various types of documents. The structure should look like this: . ProjectDelta/ ├── planning/ │  ├── meetings/ │ └── drafts/ ├── development/ │ ├── code/ │ └── documentation/ └── testing/ ├── unit_tests/ └── integration_tests/ . 2.4.2. Solution . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#2-mkdir",
    
    "relUrl": "/extra/mkdir_touch_rm/#2-mkdir"
  },"241": {
    "doc": "Mkdir, touch, and rm",
    "title": "3. TOUCH",
    "content": "3.1. Description . touch is used to create an empty file or to update the timestamp of an existing file. If the specified file does not exist, touch will create it. If the file exists, touch will update its access and modification times to the current time. 3.2. Formula/usage . | touch + option + file(s) name | . Where file name can be: . | Just the name of the files if you want to create them in the current working directory | Absolute or relative path if you want to create the directory in a different location | . 3.3. Examples . | Create multiple files in the current working working directory . | touch notes.txt program.py page.html | . | Create multiple files in different directories using absolute path . | touch ~/games/action/wonderboy/run.txt ~/games/adventure/uncharted/todo.md | . | Create multiple files in different directories using relative path . | touch games/action/run.sh games/fps/readme.md | . | . 3.4. Practice . 3.4.1. Description . In th previous practice, you created a directory structure. Add the following files to each directory: . ProjectDelta/ ├── development │   ├── code │   │   ├── app.js │   │   ├── index.html │   │   └── styles.css │   └── documentation │   └── readme.md ├── planning │   ├── drafts │   │   └── notes.md │   └── meetings │   └── schedule.docx └── testing ├── integration_tests │   └── instructions.md └── unit_tests └── test.js 10 directories, 8 files . 3.4.2. Solution . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#3-touch",
    
    "relUrl": "/extra/mkdir_touch_rm/#3-touch"
  },"242": {
    "doc": "Mkdir, touch, and rm",
    "title": "4. RM",
    "content": "4.1. Description . The rm command is used to remove files and directories. It is a powerful command that can permanently delete files, so it should be used with caution. By default, rm removes files, but with certain options, it can also delete directories and their contents. In Linux, only empty directories can be removed. When you try to remove non-empty directories the following error is shown: “rm: cannot remove 'directory_name/': Is a directory”. Even when using the rmdir command, trying to remove a non empty directory results in the following error: “rmdir: failed to remove 'directory_name/': Directory not empty”. To remove directories use the -r option. See examples. 4.2. Formula/usage . | rm + option + directories or files to remove | . Where file/directory name can be: . | Just the name of the files/directories if they are located in the current working directory | Absolute or relative path if they are located in a different location | . Common Options: . | -f: Force removal without prompting for confirmation. | -r or -R: Recursively remove directories and their contents. | -i: Prompt before each removal. | -v: Verbose mode, showing the files as they are removed. | . 4.3. Examples . | Remove files using absolute path . | rm ~/games/action/run.sh ~/games/adventure/uncharted/todo.md | . | Remove files using relative path . | rm games/fps/readme.md games/notes.txt games/page.html | . | Remove files and directories but prompt for confirmation before removing and display removal message when done . | rm -vir games/program.py ~/ProjectDelta | . | Remove a non empty directory forcing the removal . | rm -rf games/ | . | . 4.4. Practice . You have a folder named “OutdatedProjects” in your home directory. This folder contains old project files that you no longer need, including subdirectories with their own files. You want to clean up your home directory by completely removing the “OutdatedProjects” folder and all of its contents. The directory structure looks like this: . /home/user/OutdatedProjects/ ├── projectA/ │ └── old_data.txt ├── projectB/ │ └── old_report.txt ├── projectC/ │ └── notes.txt └── archived_files.txt . Use the rm command to delete the entire “OutdatedProjects” directory, including all of its subdirectories and files, using an absolute path. Before you can run the rm command, you will need to create the directories. Run this command that will run a script to generate the directories and files for you. curl https://cis106.com/assets/extra/rm_practice.sh | bash . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#4-rm",
    
    "relUrl": "/extra/mkdir_touch_rm/#4-rm"
  },"243": {
    "doc": "Mkdir, touch, and rm",
    "title": "5. MV",
    "content": "5.1. Description . The mv command is used for moving and renaming files and directories. Keep the following points in mind about the mv command: . | mv cannot rename more than 1 file at the time | mv can move and rename a file at the same time | mv will set the last argument as the destination or file new name | Common options of the mv command: . | -i: Prompt before overwriting an existing file. | -u: Move only when the source file is newer than the destination file or when the destination file is missing. | -v: Verbose mode, showing the files as they are moved or renamed. | . | . 5.2. Formula/usage . 5.2.1. Moving . | mv + option + files/directories to move + destination directory 5.2.2. Renaming . | mv + option + old name + new name | . 5.3. Examples . | Move multiple files using a combination of absolute path and relative path . | mv -v ~/games/ schoolProject/ Documents/school/hmw.txt ~/Downloads/new_folder/ . | In this example: . | ~/games, schoolProject/, and, Documents/school/hmw.txt are moved to ~/Downloads/new_folder/ | -v enables verbose output. | . | . | . | Rename a directory . | mv -v ~/Downloads/new_folder ~/Downloads/projectAvalon/ | . | Rename a file . | mv -v ~/Downloads/projectAvalon/hmw.txt ~/Downloads/projectAvalon/submission.txt | . | Move and rename a file in a single command . | mv -v ~/Downloads/projectAvalon/submission.txt ~/Documents/cis107_document.txt | . | Move and rename a directory in a single command . | mv -v ~/Downloads/projectAvalon/ ~/Documents/Avalon | . | . 5.4. Practice . You are working on a web development project named “AlphaProject”. You have been give all the files for this project. Your task is to organize the folder. You have to use the mv command for renaming and moving. You are not allowed to create new directories. To get all the necessary files, run this command, which will run a script to generate the directory “AlphaProject” including all the necessary files. curl https://cis106.com/assets/extras/mv_practice.sh | bash . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#5-mv",
    
    "relUrl": "/extra/mkdir_touch_rm/#5-mv"
  },"244": {
    "doc": "Mkdir, touch, and rm",
    "title": "6. CP",
    "content": "6.1. Description . The cp command is used to copy files and directories. Cp requires -r option to copy directories. You can copy and rename a directory or file in a single command too. However, this only works when trying to copy a single file or directory. This is like making a backup sort-of-speak. Common Options: . | -r or -R: Recursively copy directories and their contents. | -i: Prompt before overwriting an existing file. | -u: Copy only when the source file is newer than the destination file or when the destination file is missing. | -v: Verbose mode, showing the files as they are copied. | -a: Copy files and directories, preserving attributes like timestamps and permissions. | . 6.2. Formula/usage . | cp + option + source files/directories + destination directory | . 6.3. Examples . | Copy several files using a combination of absolute and relative path. | cp -r ~/projectOrion/ ~/Downloads/games.txt Videos/example.mp4 Pictures/bg.png ~/bookProject/ . | Note: Here we have to use -r because there is a directory in the sources to copy (~/projectOrion) | . | . | Copy a directory with verbose output . | cp -rv ~/projectOrion/ ~/Documents/ | . | . 6.4. Practice . Copy the directory of the previous practice. Copy the directory to the Documents directory. The name of the copy is: AlphaProjectBackup . Show Solution . ",
    "url": "/extra/mkdir_touch_rm/#6-cp",
    
    "relUrl": "/extra/mkdir_touch_rm/#6-cp"
  },"245": {
    "doc": "Practice Virtualization",
    "title": "Practice Virtualization",
    "content": "This is for Students using VirtualBox in Windows or MacOS with an Intel CPU . ",
    "url": "/extra/practice_virtualization/",
    
    "relUrl": "/extra/practice_virtualization/"
  },"246": {
    "doc": "Practice Virtualization",
    "title": "Option 1",
    "content": "Simply create virtual machines of Windows or Ubuntu using Lab 2 as a guide. Keep in mind the following: . | The minimun hardware requirements and recommended requires of the OS. | For example here is for Windows | . | To optain an iso file for Windows, use the Windows 10 Media creation tool or Windows 11 media creation tool. | . For Ubuntu, try out the many Ubuntu Flavors in a virtual machine. You can use the live session or do the full installation . Just remember to delete the virtual machine completely when you are done practicing . ",
    "url": "/extra/practice_virtualization/#option-1",
    
    "relUrl": "/extra/practice_virtualization/#option-1"
  },"247": {
    "doc": "Practice Virtualization",
    "title": "Option 2",
    "content": ". | You can download pre-made VDI images from osboxes.org | . ",
    "url": "/extra/practice_virtualization/#option-2",
    
    "relUrl": "/extra/practice_virtualization/#option-2"
  },"248": {
    "doc": "VM Test Activity",
    "title": "VM Test Activity",
    "content": " ",
    "url": "/extra/testingvms/",
    
    "relUrl": "/extra/testingvms/"
  },"249": {
    "doc": "VM Test Activity",
    "title": "Goal",
    "content": ". | All the activities in this lab should be executed reliably with minimal slow downs with a virtual machine that meets the following criteria: . | CPU: 2 Cores | RAM: 4 GB | HDD: 50 GB | . ",
    "url": "/extra/testingvms/#goal",
    
    "relUrl": "/extra/testingvms/#goal"
  },"250": {
    "doc": "VM Test Activity",
    "title": "Applications installed:",
    "content": ". | Code Editor: VS Code | Text Editor: Geany | Web Browser: Firefox, Librewolf, Chromium | . ",
    "url": "/extra/testingvms/#applications-installed",
    
    "relUrl": "/extra/testingvms/#applications-installed"
  },"251": {
    "doc": "VM Test Activity",
    "title": "Test 1: Creating Markdown Documents",
    "content": ". | Download or clone this github repository: https://github.com/ra559/markdown-test | Open the directory in vs code | Create a markdown file called: husky.md | Use the text in the husky.txt file to create the husky.md file. | The document should contain as much markdown format as possible. | Convert the document to pdf | Convert the document to html | Preview the pdf file in vs code | Preview the html file using live server | . were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-1-creating-markdown-documents",
    
    "relUrl": "/extra/testingvms/#test-1-creating-markdown-documents"
  },"252": {
    "doc": "VM Test Activity",
    "title": "Test 2: Basic Website",
    "content": ". | Open the markdown-test directory from the previous test in vs code | Add some css and bootstrap to the html | Add some javascript | Preview the website with live preview | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-2-basic-website",
    
    "relUrl": "/extra/testingvms/#test-2-basic-website"
  },"253": {
    "doc": "VM Test Activity",
    "title": "Test 3: Basic Jekyll Site",
    "content": ". | Use this guide to install Jekyll | Use this guide to create your jekyll site. | Add some entries to your site | Constantly server your site with --trace enabled. | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-3-basic-jekyll-site",
    
    "relUrl": "/extra/testingvms/#test-3-basic-jekyll-site"
  },"254": {
    "doc": "VM Test Activity",
    "title": "Test 3: Terminal + Vs Code + Web Browser",
    "content": ". | Use this Linux FS guide to practice some commands. | Create a markdown file and take screenshots. | Add the screenshots to the markdown file and convert the file to pdf | . Were you able to complete this test without major slowdowns? . ",
    "url": "/extra/testingvms/#test-3-terminal--vs-code--web-browser",
    
    "relUrl": "/extra/testingvms/#test-3-terminal--vs-code--web-browser"
  },"255": {
    "doc": "The Linux FS",
    "title": "The Linux FS",
    "content": "All The videos here . ",
    "url": "/extra/thelinuxfs/",
    
    "relUrl": "/extra/thelinuxfs/"
  },"256": {
    "doc": "The Linux FS",
    "title": "Other Review Videos:",
    "content": ". | REVIEW 4: The LS command and Practice | Linux Tutorials The ls command GeeksforGeeks | How to Use The ls Command on the Linux Command Line | . | The Linux FS . | Other Review Videos: | Basic Concepts . | Special characters: | Bash Environment Variables | Bash Tips: | . | Commands to navigate the linux filesystem . | PWD | CD | Practice CD command: | LS . | Output of LS -L explained: | . | Practice LS command: | Tree | EXA | . | What will you submit for extra credit | . | . ",
    "url": "/extra/thelinuxfs/#other-review-videos",
    
    "relUrl": "/extra/thelinuxfs/#other-review-videos"
  },"257": {
    "doc": "The Linux FS",
    "title": "Basic Concepts",
    "content": ". | The root directory: The first directory in the filesystem that contains the entire filesystem represented by “/”. | Current working directory: Also known as the present working directory. It is the directory where you are currently working in. You are always working from a directory. | Parent Directory: a dirtectory containing one or more directories and files. | Child directory: a better name for this is a subdirectory or subfolder. This is a directory inside another directory. See image for visual reference. | . | YOUR HOME DIRECTORY: This is your user’s personal directory where all your files are located. Every user has it’s own home directory just like in a apartment complex they all residents have their own apartment while sharing the common areas. You have total ownership of your home directory but outside of the home directory only the root user can make changes. An example absolute path, assuming that user name is maria53, would be /home/maria53 | The home Directory: This is the parent directory of all the home directories. This is where all the users’ home directory are. The absolute path of this directory is /home. Noticed that it starts at the root. | The root user: This is the administrator account of your system. To perform administrative tasks or to manage directories and files outside of your home directory, you must obtain root privileges using the sudo command at the beginning of the command. | Path name: Also known as file path. This is the location of a given file in your computer. A path name can be absolute path or relative path. | Absolute Path: The location of a file starting at the root of the file system. For example, /home/maria53/Downloads/list.txt is the absolute path of the file list.txt. The advantage of absolute paths is that they can be used at any point of the file system regardless of your current directory. Any command that is given an absolute path will be able to find the file because it will start at the beginning of the filesystem. The disadvantage is that a command can be long to type if the file path is long. | Relative Path: The location of a file starting from a child directory of the current working directory or from the current directory itself. The advantage of using relative path is that typing commands is faster. The disadvantage of relative paths is that they cannot work from anywhere in the filesystem. In order for a relative path to work, a file must be reachable from the current directory onwards. Another disadvantage of relative paths is that they require a better mental understanding of the linux filesystem in the sense that you must keep a mental image of the directory tree that you are working with. An example of a relative path would be Downloads/list.txt assuming that the current working directory is /home/maria53 Special characters: . Special characters are function like commands that tell the shell to perform a specific action without having to type the complete command. These special characters make working on the command line more efficiently. Here is short list to keep in mind. | . (single period): represents the current directory. | .. (2 consecutive periods): represents the parent directory. | ~ (tilde character): expands the current users home directory. It is like a variable that the shell uses to store the absolute path of the user’s home directory. This ~/Downloads is the same as typing /home/maria53/Downlods | / (one forward slash): as mentioned earlier, this is the root directory and the shortest path in the system. This is the beginning of the directory tree. There is nothing before it and everything after it. | - (hyphen-minus): is used to move to the previous current working directory. | # (hash or number sign): This is used for single line comments in shell scripting. | ! (single exclamation mark): used for repeating a command from the history. For example !5 will repeat the 5th command in the command history. To view the entire command history type history. | !! (2 consecutive exclamaton marks): are used for repeating the previous command. For example, !! will repeat the previous command while, sudo !! will repeat the previous command but will add sudo at the beginning of the command. This is useful for times when we forget to type sudo when performing administrative tasks. | . Bash Environment Variables . | What is a variable? . | In programming, a variable is place to store data. A variable is like a box with a label. For example, if you a lot of pens in your desk and you place them in a box a label it pens, now the box store your pens. In programming a variable can be used to store temporary or permanent information that you will continuously reuse in your program. For example, username='maria53' the variable name now stores the value maria. When evener the programs need to access the maria’s username, it can do it by referencing the variable username. | . | What is an environment variable? . | Environment variables store values of a user’s environment and can be used in commands in the shell. These values can be unique to the user’s environment which makes them ideal when writhing commands that you want to use regales of which user is using the computer. To see a list of your environment variables type env. To use the value stored in an environment variable you must prepend the variable name with a $. Here are some useful environment variables: | $USER = stores the current’s user username | $HOME = stores the absolute path of current’s user home directory | $PWD = stores the absolute path of the present working directory. | $OLDPWD = stores the absolute path of the previous current working directory | . | . Bash Tips: . | Tab Completion: autocomplete a command/pathname by pressing the tab key | Arrow keys: allows you to move, edit, and repeat commands | Ctrl + a: go to the start of the command line | Ctrl + e: go to the end of the command line . | Shortcut list | . | . ",
    "url": "/extra/thelinuxfs/#basic-concepts",
    
    "relUrl": "/extra/thelinuxfs/#basic-concepts"
  },"258": {
    "doc": "The Linux FS",
    "title": "Commands to navigate the linux filesystem",
    "content": "To navigate the linux filesystem, you only need to master 3 commands: cd, pwd and ls. While there are other useful commands, those can be considered complimentary and you should learn them after you have mastered those 3. PWD . | Usage . | Displays the absolute path of the current working directory. | . | Formula . | pwd | . | Examples . | Print the absolute path of current working directory . | pwd | . | . | . CD . | Usage . | Changes the current working directory. In other words, it moves you from one directory to another. By default, it will always send you to your home directory. | . | Formula . | cd + destination absolute path or relative path | . | Examples . | Go (change your current directory) to your home directory (there is more than 1 way of doing this): . | cd (without any arguments, cd will take you home) | cd ~ (using the ~ special character. as ~ will expand to the absolute path of the user’s home directory) | cd $HOME (using the $HOME environment variable) | cd /home/$USER/Downloads (using $USER environment variable in the path) | . | Go to a specified directory with absolute path: . | cd /usr/share/themes | . | Go to a specified directory with relative path assuming your current working directory is /home . | cd maria53/Downloads/ | . | Go to the previous working directory. This is useful when you are working with 2 directories located far in the directory tree . | cd - | . | Go to the previous directory in the directory tree. One directory above. | cd ../ | . | Go to 2 directories above the directory tree . | cd ../../ | . | . | . Practice CD command: . Try to complete these tasks without looking at the solution. Use the image below as a reference: . | Using absolute path, go to the directory “/user/share/themes/Adwaita” | Go back to your home directory. | Go back to the “/user/share/themes/Adwaita” using the - special character. | Go to the root of the filesystem using the “..” special character. | Go to your “Downloads” directory 1 directory at the time. Display/Print your present working directory once you have reached the “Downloads” directory. | Go back to your home directory and then to the “Pictures” directory. | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the terminal showing all the commands you used to complete the practice . LS . | Usage . | ls is used for listing files and directories. By default it will list the current directory when no directory is specified. Listing means to see what is inside a directory. | . | Formula . | ls + option + directory to list | . | Examples . | See all the options of the ls command (extracted from the man page): . | ls --help | . | List the current directory: . | ls | . | List all the files including hidden files in current directory: . | ls -A | . | List all the files inside a given directory: . | ls -A /usr/share/fonts/X11 (absolute path) | ls -A Documents/ (relative path assuming that the $PWD is $HOME) | . | Long list a directory . | ls -lA ~/Pictures | . | List a directory recursively . | ls -R Documents/ | . | Long list a directory only . | ls -ld Documents/ | . | List a directory sorted by last modified . | ls -t Documents/ | . | List a directory sorted by file size . | ls -S Documents/ | . | Long list a directory excluding group and owner information, with human readable file size and sorted in reverse order. | ls -lhgGr Documents/ | . | . | . Output of LS -L explained: . Practice LS command: . Try to complete these tasks without looking at the solution. | Use this command to download some example files: curl https://raw.githubusercontent.com/ra559/cis106/main/assets/scripts/practice_ls.sh | bash | The command above will create a directory in your home directory called practicels Here you will find 10 example files to practice ls. If the command above did not work, read the output carefully and try to fix it yourself. You can also download the zip file on your own. Read the basic script for the URL. | . | list all the files in the practice directory. | long list all the files in the practice directory. | long list all the files in the practice directory sorted by file size with human readable file sizes | long list all the files in the practice directory sorted by file size with human readable file sizes and in reverse order. | long list all the files in the practice directory without the group and owner, with human readable file sizes, sorted by file extension and with full time stamp. | . Show Solution . If you are doing this activity for the extra credit. Take a screenshot of the terminal showing all the commands you used to complete the practice . Tree . | Usage . | used to display a recursive directory listing (tree) of files. | . | Formula . | tree + option + directory | . | Examples . | Display a tree of the home directory . | tree ~ or tree $HOME or tree /home/$USER | . | Display a tree of a directory with file permissions . | tree -p ~/practicels | . | Display a tree of a directory with the full path prefix, with the user and group owner, human readable file sizes, and the date of last modified. | tree -pughD ~/practicels/ | . | . | . EXA . | Usage . | Used the same way as ls. To list files and directories. Exa is a modern replacement for ls written in Rust. Exa is not installed by default. You will need to install it using your linux distribution package manager. | . | Formula . | exa + option + directory | . | Examples . | list all files in a given directory in a single line . | exa -1 ~/practicels | . | long list all the files in a given directory . | exa -l ~/practicels | . | long list all the files in a given directory with headers . | exa -lh ~/practicels | . | list a directory in a tree like format . | exa -T ~/practicels | . | . | . ",
    "url": "/extra/thelinuxfs/#commands-to-navigate-the-linux-filesystem",
    
    "relUrl": "/extra/thelinuxfs/#commands-to-navigate-the-linux-filesystem"
  },"259": {
    "doc": "The Linux FS",
    "title": "What will you submit for extra credit",
    "content": ". | In your cis106 directory/local repository, create a new directory called ExtraCredit (One word no spaces in file names pleases!) | Inside ExtraCredit, create another directory called extra3 | Open your cis106 directory/local repository in VS Code | Inside extra3 create a markdown file called extra3.md | Add all the screenshots to extra3.md using proper markdown syntax and labeling each screenshot using heading 2 formatting. Save the markdown file. | Your markdown document should start with the following heading1: # Extra Credit 3: The Linux FS | Convert your file to PDF | Run the github commands, in VS Code Terminal, to push all your changes to github: . | gid add . | git commit -m \"Completed Extra 1\" | git push | . | In blackboard submit the following: . | The URL of extra3.md | The PDF file extra3.pdf | . | . ",
    "url": "/extra/thelinuxfs/#what-will-you-submit-for-extra-credit",
    
    "relUrl": "/extra/thelinuxfs/#what-will-you-submit-for-extra-credit"
  },"260": {
    "doc": "Wildcards",
    "title": "Wildcards",
    "content": "Note: Work in progress. ",
    "url": "/extra/wildcards/",
    
    "relUrl": "/extra/wildcards/"
  },"261": {
    "doc": "Wildcards",
    "title": "Description",
    "content": "Wildcards or file globing is a shell feature that, using special characters, allows us to rapidly specify groups of filenames. Because we work with files all the time, it is useful to be able to work with multiple files at the same time. Why and when should I use a wildcard? . Using wildcards can save you a lot of time. Imagine you need to move all the text files in a folder. You could move them one by one—if you know each file’s name. But what if there are 300 files? Moving them one at a time would take forever! Wildcards help you by allowing you to match all files that meet a certain pattern or criteria, so you can move them all at once with a single command. Here are some examples: . | Copy all photos from a drive to a flash drive. | Delete certain types of files from a folder. | List all files that have a date in their name. | . There are only 3 wildcards. Here is how they work: . | Wildcard | definition | example | . | * | matches 0 to any number of characters | ls ~/Downloads/*.png | . | ? | matches 1 character | ls ~/Downloads/f?ll.sh | . | [] | matches 1 character from a set | ls ~/Downloads/f[0-9]ll.sh | . ",
    "url": "/extra/wildcards/#description",
    
    "relUrl": "/extra/wildcards/#description"
  },"262": {
    "doc": "Wildcards",
    "title": "What does “matches x number of character” really mean?",
    "content": "This refers to the number of characters in the file name that can be matched everytime the wildcard is used in a command. For example, here is an illustration using the * wildcard: . Notice that because the * wildcard matches 0 characters and also any number of characters, this command: ls *SC*.png matches the files Script_remover.sh and BackupScript.sh. To practice the wildcards, run this command: . curl https://cis106.com/assets/extras/wildcards.sh | bash . This will create a directory in your home directory called wildcard_extra_practice. This directory contains a bunch of files and directories (created at random). All the examples here will use the files in this directory. ",
    "url": "/extra/wildcards/#what-does-matches-x-number-of-character-really-mean",
    
    "relUrl": "/extra/wildcards/#what-does-matches-x-number-of-character-really-mean"
  },"263": {
    "doc": "Wildcards",
    "title": "The * (star/asterisk) wildcard",
    "content": "Examples: . | list all of the directories inside a given directory without listing their content . | ls -1d wildcard_extra_practice/*/ | . | move all the .sh (shell scripts) files . | mv wildcard_extra_practice/*.sh wildcard_extra_practice/scripts/ | . | list and then move all the image files in the wildcard_extra_practice directory. You will need to create a directory first. | mkdir wildcard_extra_practice/images/ | ls wildcard_extra_practice/img-*.* | mv -v wildcard_extra_practice/img-*.*images/ | . | . ",
    "url": "/extra/wildcards/#the--starasterisk-wildcard",
    
    "relUrl": "/extra/wildcards/#the--starasterisk-wildcard"
  },"264": {
    "doc": "Wildcards",
    "title": "The ? (question mark) wildcard",
    "content": "Examples: . | List all the files that contain a 4 letter file extension. | ls -1X wildcard_extra_practice/*.???? | . | List all the files that contain a 4 letter file extension and start with letter i: . | ls -1X wildcard_extra_practice/i*.???? | . | List all th files Microsoft Office 365 files. | ls -1X wildcard_extra_practice/*.???x | . | . ",
    "url": "/extra/wildcards/#the--question-mark-wildcard",
    
    "relUrl": "/extra/wildcards/#the--question-mark-wildcard"
  },"265": {
    "doc": "Wildcards",
    "title": "The [] (square brackets) wildcard",
    "content": "| POSIX class | Represents | Means | Example using ls | . | [:upper:] | [A-Z] | Uppercase letters | ls *[[:upper:]]* - List files with uppercase letters | . | [:lower:] | [a-z] | Lowercase letters | ls *[[:lower:]]* - List files with lowercase letters | . | [:digit:] | [0-9] | Digits | ls *[[:digit:]]* - List files containing digits | . | [:alpha:] | [A-Za-z] | Alphabetic characters | ls *[[:alpha:]]* - List files with alphabetic characters | . | [:alnum:] | [A-Za-z0-9] | Alphanumeric characters | ls *[[:alnum:]]* - List files with alphanumeric characters | . | [:space:] | [ \\t\\n\\r\\f\\v] | Whitespace characters | ls *[[:space:]]* - List files with spaces in names | . | [:punct:] | Punctuation | Punctuation characters | ls *[[:punct:]]* - List files with punctuation characters | . | [:blank:] | [ \\t] | Space and tab | ls *[[:blank:]]* - List files with spaces or tabs | . | [:xdigit:] | [0-9A-Fa-f] | Hexadecimal digits | ls *[[:xdigit:]]* - List files with hexadecimal characters | . | [:cntrl:] | Control characters | Control characters | ls *[[:cntrl:]]* - List files with control characters | . | [:print:] | Printable | Printable characters | ls *[[:print:]]* - List files with printable characters | . | [:graph:] | Graphical | Visible characters (not spaces) | ls *[[:graph:]]* - List files with graphical characters | . | [:word:] | [A-Za-z0-9_] | Word characters (alphanumeric + underscore) | ls *[[:word:]]* - List files containing word characters | . | [:ascii:] | ASCII characters | All ASCII characters (0-127) | ls *[[:ascii:]]* - List files containing ASCII characters | . Examples: . | List all the files that start with a capital letter . | ls wildcard_extra_practice/[A-Z]* | . | List all the files that contain a number in their name . | `ls wildcard_extra_practice/[0-9] | . | . Note: . | Wildcards also have their limitations. | For instance, “List all the files that do not contain a digit in the file name” You may assume that the approach would be ls *[!0-9]*. However, this does not work. This wildcard translates to: “all files and directories in the current directory whose names contain at least one character that is not a digit (0-9)” However, if you ever need this, here are two approaches: . | Use ls + grep: . | ls *[!0-9]* | grep -v '[0-9]' | . | Use find: . | find ./ -not -name '*[0-9]*' | . | Find is preferred for scripts because ls is not suited for shell scripts. ls is intended to be a human friendly tool and the output is difficult to parse properly. | . | . ",
    "url": "/extra/wildcards/#the--square-brackets-wildcard",
    
    "relUrl": "/extra/wildcards/#the--square-brackets-wildcard"
  },"266": {
    "doc": "Final Exam Study Guide",
    "title": "Final Exam Study Guide",
    "content": ". ",
    "url": "/final_exam/final_exam/",
    
    "relUrl": "/final_exam/final_exam/"
  },"267": {
    "doc": "Final Exam Study Guide",
    "title": "Special Note:",
    "content": ". | The final exam is in person. | The exam is performance based and will require access to a Linux Virtual Machine. | If you do not have a laptop/computer you can bring to school, a Linux Computer will be made available to you. | . ",
    "url": "/final_exam/final_exam/#special-note",
    
    "relUrl": "/final_exam/final_exam/#special-note"
  },"268": {
    "doc": "Final Exam Study Guide",
    "title": "Recommendations",
    "content": ". | Arrive to the classroom 30 minutes before the exam starts (5:00 PM) . | This will allow you to test your virtual machine, perform any maintenance, test your internet connection, do a test pull and push, and troubleshoot any hardware problem. | . | Make sure your github repository is organized . | Since you are allowed to use your notes during your exam, it is to your benefit to have all your notes organized. | I recommend creating a single document with all of notes and converting it to pdf. This will make it easier to find information. | BE AWARE that you can only use your notes - NOT YOUR LABS - for the exam. So if I catch you looking at your labs, presentations, book, or the internet during the exam, this will constitute cheating and your exam will be terminated | . | Update Windows and Ubuntu the day before the final exam . | Do not update virtualbox | Create a snapshot of your virtual machine before updating. If anyting goes wrong, you will be able to recover. | . | If you plan on using one of my computers: . | Arrive 15 to 20 minutes early | You will need to clone your repository | You will need to make sure everything works for you | . | . WARNING Your lack of preparation does not constitute an emergency for me. There are no make up exams. You are either here for the exam or your are not! There is another class after our class. Which means that the exam starts at 5:40 and ends at 6:55 on the dot! You must save the last 10 minutes of the exam to prepare your submission. ",
    "url": "/final_exam/final_exam/#recommendations",
    
    "relUrl": "/final_exam/final_exam/#recommendations"
  },"269": {
    "doc": "Final Exam Study Guide",
    "title": "Commands to study",
    "content": ". | Make sure you understand them well. Then include 3 - 5 examples that you understand and can use without any challenge. | Don’t memorize. | awk | cat | cp | cut | grep | head | ls | man | mkdir | mv | tac | tail | touch | tr | tree | . ",
    "url": "/final_exam/final_exam/#commands-to-study",
    
    "relUrl": "/final_exam/final_exam/#commands-to-study"
  },"270": {
    "doc": "Final Exam Study Guide",
    "title": "Concepts to study",
    "content": "Working with Git, GitHub, and Markdown . | How to create a github repository | How to clone a github repository | How to use the git commands | How to write a markdown file that contains images and proper headings | How to convert a markdown file to pdf | . How to Practice? . | Create a repository in github. Give it any name you want. | Clone the repository in your virtual machine | Open the repository/folder/directory in vs code | Create a markdown file inside containing random text. Make sure you have headings, images, pagrapaths, bullet points etc… | Convert the file to html and pdf | Push everything to github | Do you see the files there? | Add a couple more html files by repeating the process. | Did you get lost? if so, you know what you need to study! | . Linux Specific Concents . | How to compress (zip) a directory/folder | The linux filesystem | Absolute path and relative path | When should you use absolute vs relative | Moving around the filesystem with absolute and relative (pwd,cd, ls, and tree) | How to work with multiple terminals open? | How to work with manual pages? | How to parse (search) for specific words in the manual page | How to redirect output (&gt;, &gt;&gt;, and |) | How to append the output of a command to a file | How and when to redirect the output of a command to another (pipes) | How to use echo and output redirection to create a new file that contains some text | How to use wildcards . | For copying and moving multiple files at the same time | . | How to use brace expansion . | For creating entire directory structures in a single command | . | . How to practice? . | Go through the presentations and try to do the practice without looking at the solutions. | Go over all the challenge questions. Do them again using only your notes as reference. That will allow you to know if you need to enhance them or if they are good enough for the final | Did you get lost? Where? Why? Get to the answer without using google or chatgpt. Annotate and add those annotations to your notes | Need more help? Take a look at the extra section of the website and the youtube channel | . ",
    "url": "/final_exam/final_exam/#concepts-to-study",
    
    "relUrl": "/final_exam/final_exam/#concepts-to-study"
  },"271": {
    "doc": "Final Exam Study Guide",
    "title": "Regarding shell scripting:",
    "content": ". | How to create and execute a basic script . | The Bash Shell Lecture - Page 28 | . | How to create user defined variables and environment variables . | The Linux Filesystem Lecture - Page 40 | . | How to use positional parameters . | Shell Scripting - Getting user input Lecture - page 3 - 6 | . | How to use command substitution to store the output of a command in a variable . | Shell Scripting - Getting user input Lecture - Page 7 | . | . ",
    "url": "/final_exam/final_exam/#regarding-shell-scripting",
    
    "relUrl": "/final_exam/final_exam/#regarding-shell-scripting"
  },"272": {
    "doc": "Final Exam Study Guide",
    "title": "How to practice shell scripting for your final exam.",
    "content": "Challenge yourself to write these scripts. Try to do them on your own simply using your notes and the presentation. Everytime you find yourself lost, take notes of the problem and the solution so that you can have it for reference. Script 1: Using Echo and environment variables . Write a shell script that will display the following output: . The challenge here is to: . | Use echo to display messages that include tabs and new lines | Use echo and environment variables together | In this screenshot I use HOME, USER, PWD, and OLDPWD | There is also a cd command in there | . Script 2: Using user defined variables and user input . Write a shell script that will ask the user several questions, store the responses in variables and then use those variables in a single echo command. The output should look like this: . The challenge here is to: . | Collect user information and store in a variable | Use the variables in an echo command to generate a multi line message | You have to use a single echo command | . Script 3: Using positional parameters . Write a shell script that will take 3 positional parameters. The first parameter is the name of a new directory, the second and third are file names. Use the mkdir to create the directory, and then touch to create the 2 files in the new directory. DO NOT USE CD! Here is the output of the script: . The challenge here is to: . | Use positional parameters with echo, mkdir, touch and tree. | Remember to use quotes around your variables. For example tree \"$1\" | Use positional parameters and brace expansion to create the files | . Script 4: Extra! . Create a script that generates this output. Here are the special characters: . ┌ ┐ └ ┘ │ ─ . ",
    "url": "/final_exam/final_exam/#how-to-practice-shell-scripting-for-your-final-exam",
    
    "relUrl": "/final_exam/final_exam/#how-to-practice-shell-scripting-for-your-final-exam"
  },"273": {
    "doc": "ANSI Escape Sequences",
    "title": "ANSI Escape Sequences",
    "content": "| Escape Sequence | Effect | . | \\033[0m | Reset / Normal | . | \\033[1m | Bold / Increased intensity | . | \\033[2m | Faint / Decreased intensity (may not display) | . | \\033[3m | Italicized (not supported in some terminals) | . | \\033[4m | Underlined | . | \\033[5m | Blink (often disabled or not supported) | . | \\033[7m | Inverted / Reverse video | . | \\033[8m | Hidden (conceal text) | . | \\033[9m | Strikethrough text (not widely supported) | . | \\033[10m | Primary font (not widely used) | . | \\033[11m-19m | Alternate fonts 1-9 (rarely supported) | . | \\033[21m | Bold off (reset bold) | . | \\033[22m | Normal color (no bold, no underlined) | . | \\033[23m | Not italicized (reset italic) | . | \\033[24m | Not underlined (remove underline) | . | \\033[25m | Blink off (remove blink) | . | \\033[27m | Reverse off (reset reverse video) | . | \\033[28m | Reveal (unhide text) | . | \\033[29m | Reset strikethrough (remove strikethrough effect) | . | \\033[30m | Set text color to black | . | \\033[31m | Set text color to red | . | \\033[32m | Set text color to green | . | \\033[33m | Set text color to yellow | . | \\033[34m | Set text color to blue | . | \\033[35m | Set text color to magenta | . | \\033[36m | Set text color to cyan | . | \\033[37m | Set text color to white | . | \\033[38m | Set custom text color (ANSI 256 colors or RGB values) | . | \\033[39m | Reset text color to default | . | \\033[40m | Set background color to black | . | \\033[41m | Set background color to red | . | \\033[42m | Set background color to green | . | \\033[43m | Set background color to yellow | . | \\033[44m | Set background color to blue | . | \\033[45m | Set background color to magenta | . | \\033[46m | Set background color to cyan | . | \\033[47m | Set background color to white | . | \\033[48m | Set custom background color (ANSI 256 colors or RGB) | . | \\033[49m | Reset background color to default | . | \\033[50m | Fraktur (not widely supported) | . | \\033[51m | Framed (rarely supported) | . | \\033[52m | Encircled (rarely supported) | . All unsafe sequences are bold. Unsafe means that the particular sequence is not universally supported across terminal emulators. ",
    "url": "/bash/ANSI_escape_sequences/",
    
    "relUrl": "/bash/ANSI_escape_sequences/"
  },"274": {
    "doc": "ANSI Escape Sequences",
    "title": "What are ANSI Escape Sequences/Characters?",
    "content": "ANSI escape characters are sequences of characters used to control text formatting, color, and cursor movement in your terminal. They are used for text styling, color formatting, cursor control and screen movements. They are common in shell scripts. ",
    "url": "/bash/ANSI_escape_sequences/#what-are-ansi-escape-sequencescharacters",
    
    "relUrl": "/bash/ANSI_escape_sequences/#what-are-ansi-escape-sequencescharacters"
  },"275": {
    "doc": "ANSI Escape Sequences",
    "title": "Structure of ANSI Escape Sequences",
    "content": "Take the following Escape Sequence: \\033[31m This is used to set the text color to RED. ANSI Escape codes follow the following formula/patter: . ESC[&lt;parameters&gt;&lt;command&gt; . | ESC (\\033 or \\x1B): Starts the sequence | [ ... ]: The Control Sequence Introducer (CSI) | &lt;parameters&gt;: (optional) Numeric values separated by semicolons (;) to define styles or actions | &lt;command&gt;: A letter that specifies the action. | . ANSI Commands: . Notice that each of text formatting ends in a lowercase m. That is because m is the command for applying the color formatting. There are formats you should be aware exist too. | H: move the cursor to a specified position. Ex. \\033[10;10H moves the cursor to row 10 column 10 | J: Clears part of the screen. Ex: \\033[2J Will clear the screen | K: Clears part of a line. Ex. \\033[3D\\033[K clears from Cursor to End of Line. | . Be aware that H,J,K, may not be supported by your terminal emulator, bash version, or operating system all together. M is more widely supported but still there are many codes that are not. How can I use these codes in my scripts? . The easiest way is to assign them to variables and then use them as you would any other value. For example, . #!/bin/bash RESET=\"\\033[0m\" BOLD=\"\\033[1m\" RED=\"\\033[31m\" echo -e $BOLD$RED\"This text is red\"$RESET . Keep in mind that you must use the reset sequence when you are done formatting otherwise it will keep the formatting for the rest of the script. The example above will set the text color to RED and the font style to bold. You can also download and import some of the sequences in the table above and use the colors as variables. Here is the source file: ansi_sequences.sh. And here is how you can add it to your scripts . Note: Your must have curl instaled . I recommend this example for times when you will the script once. #!/bin/bash curl https://cis106.com/assets/scripts/ansi_escape_codes.sh -o ansi_codes source ansi_codes # Place the rest of your script here echo -e $BackgroundYellow echo -e \"┌───────────────────────────────────────┐\" echo -e \"│ Random Text Goes in this banner │\" echo -e \"└───────────────────────────────────────┘\" echo $Reset # End of script rm ansi_codes # This will remove the ansi_codes file. If you plan on using these codes frequently, here is a better snippet that checks if the file ansi_codes is in your current directory or not. If it is, it skips the curl command. #!/bin/bash [ ! -e ansi_codes ] &amp;&amp; [ ! -s ansi_codes ] &amp;&amp; curl -s https://cis106.com/assets/scripts/ansi_escape_codes.sh -o ansi_codes source ansi_codes . Example: . #!/bin/bash [ ! -e ansi_codes ] &amp;&amp; [ ! -s ansi_codes ] &amp;&amp; curl -s https://cis106.com/assets/scripts/ansi_escape_codes.sh -o ansi_codes source ansi_codes # Place the rest of your script here echo -e $BackgroundYellow\"┌───────────────────────────────────────┐\"$Reset echo -e $BackgroundYellow\"│\"$Blue\" Random Text Goes in this banner\"$Reset$BackgroundYellow\" │\"$Reset echo -e $BackgroundYellow\"└───────────────────────────────────────┘\"$Reset # End of script . ",
    "url": "/bash/ANSI_escape_sequences/#structure-of-ansi-escape-sequences",
    
    "relUrl": "/bash/ANSI_escape_sequences/#structure-of-ansi-escape-sequences"
  },"276": {
    "doc": "Arrays",
    "title": "Arrays",
    "content": ". | Arrays . | What is an array? | Declaring an array . | Method 1: Using Parenthesis | Method 2: Using declare command | . | Accessing elements of an array . | Examples | . | Modifying an array | Looping through an array . | Using for | Interesting example: | Using while | Using until | Interesting Example | . | Working with associative arrays . | Create an associative array: | Accessing values | . | Array operations | . | . ",
    "url": "/bash/arrays/",
    
    "relUrl": "/bash/arrays/"
  },"277": {
    "doc": "Arrays",
    "title": "What is an array?",
    "content": "An array in Bash is a data structure that can store multiple values in a single variable. There are two types of arrays in bash: . | Indexed arrays: this type uses numeric indenes starting at 0 | Associative Arrays: this type uses keys (like a dictionary) | . ",
    "url": "/bash/arrays/#what-is-an-array",
    
    "relUrl": "/bash/arrays/#what-is-an-array"
  },"278": {
    "doc": "Arrays",
    "title": "Declaring an array",
    "content": "Method 1: Using Parenthesis . The formula is simple: array name+=+(+elements separated by a space+). Example: . #!/bin/bash # Array declaration example users=(\"john\" \"Mary\" \"Peter\" \"Ivan\") . This method is used for creating indexed arrays. It cannot be used to create associative arrays. Method 2: Using declare command . The declare command is used to create and modify variables. It allows to control the scope of the variables as well. In the case of arrays, we can use to create indexed arrays or associative arrays. The syntax is: declare+options+array_name+=+value . Example: . #!/bin/bash # Indexed array declare -a users=(\"john\" \"peter\" \"joe\") # Accessing values echo ${users[0]}1 . #!/bin/bash declare -A user # Assign values user[\"name\"]=\"Alice\" user[\"age\"]=35 user[\"eyes\"]=\"brown\" user[\"city\"]=\"New York\" user[\"email\"]=\"alice_88@email.com\" user[\"username\"]=\"a_wa339\" # accessing values: echo -e ${user[\"name\"]} lives in ${user[\"city\"]}. She is ${user[\"age\"]} years old \\ her eyes color is ${user[\"eyes\"]}. Her email address is ${user[\"email\"]}. ",
    "url": "/bash/arrays/#declaring-an-array",
    
    "relUrl": "/bash/arrays/#declaring-an-array"
  },"279": {
    "doc": "Arrays",
    "title": "Accessing elements of an array",
    "content": "The formula to access the an element of an array is as follows: . | $+{+name_of_array+[+index+]+} | . Examples . #!/bin/bash users=(\"john\" \"peter\" \"mario\") echo ${users[0]} # outputs john echo ${users[*]} # outputs all elements echo ${users[@]} # outputs all elements echo ${#users[@]} # Array length echo ${users[-1]} # Last element . ",
    "url": "/bash/arrays/#accessing-elements-of-an-array",
    
    "relUrl": "/bash/arrays/#accessing-elements-of-an-array"
  },"280": {
    "doc": "Arrays",
    "title": "Modifying an array",
    "content": ". | To add an element to the end of an array: . | array_name+=(element) | Example: users+=(\"fred\") | . | To update a given element: . | array_name[index_here]=\"element\" | Example: users[0]=\"root\" | . | To remove an element: . | unset array_name[index_to_delete] | Example: unset users[-1] | . | To clear an entire array: . | unset array_name | Example: unset users | . | . #!/bin/bash users=(\"john\" \"peter\" \"mario\") echo -e \"Current size:\\t${#users[*]}\" echo -e \"Adding a new element: fred\" users+=(\"fred\") #adding element echo -e \"New size:\\t${#users[*]}\" echo -e \"All elements\\t${users[*]}\" echo -e \"Updating first element to root\" users[0]=\"root\" # updating first element echo \"All element: ${users[*]}\" echo \"Removing last element\" unset users[-1] # removing last element echo \"All elements: ${users[*]}\" echo \"Clearing array\" unset users echo \"All elements: ${users[*]}\" . ",
    "url": "/bash/arrays/#modifying-an-array",
    
    "relUrl": "/bash/arrays/#modifying-an-array"
  },"281": {
    "doc": "Arrays",
    "title": "Looping through an array",
    "content": "Using for . Example: . #!/bin/bash users=(\"john\" \"peter\" \"mario\") for user in \"${users[*]}\" do echo \"Current user: $user\" done # Example using indexes: for i in \"${!users[@]}\" do echo \"User $i =&gt; ${users[$i]}\" done . Interesting example: . Create a script that will get an array of all the users in a system then display each user name . #!/bin/bash users=($(awk -F\":\" '{print $1}' /etc/passwd | tr '\\n' \" \")) for user in \"${users[@]}\" do echo \"User: $user\" done . Using while . Example: . #!/bin/bash users=(\"john\" \"peter\" \"mario\") index=0 while [[ $index -lt ${#users[@]} ]] do echo \"User $index =&gt; ${users[$index]}\" ((index++)) done . | This loop runs until the index is less than the length of the array | . Using until . #!/bin/bash users=(\"john\" \"peter\" \"mario\") index=0 until [[ $index -ge ${#users[@]} ]] do echo \"User $index =&gt; ${users[$index]}\" ((index++)) done . | The until loop continues until the condition becomes true. The opposite of a while loop. | . Interesting Example . | You can use until and arrays to validate user input when the input is predictable. | For example, you need the user to answer in one of the following forms: y Y Yes YES No NO n | . #!/bin/bash valid=(\"y\" \"Y\" \"YES\" \"Yes\" \"yes\" \"n\" \"N\" \"no\" \"No\" \"NO\") input=\"\" until [[ \"${valid[@]}\" =~ \"$input\" ]] do read -p \"Continue? (y/n) \" input done echo \"The answer is correct: $input\" . ",
    "url": "/bash/arrays/#looping-through-an-array",
    
    "relUrl": "/bash/arrays/#looping-through-an-array"
  },"282": {
    "doc": "Arrays",
    "title": "Working with associative arrays",
    "content": "Create an associative array: . Associative arrays use key value pairs to store date. For instance, you can have an array of values that stores the user’s name and their corresponding ip address. Example: . #!/bin/bash declare -A users players=([bob]=\"192.168.1.16\" [mary]=\"192.168.1.17\" [joe]=\"192.168.1.18\") echo \"${players[bob]}\" . Accessing values . declare -A users users=([bob]=\"192.168.1.16\" [mary]=\"192.168.1.17\" [joe]=\"192.168.1.18\") echo \"${users[bob]}\" ## Looping through keys for key in \"${!users[@]}\" do echo \"$key's ip is: ${users[$key]}\" done . ",
    "url": "/bash/arrays/#working-with-associative-arrays",
    
    "relUrl": "/bash/arrays/#working-with-associative-arrays"
  },"283": {
    "doc": "Arrays",
    "title": "Array operations",
    "content": "#!/bin/bash users=($(awk -F\":\" '{print $1}' /etc/passwd | tr '\\n' \" \")) # Slicing echo \"${users[@]:1:2}\" # Start at index 1, take 2 elements # Sorting sortedUsers=($(printf \"%s\\n\" \"${users[@]}\" | sort)) echo \"${sortedUsers[@]}\" # Searching for a given element search_string=$(echo $USER) for item in \"${sortedUsers[@]}\" do if [ \"$item\" == \"$search_string\" ] then echo \"array contains $search_string\" if done ## passing an array to a function print_users(){ local array=(\"$@\") for item in \"${array[@]}\" do echo \"$item\" done } print_users \"${sorted_users[@]}\" ## Reading an array from a file mapfile -t my_array &lt; file.txt echo \"${my_array[@]}\" . ",
    "url": "/bash/arrays/#array-operations",
    
    "relUrl": "/bash/arrays/#array-operations"
  },"284": {
    "doc": "Bash Checks",
    "title": "Bash Checks",
    "content": " ",
    "url": "/bash/checks/",
    
    "relUrl": "/bash/checks/"
  },"285": {
    "doc": "Bash Checks",
    "title": "Bash Checks in Markdown Table",
    "content": " ",
    "url": "/bash/checks/#bash-checks-in-markdown-table",
    
    "relUrl": "/bash/checks/#bash-checks-in-markdown-table"
  },"286": {
    "doc": "Bash Checks",
    "title": "1. String Checks",
    "content": "| Check | Description | Returns True If | Example | . | [ -z \"$string\" ] | String is empty | The string has zero length | [ -z \"\" ] &amp;&amp; echo \"Empty\" | . | [ -n \"$string\" ] | String is not empty | The string has non-zero length | [ -n \"Hello\" ] &amp;&amp; echo \"Not Empty\" | . | [ \"$string1\" = \"$string2\" ] | Strings are equal | Both strings are identical | [ \"Hello\" = \"Hello\" ] &amp;&amp; echo \"Equal\" | . | [ \"$string1\" != \"$string2\" ] | Strings are not equal | Both strings are different | [ \"Hello\" != \"World\" ] &amp;&amp; echo \"Not Equal\" | . ",
    "url": "/bash/checks/#1-string-checks",
    
    "relUrl": "/bash/checks/#1-string-checks"
  },"287": {
    "doc": "Bash Checks",
    "title": "2. Number Checks",
    "content": "| Check | Description | Returns True If | Example | . | [ \"$num1\" -eq \"$num2\" ] | Numbers are equal | $num1 is equal to $num2 | [ 5 -eq 5 ] &amp;&amp; echo \"Equal\" | . | [ \"$num1\" -ne \"$num2\" ] | Numbers are not equal | $num1 is not equal to $num2 | [ 5 -ne 10 ] &amp;&amp; echo \"Not Equal\" | . | [ \"$num1\" -gt \"$num2\" ] | Number is greater than | $num1 is greater than $num2 | [ 10 -gt 5 ] &amp;&amp; echo \"Greater\" | . | [ \"$num1\" -lt \"$num2\" ] | Number is less than | $num1 is less than $num2 | [ 5 -lt 10 ] &amp;&amp; echo \"Less\" | . | [ \"$num1\" -ge \"$num2\" ] | Number is greater or equal | $num1 is greater than or equal to $num2 | [ 10 -ge 10 ] &amp;&amp; echo \"Greater/Equal\" | . | [ \"$num1\" -le \"$num2\" ] | Number is less or equal | $num1 is less than or equal to $num2 | [ 5 -le 10 ] &amp;&amp; echo \"Less/Equal\" | . ",
    "url": "/bash/checks/#2-number-checks",
    
    "relUrl": "/bash/checks/#2-number-checks"
  },"288": {
    "doc": "Bash Checks",
    "title": "3. File Checks",
    "content": "| Check | Description | Returns True If | Example | . | [ -e \"$file\" ] | File exists | The file exists | [ -e \"file.txt\" ] &amp;&amp; echo \"Exists\" | . | [ -d \"$file\" ] | File is a directory | The file is a directory | [ -d \"folder\" ] &amp;&amp; echo \"Directory\" | . | [ -r \"$file\" ] | File is readable | The file is readable | [ -r \"file.txt\" ] &amp;&amp; echo \"Readable\" | . | [ -w \"$file\" ] | File is writable | The file is writable | [ -w \"file.txt\" ] &amp;&amp; echo \"Writable\" | . | [ -x \"$file\" ] | File is executable | The file is executable | [ -x \"script.sh\" ] &amp;&amp; echo \"Executable\" | . | [ -s \"$file\" ] | File is not empty | The file is not empty | [ -s \"file.txt\" ] &amp;&amp; echo \"Not Empty\" | . | [ -L \"$file\" ] | File is a symbolic link | The file is a symbolic link | [ -L \"link\" ] &amp;&amp; echo \"Symbolic Link\" | . ",
    "url": "/bash/checks/#3-file-checks",
    
    "relUrl": "/bash/checks/#3-file-checks"
  },"289": {
    "doc": "Bash Comments",
    "title": "Using Comments in Bash",
    "content": "In Bash scripting, comments are used to annotate code, making it easier to understand and maintain. Bash supports single-line comments natively and provides workarounds for multi-line comments. ",
    "url": "/bash/comments/#using-comments-in-bash",
    
    "relUrl": "/bash/comments/#using-comments-in-bash"
  },"290": {
    "doc": "Bash Comments",
    "title": "Bash Comments",
    "content": " ",
    "url": "/bash/comments/",
    
    "relUrl": "/bash/comments/"
  },"291": {
    "doc": "Bash Comments",
    "title": "Single line",
    "content": "# This is a comment echo \"hello world\" . ",
    "url": "/bash/comments/#single-line",
    
    "relUrl": "/bash/comments/#single-line"
  },"292": {
    "doc": "Bash Comments",
    "title": "Single in line comment",
    "content": "echo \"hello world\" # prints hello world ls -lh \"$dir\"/* # long list all files inside $dir . ",
    "url": "/bash/comments/#single-in-line-comment",
    
    "relUrl": "/bash/comments/#single-in-line-comment"
  },"293": {
    "doc": "Bash Comments",
    "title": "Multi line comment style 1",
    "content": "# This is a multiline comment # and here is line 2 # Line 3 echo \"hello world\" . ",
    "url": "/bash/comments/#multi-line-comment-style-1",
    
    "relUrl": "/bash/comments/#multi-line-comment-style-1"
  },"294": {
    "doc": "Bash Comments",
    "title": "Multi line comment - Here document",
    "content": ": &lt;&lt; 'COMMENT' This is a multi-line comment. We can add as much text as we want between the comment tags and it will be ignored by the shell. COMMENT echo \"hello world\" . The key word does not need to be COMMENT. It can be any string. The static part is the :, &lt;&lt; and ' around the keyword. Here is another example: . : &lt;&lt; 'HERE' this is another multiline comment See?! another line and another line HERE echo \"hello world\" . ",
    "url": "/bash/comments/#multi-line-comment---here-document",
    
    "relUrl": "/bash/comments/#multi-line-comment---here-document"
  },"295": {
    "doc": "Control Statements",
    "title": "Control Statements",
    "content": "Control statements are used to control the flow of a script. In bash, we can use the following control statements: . | test command | if/else/elif | [] | [[]] | case | For/while/until loops | . In this guide, we will explore examples of each. ",
    "url": "/bash/controlflow/#control-statements",
    
    "relUrl": "/bash/controlflow/#control-statements"
  },"296": {
    "doc": "Control Statements",
    "title": "test command",
    "content": " ",
    "url": "/bash/controlflow/#test-command",
    
    "relUrl": "/bash/controlflow/#test-command"
  },"297": {
    "doc": "Control Statements",
    "title": "if/else/elif",
    "content": " ",
    "url": "/bash/controlflow/#ifelseelif",
    
    "relUrl": "/bash/controlflow/#ifelseelif"
  },"298": {
    "doc": "Control Statements",
    "title": "[] VS [[]]",
    "content": " ",
    "url": "/bash/controlflow/#-vs-",
    
    "relUrl": "/bash/controlflow/#-vs-"
  },"299": {
    "doc": "Control Statements",
    "title": "case",
    "content": " ",
    "url": "/bash/controlflow/#case",
    
    "relUrl": "/bash/controlflow/#case"
  },"300": {
    "doc": "Control Statements",
    "title": "Loops",
    "content": "For . While . Until . ",
    "url": "/bash/controlflow/#loops",
    
    "relUrl": "/bash/controlflow/#loops"
  },"301": {
    "doc": "Control Statements",
    "title": "Control Statements",
    "content": "Note: Work in progress . ",
    "url": "/bash/controlflow/",
    
    "relUrl": "/bash/controlflow/"
  },"302": {
    "doc": "Bash Functions",
    "title": "Bash Functions",
    "content": "A function is just a small reusable pease of code. It does something and return its result back to the program. It can also return nothing. ",
    "url": "/bash/functions/#bash-functions",
    
    "relUrl": "/bash/functions/#bash-functions"
  },"303": {
    "doc": "Bash Functions",
    "title": "1. Bash Basic function",
    "content": "# Option 1 function function_name() { # body of function here } # Option 2 function_name(){ # body of function here } # to call function: function_name . | Keep in Mind . | Bash functions do not return values. They can return: . | An exit status using return | A value using a variable (global or local) | value via STDOUT - This requests command substitution | . | . | . ",
    "url": "/bash/functions/#1-bash-basic-function",
    
    "relUrl": "/bash/functions/#1-bash-basic-function"
  },"304": {
    "doc": "Bash Functions",
    "title": "2. Return an exit status",
    "content": "# Checks if $1 exist. 0 = true, 1 = false potato(){ [ -f \"$1\" ] &amp;&amp; return 0 || return 1 } potato \"$1\" # We can then use the $? to create logic with the exit status code. [ $? -eq 0 ] &amp;&amp; echo \"$1 exist\" || echo \"$1 doesn't exist\" . ",
    "url": "/bash/functions/#2-return-an-exit-status",
    
    "relUrl": "/bash/functions/#2-return-an-exit-status"
  },"305": {
    "doc": "Bash Functions",
    "title": "3. Returning values with variables",
    "content": "# Using a global variable: potato(){ greeting=\"Good Morning, $1\" } potato \"Mary\" echo \"$greeting\" # Using local variable potato(){ local name=\"$1\" local age=\"$2\" local email=\"$3\" echo -e \"Hello $name\\nAt $age you will need a bigger boat.\\n\\tSent from $email\" } potato \"Mary\" \"43\" \"admin@mail.com\" . ",
    "url": "/bash/functions/#3-returning-values-with-variables",
    
    "relUrl": "/bash/functions/#3-returning-values-with-variables"
  },"306": {
    "doc": "Bash Functions",
    "title": "4. Returning value with command substitution",
    "content": "potato() { local greeting=\"Hello, $1!\" echo \"$greeting\" } result=$(potato \"Bobby\") echo \"$result\" . ",
    "url": "/bash/functions/#4-returning-value-with-command-substitution",
    
    "relUrl": "/bash/functions/#4-returning-value-with-command-substitution"
  },"307": {
    "doc": "Bash Functions",
    "title": "5. Can I return a status code and value at the same time?",
    "content": "Yes. Here is an example: . is_even(){ local numb=$1 if (( numb % 2 == 0 )) then echo \"even\" return 0 else echo \"not even\" return 1 fi } result=$(is_even $1) status_code=$? echo \"the $1 number is $result\" . Side Note: The example script above has a couple of gotchas. If you pass a letter instead of a number it tells you that it is even. How so?? Well, bash does arithmetic evaluation using ((...)) inside these parentheses everything is an integer. This means that every non-integer character is considered a 0 by bash. Notice that I said integer and not number. That is because bash does not support floating point numbers. You need an external utility (like bc) to handle floating point numbers. The next gotcha is the lack of $ in the numb variable. As you already know, in order to access the value of a variable, you need to preface it with a $, however, because the ((...)) are already expecting an integer, the $ becomes optional. The script below is a complete version that handles non integer input. #!/bin/bash is_even() { local numb=$1 # Ensure the input is a number if ! [[ \"$numb\" =~ ^-?[0-9]+$ ]]; then echo \"Error: Input is not an integer\" return 2 # Use a special return code for invalid input fi # Proceed with even/odd check if (( numb % 2 == 0 )); then echo \"even\" return 0 else echo \"not even\" return 1 fi } # Call the function with the user's input result=$(is_even \"$1\") status_code=$? # Check the return code if [ $status_code -eq 2 ]; then echo \"Invalid input: $1 is not an integer.\" else echo \"The $1 number is $result.\" fi . 5.1. Whats up with the arguments? . Just like your script, functions take arguments (positional parameters). These work the same way. Say that you run the script ./playground.sh john carla with the following code: . #!/bin/bash echo \"parameter/argument 1: $1\" echo \"parameter/argument 2: $2\" potato(){ echo \"In the function 1: $1\" echo \"In the function 2: $2\" } potato \"peter\" \"jane\" echo \"Passing the same parameters to the function:\" potato \"$1\" \"$2\" . The output will be: . parameter/argument 1: john parameter/argument 2: carla In the function 1: peter In the function 2: jane Passing the same parameters to the function: In the function 1: john In the function 2: carla . Notice that lines 1 and 2 have the arguments we passed to script but lines 3 and 4 have the arguments we passed to the function. You can passed the same arguments you gave to the script to the function too as you can see in lines 7 and 8 . ",
    "url": "/bash/functions/#5-can-i-return-a-status-code-and-value-at-the-same-time",
    
    "relUrl": "/bash/functions/#5-can-i-return-a-status-code-and-value-at-the-same-time"
  },"308": {
    "doc": "Bash Functions",
    "title": "6. Move advanced examples of functions",
    "content": "6.1. Returning the content of an array . #!/bin/bash all_ip_addresses() { local ips=(\"192.168.1.10\" \"192.168.1.12\" \"192.168.1.14\") echo \"${ips[@]}\" } array=($(all_ip_addresses)) for ip in ${array[@]} do ping -c 4 $ip done . 6.2. Returning an array with mapfile . #!/bin/bash potato() { local dir=\"$1\" local fname=\"$2\" find \"$dir\" -iname \"*$fname\" -type f -print0 } # Use process substitution to pass the function's output to mapfile mapfile -d '' search &lt; &lt;(potato \"$1\" \"$2\") # Access array elements echo \"First member: ${search[0]}\" echo \"Last member: ${search[-1]}\" echo \"Length: ${#search[@]}\" # Process each file for file in \"${search[@]}\"; do # Display file details in a formatted way ls -lhgG --time-style=+%D \"$file\" | grep -v \"total\" | column -t done . Side note: The print0 option of the find command command is used to handle files with special characters in the name (ex. spaces). print0 tells find to separate filenames with a null character (\\0) instead of a newline. 6.3. Using an associative array . #!/bin/bash # Function to get disk usage as an associative array get_disk_usage() { declare -A disk_info local df_output df_output=$(df -h / | tail -1) disk_info[total]=$(echo \"$df_output\" | awk '{print $2}') disk_info[used]=$(echo \"$df_output\" | awk '{print $3}') disk_info[available]=$(echo \"$df_output\" | awk '{print $4}') disk_info[usage_percent]=$(echo \"$df_output\" | awk '{print $5}') # Return the associative array echo \"$(declare -p disk_info)\" } # Call the function and capture the associative array eval \"$(get_disk_usage)\" # Access and display the values from the associative array echo \"Disk Usage Information for '/':\" echo -e \"Total Space:\\t${disk_info[total]}\" echo -e \"Used Space:\\t${disk_info[used]}\" echo -e \"Avail. Space:\\t${disk_info[available]}\" echo -e \"Usage %:\\t${disk_info[usage_percent]}\" . Side Note: declare -p disk_info outputs the array definition as a string that can be re-evaluated using eval. ",
    "url": "/bash/functions/#6-move-advanced-examples-of-functions",
    
    "relUrl": "/bash/functions/#6-move-advanced-examples-of-functions"
  },"309": {
    "doc": "Bash Functions",
    "title": "Bash Functions",
    "content": ". | . | Bash Basic function | . | . | Return an exit status | . | . | Returning values with variables | . | . | Returning value with command substitution | . | . | Can I return a status code and value at the same time? . | 5.1. Whats up with the arguments? | . | . | . | Move advanced examples of functions . | 6.1. Returning the content of an array | 6.2. Returning an array with mapfile | 6.3. Using an associative array | . | . | . ",
    "url": "/bash/functions/",
    
    "relUrl": "/bash/functions/"
  }
}
